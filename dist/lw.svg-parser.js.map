{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///lw.svg-parser.js","webpack:///webpack/bootstrap 111f4647c7c62486eb5a","webpack:///./path.js","webpack:///./parser.js","webpack:///./tag.js","webpack:///./tagparser.js","webpack:///./trace.js","webpack:///../~/clipper-lib/clipper.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","Point","x","y","parseFloat","isNaN","console","error","Error","point","Path","points","forEach","push","scaleUp","arguments","undefined","X","parseInt","Y","_this","scaleDown","addPoint","il","firstPoint","getPoint","isEqual","isClosed","matrix","map","default","Parser","_tag","_tagparser","settings","element","editor","document","defs","tags","traceSettings","assign","linear","step","resolution","segmentLength","supportedTags","parseTags","includes","skipTags","excludes","onTag","onTagContext","input","loadFromString","File","loadFromFile","XMLDocument","loadFromXMLDocument","Element","loadFromElement","Promise","reject","resolve","nodeName","textContent","getElementsByTagName","_this2","documentElement","then","catch","_this3","_parseEditor","parser","DOMParser","XMLDoc","parseFromString","name","version","fingerprint","match","_this4","reader","FileReader","onload","event","result","onerror","readAsText","_this5","load","parse","_parseElement","applyMatrix","tag","info","callback","context","_this6","_onTag","parent","_this7","Tag","indexOf","_skipTag","tagParser","TagParser","childTag","childNodes","childNode","addChild","children","message","warn","attr","_interopRequireDefault","obj","__esModule","_path","_clipperLib","_clipperLib2","DEG_TO_RAD","Math","PI","toLowerCase","layer","attrs","paths","path","shapes","setMatrix","keys","setAttr","defaultValue","getAttr","getLayerName","clearPath","close","relative","addMatrix","angle","cos","sin","tan","transform","shape","outer","holes","hole","fillRule","PolyFillType","pftNonZero","pftEvenOdd","cPolyTree","PolyTree","cClipper","Clipper","clipperScale","clipperPaths","getClipperPoints","AddPaths","PolyType","ptSubject","Execute","ClipType","ctUnion","PolyTreeToPaths","polygones","SimplifyPolygons","Clear","StrictlySimple","toPath","fromClipperPoints","exPolygons","JS","PolyTreeToExPolygons","exPolygon","_trace","_path2","currentCommand","lastCommand","pathData","handler","_parseTagAttrs","attributes","style","some","_normalizeTagAttr","split","nodeValue","colorsAttrs","attrName","_parseViewBoxAttr","_parseTransformAttr","replace","trim","_skipTagAttr","_normalizeTagAttrUnit","_normalizeTagAttrPoints","_normalizeTagAttrRange","_normalizeTagAttrPreserveAspectRatio","stringValue","floatValue","_parseNumbers","min","max","filter","params","defer","align","meet","slice","rawParams","substr","viewBox","width","height","scaleX","scaleY","translateX","translateY","preserveAspectRatio","newWidth","newHeight","translate","scale","transformAttr","transformations","pop","type","raw","func","tagTransform","apply","newPath","closePath","addPoints","title","description","useTag","setLayerName","shift","concat","_polyline","w","h","rx","ry","dx","dy","r","cx","cy","num","splice","join","dAttr","commands","parseError","toUpperCase","_clearPath","_newPath","_addPoints","_closePath","every","_paths","p1","rl","x1","y1","x2","y2","p2","p3","p4","tracer","CubicBezier","coords","trace","QuadricBezier","large","sweep","Arc","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","mod","clamp","val","distance","p0","sqrt","pow","v0","v1","n","acos","_get","get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","getPrototypeOf","getter","MATH_PI_2","TraceBase","arcLength","arcLengthMap","t","prevPoint","getPointAtT","nextPoint","u","targetDistanceFromStartingPoint","resultantT","prevArcLength","prevT","entry","endDiff","startDiff","linearFactor","_approximateLength","segments","round","_addPoint","_postTrace","getPath","_TraceBase","radians","abs","__addPoint","transformedPoint","radiiCheck","cSquareNumerator","cSquareRootDenom","cRadicand","cCoef","transformedCenter","center","startVector","endVector","startAngle","sweepAngle","init","_TraceBase2","_B1","_B2","_B3","_B4","_C1","unshift","_TraceBase3","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","BigInteger","a","b","ClipperLib","biginteger_used","fromInt","fromNumber","fromString","nbi","am1","j","v","floor","am2","xl","xh","l","am3","int2char","BI_RM","charAt","intAt","s","BI_RC","charCodeAt","bnpCopyTo","bnpFromInt","DV","nbv","bnpFromString","k","fromRadix","mi","sh","DB","ZERO","subTo","bnpClamp","DM","bnToString","negate","toString","toRadix","d","km","bnNegate","bnAbs","bnCompareTo","nbits","bnBitLength","bnpDLShiftTo","bnpDRShiftTo","bnpLShiftTo","bs","cbs","bm","ds","bnpRShiftTo","bnpSubTo","bnpMultiplyTo","am","bnpSquareTo","bnpDivRemTo","q","pm","pt","copyTo","ts","ms","nsh","lShiftTo","ys","y0","yt","F1","F2","d1","FV","d2","e","dlShiftTo","compareTo","ONE","qd","drShiftTo","rShiftTo","bnMod","divRemTo","Classic","cConvert","cRevert","cReduce","cMulTo","multiplyTo","reduce","cSqrTo","squareTo","bnpInvDigit","Montgomery","mp","invDigit","mpl","mph","um","mt2","montConvert","montRevert","montReduce","u0","montSqrTo","montMulTo","bnpIsEven","bnpExp","z","r2","g","convert","sqrTo","mulTo","revert","bnModPowInt","isEven","exp","bnClone","bnIntValue","bnByteValue","bnShortValue","bnpChunkSize","LN2","log","bnSigNum","bnpToRadix","signum","cs","chunkSize","intValue","bnpFromRadix","dMultiply","dAddOffset","bnpFromNumber","testBit","bitwiseTo","shiftLeft","op_or","isProbablePrime","bitLength","Array","nextBytes","bnToByteArray","bnEquals","bnMin","bnMax","bnpBitwiseTo","op","f","op_and","bnAnd","bnOr","op_xor","bnXor","op_andnot","bnAndNot","bnNot","bnShiftLeft","bnShiftRight","lbit","bnGetLowestSetBit","cbit","bnBitCount","bnTestBit","bnpChangeBit","bnSetBit","changeBit","bnClearBit","bnFlipBit","bnpAddTo","bnAdd","addTo","bnSubtract","bnMultiply","bnSquare","bnDivide","bnRemainder","bnDivideAndRemainder","bnpDMultiply","bnpDAddOffset","NullExp","nNop","nMulTo","nSqrTo","bnPow","bnpMultiplyLowerTo","bnpMultiplyUpperTo","Barrett","q3","mu","divide","barrettConvert","barrettRevert","barrettReduce","multiplyUpperTo","multiplyLowerTo","barrettSqrTo","barrettMulTo","bnModPow","k1","g2","is1","bnGCD","clone","getLowestSetBit","bnpModInt","bnModInverse","ac","subtract","add","bnIsProbablePrime","lowprimes","lplim","modInt","millerRabin","bnpMillerRabin","n1","shiftRight","random","modPow","modPowInt","use_int32","use_xyz","use_lines","isNode","window","navigator_appName","nav","navigator","userAgent","appName","browser","chrome","chromium","safari","firefox","firefox17","firefox15","firefox3","opera","msie10","msie9","msie8","msie7","msie","dbits","canary","j_lm","BI_FP","rr","vv","byteValue","shortValue","toByteArray","equals","and","or","xor","andNot","not","bitCount","setBit","clearBit","flipBit","multiply","remainder","divideAndRemainder","modInverse","gcd","square","Int128","IsNegative","op_Equality","val1","val2","op_Inequality","op_GreaterThan","op_LessThan","op_Addition","lhs","rhs","op_Subtraction","Int128Mul","op_Division","ToDouble","Inherit","ce","ce2","$baseCtor","getOwnPropertyNames","Paths","DoublePoint","DoublePoint0","DoublePoint1","dp","DoublePoint2","PolyNode","m_Parent","m_polygon","m_Index","m_jointype","m_endtype","m_Childs","IsOpen","IsHoleNode","node","ChildCount","Contour","AddChild","Child","cnt","GetNext","GetNextSiblingUp","Childs","Parent","IsHole","m_AllPolys","ilen","GetFirst","Total","Math_Abs_Int64","Math_Abs_Int32","Math_Abs_Double","Math_Max_Int32_Int32","Cast_Int32","Cast_Int64","ceil","Number","toInteger","PI2","IntPoint","alen","Z","Round","IntPoint0","IntPoint1","IntPoint1dp","IntPoint2","IntPoint3","IntRect","left","top","right","bottom","ir","IntRect0","IntRect1","IntRect4","ctIntersection","ctDifference","ctXor","ptClip","pftPositive","pftNegative","JoinType","jtSquare","jtRound","jtMiter","EndType","etOpenSquare","etOpenRound","etOpenButt","etClosedLine","etClosedPolygon","EdgeSide","esLeft","esRight","Direction","dRightToLeft","dLeftToRight","TEdge","Bot","Curr","Top","Delta","Dx","PolyTyp","Side","WindDelta","WindCnt","WindCnt2","OutIdx","Next","Prev","NextInLML","NextInAEL","PrevInAEL","NextInSEL","PrevInSEL","IntersectNode","Edge1","Edge2","Pt","MyIntersectNodeSort","Compare","node1","node2","LocalMinima","LeftBound","RightBound","Scanbeam","OutRec","Idx","FirstLeft","Pts","BottomPt","OutPt","Join","OutPt1","OutPt2","OffPt","ClipperBase","m_MinimaList","m_CurrentLM","m_edges","m_UseFullRange","m_HasOpenPaths","PreserveCollinear","horizontal","Skip","Unassigned","tolerance","loRange","hiRange","near_zero","IsHorizontal","PointIsVertex","pp","pp2","PointOnLineSegment","linePt1","linePt2","UseFullRange","PointOnPolygon","SlopesEqual","e1","e2","pt1","pt2","pt3","pt4","SlopesEqual3","SlopesEqual4","SlopesEqual5","DisposeLocalMinimaList","jlen","tmpLm","RangeTest","useFullRange","Value","InitEdge","eNext","ePrev","InitEdge2","polyType","SetDx","FindNextLocMin","E","E2","ProcessBound","LeftBoundIsForward","EStart","Horz","Result","locMin","InsertLocalMinima","ReverseHorizontal","AddPath","pg","Closed","highI","edges","IsFlat","$1","eStart","eLoopStop","Pt2IsBetweenPt1AndPt3","RemoveEdge","leftBoundIsForward","EMin","ppg","closed","newLm","PopLocalMinima","tmp","Reset","lm","InitOptions","m_PolyOuts","m_ClipType","m_Scanbeam","m_ActiveEdges","m_SortedEdges","m_IntersectList","m_IntersectNodeComparer","m_ExecuteLocked","m_ClipFillType","m_SubjFillType","m_Joins","m_GhostJoins","m_UsingPolyTree","ReverseSolution","ZFillFunction","ioReverseSolution","ioStrictlySimple","ioPreserveCollinear","DisposeAllPolyPts","DisposeScanbeamList","sb2","InsertScanbeam","newSb","ispolytree","clipType","solution","subjFillType","clipFillType","succeeded","ExecuteInternal","BuildResult","polytree","BuildResult2","FixHoleLinkage","outRec","orfl","botY","PopScanbeam","InsertLocalMinimaIntoAEL","ProcessHorizontals","topY","ProcessIntersections","ProcessEdgesAtTopOfScanbeam","Area","ReversePolyPtLinks","JoinCommonEdges","FixupOutPolygon","DoSimplePolygons","DisposeOutRec","index","AddJoin","Op1","Op2","AddGhostJoin","Op","SetZ","lb","rb","InsertEdgeIntoAEL","SetWindingCount","IsContributing","AddOutPt","AddLocalMinPoly","AddEdgeToSEL","HorzSegmentsOverlap","IntersectEdges","edge","startEdge","E2InsertsBeforeE1","TopX","IsEvenOddFillType","IsEvenOddAltFillType","pft","pft2","Inside","CopyAELToSEL","SwapPositionsInAEL","edge1","edge2","next","prev","SwapPositionsInSEL","AddLocalMaxPoly","AppendPolygon","prevE","outPt","CreateOutRec","ToFront","newOp","SetHoleState","SwapPoints","seg1a","seg1b","seg2a","seg2b","isHole","GetDx","FirstIsBottomPt","btmPt1","btmPt2","dx1p","dx1n","dx2p","dx2n","GetBottomPt","dups","GetLowermostRec","outRec1","outRec2","bPt1","bPt2","Param1RightOfParam2","GetOutRec","idx","outrec","holeStateRec","side","p1_lft","p1_rt","p2_lft","p2_rt","OKIdx","ObsoleteIdx","pp1","SwapSides","SwapPolyIndexes","outIdx","e1Contributing","e2Contributing","oldE1WindCnt","e1FillType","e2FillType","e1FillType2","e2FillType2","e1Wc","e2Wc","e1Wc2","e2Wc2","DeleteFromAEL","AelPrev","AelNext","DeleteFromSEL","SelPrev","SelNext","UpdateEdgeIntoAEL","isTopOfScanbeam","horzEdge","ProcessHorizontal","GetHorzDirection","HorzEdge","$var","Left","Right","Dir","dir","horzLeft","horzRight","eLastHorz","eMaxPair","GetMaximaPair","IsLastHorz","GetNextInAEL","op1","eNextHorz","op2","IsMinima","IsMaxima","IsIntermediate","BuildIntersectList","FixupIntersectionOrder","ProcessIntersectList","$$e2","isModified","IntersectPoint","newNode","EdgesAdjacent","inode","IntersectNodeSort","sort","iNode","R1","R2","R3","R4","currentY","ip","b1","b2","IsMaximaEdge","DoMaxima","ReversePaths","polys","len","reverse","Orientation","poly","PointCount","pts","polyg","pn","lastOK","DupOutPt","InsertAfter","GetOverlap","a1","a2","$val","JoinHorz","op1b","op2b","DiscardLeft","Dir1","Dir2","JoinPoints","isHorizontal","reverse1","reverse2","DiscardLeftSide","Reverse1","Reverse2","GetBounds","GetBounds2","ops","opStart","PointInPolygon","ipNext","startOp","ptx","pty","poly0x","poly0y","poly1x","poly1y","Poly2ContainsPoly1","outPt1","outPt2","res","FixupFirstLefts1","OldOutRec","NewOutRec","firstLeft","ParseFirstLeft","FixupFirstLefts2","$i2","$t2","$l2","UpdateOutPtIdxs","oRec","op3","op4","outrec2","SimplifyPolygon","fillType","DistanceSqrd","DistanceFromLineSqrd","ln1","ln2","A","B","C","SlopesNearCollinear","distSqrd","PointsAreClose","ExcludeOp","CleanPolygon","outPts","CleanPolygons","Minkowski","pattern","IsSum","IsClosed","delta","polyCnt","pathCnt","quads","quad","MinkowskiSum","path_or_paths","pathIsClosed","TranslatePath","outPath","MinkowskiDiff","poly1","poly2","AddPolyNodeToPaths","NodeType","ntAny","polynode","nt","ntOpen","ntClosed","$i3","$t3","$l3","OpenPathsFromPolyTree","ClosedPathsFromPolyTree","ClipperOffset","miterLimit","arcTolerance","def_arc_tolerance","m_destPolys","m_srcPoly","m_destPoly","m_normals","m_delta","m_sinA","m_sin","m_cos","m_miterLim","m_StepsPerRad","m_lowest","m_polyNodes","MiterLimit","ArcTolerance","two_pi","joinType","endType","FixOrientations","GetUnitNormal","DoOffset","steps","OffsetPoint","DoSquare","DoRound","X2","clpr","outerNode","jointype","cosA","DoMiter","atan2","err","alert","AreaOfPolygon","AreaOfPolygons","area","BoundsOfPath","BoundsOfPaths","bounds","Clean","polygon","isPolygons","Clone","k_length","results","plen","Lighten","P","rem","addlast","bxax","byay","ax","ay","toleranceSq","PerimeterOfPath","perimeter","p1x","p1y","p2x","p2y","PerimeterOfPaths","ScaleDownPath","ScaleDownPaths","ScaleUpPath","ScaleUpPaths","ExPolygons","ExPolygon","AddOuterPolyNodeToExPolygons","expolygons","ep","childs","childs2","ExPolygonsToPaths"],"mappings":"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","file":"lw.svg-parser.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SVGParser\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SVGParser\"] = factory();\n\telse\n\t\troot[\"SVGParser\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SVGParser\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SVGParser\"] = factory();\n\telse\n\t\troot[\"SVGParser\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(2);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Point = function () {\n\t    // Class constructor...\n\t    function Point(x, y) {\n\t        _classCallCheck(this, Point);\n\t\n\t        // Init properties\n\t        this.x = parseFloat(x);\n\t        this.y = parseFloat(y);\n\t\n\t        if (isNaN(this.x) || isNaN(this.y)) {\n\t            console.error('x:', x, 'y:', y);\n\t            throw new Error('Float value!!!');\n\t        }\n\t    }\n\t\n\t    _createClass(Point, [{\n\t        key: 'isEqual',\n\t        value: function isEqual(point) {\n\t            return this.x === point.x && this.y === point.y;\n\t        }\n\t    }]);\n\t\n\t    return Point;\n\t}();\n\t\n\tvar Path = function () {\n\t    // Class constructor...\n\t    function Path() {\n\t        _classCallCheck(this, Path);\n\t\n\t        // Init properties\n\t        this.points = [];\n\t        this.length = 0;\n\t    }\n\t\n\t    _createClass(Path, [{\n\t        key: 'getPoints',\n\t        value: function getPoints() {\n\t            return this.points;\n\t        }\n\t    }, {\n\t        key: 'getFlattenPoints',\n\t        value: function getFlattenPoints() {\n\t            var points = [];\n\t            this.points.forEach(function (point) {\n\t                return points.push(point.x, point.y);\n\t            });\n\t            return points;\n\t        }\n\t    }, {\n\t        key: 'getClipperPoints',\n\t        value: function getClipperPoints() {\n\t            var scaleUp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\t\n\t            var points = [];\n\t            this.points.forEach(function (point) {\n\t                return points.push({ X: parseInt(point.x * scaleUp), Y: parseInt(point.y * scaleUp) });\n\t            });\n\t            return points;\n\t        }\n\t    }, {\n\t        key: 'fromClipperPoints',\n\t        value: function fromClipperPoints(points) {\n\t            var _this = this;\n\t\n\t            var scaleDown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\t\n\t            this.points = [];\n\t            points.forEach(function (point) {\n\t                return _this.addPoint(parseFloat(point.X * scaleDown), parseFloat(point.Y * scaleDown));\n\t            });\n\t            return this;\n\t        }\n\t    }, {\n\t        key: 'getPoint',\n\t        value: function getPoint(i) {\n\t            return this.points[i < 0 ? this.length + i : i] || null;\n\t        }\n\t    }, {\n\t        key: 'addPoint',\n\t        value: function addPoint(x, y) {\n\t            this.points.push(new Point(x, y));\n\t            this.length = this.points.length;\n\t        }\n\t    }, {\n\t        key: 'addPoints',\n\t        value: function addPoints(points) {\n\t            // For each couple of points\n\t            for (var i = 0, il = points.length; i < il; i += 2) {\n\t                this.addPoint(points[i], points[i + 1]);\n\t            }\n\t        }\n\t    }, {\n\t        key: 'isClosed',\n\t        value: function isClosed() {\n\t            var firstPoint = this.getPoint(0);\n\t            return firstPoint && firstPoint.isEqual(this.getPoint(-1));\n\t        }\n\t    }, {\n\t        key: 'close',\n\t        value: function close() {\n\t            if (!this.isClosed() && this.length > 2) {\n\t                var firstPoint = this.getPoint(0);\n\t                this.addPoint(firstPoint.x, firstPoint.y);\n\t                return true;\n\t            }\n\t\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'transform',\n\t        value: function transform(matrix) {\n\t            this.points = this.points.map(function (point) {\n\t                return new Point(matrix[0] * point.x + matrix[2] * point.y + matrix[4], matrix[1] * point.x + matrix[3] * point.y + matrix[5]);\n\t            });\n\t        }\n\t    }]);\n\t\n\t    return Path;\n\t}();\n\t\n\t// Exports\n\t\n\t\n\texports.Path = Path;\n\texports.Point = Point;\n\texports.default = Path;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.Parser = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Imports\n\t\n\t\n\tvar _tag = __webpack_require__(3);\n\t\n\tvar _tagparser = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// SVG parser class\n\tvar Parser = function () {\n\t    // Class constructor...\n\t    function Parser(settings) {\n\t        _classCallCheck(this, Parser);\n\t\n\t        // Defaults settings\n\t        settings = settings || {};\n\t\n\t        // Init properties\n\t        this.element = null; // XML document Element object\n\t        this.editor = null; // Editor info { name, version, fingerprint }\n\t        this.document = null; // Document info { width, height, viewBox }\n\t        this.defs = null; // Defined <defs> (DOM) nodes list by id\n\t        this.tags = null; // Tag objects hierarchy\n\t\n\t        // Trace settings (Arc, Bezier)\n\t        this.traceSettings = Object.assign({\n\t            linear: true, // Linear trace mode\n\t            step: 0.01, // Step resolution if linear mode = false\n\t            resolution: 100, // Number of segments we use to approximate arc length\n\t            segmentLength: 1 }, settings.traceSettings || {});\n\t\n\t        // Supported tags by this lib\n\t        this.supportedTags = ['svg', 'g', 'defs', 'use', 'line', 'polyline', 'polygon', 'rect', 'circle', 'ellipse', 'path', 'title', 'desc'];\n\t\n\t        // Tags list to includes/excludes\n\t        this.parseTags = settings.includes || this.supportedTags;\n\t        this.skipTags = settings.excludes || ['#text', '#comment']; // silent (no warning)\n\t\n\t        // User onTag callback ?\n\t        settings.onTag && this.onTag(settings.onTag, settings.onTagContext);\n\t    }\n\t\n\t    // Load raw XML string, XMLDocument, Element or File object\n\t\n\t\n\t    _createClass(Parser, [{\n\t        key: 'load',\n\t        value: function load(input) {\n\t            // Load raw XML string\n\t            if (typeof input === 'string') {\n\t                return this.loadFromString(input);\n\t            }\n\t\n\t            // Load File object\n\t            if (input instanceof File) {\n\t                return this.loadFromFile(input);\n\t            }\n\t\n\t            // Load XMLDocument object\n\t            if (input instanceof XMLDocument) {\n\t                return this.loadFromXMLDocument(input);\n\t            }\n\t\n\t            // Load Element object\n\t            if (input instanceof Element) {\n\t                return this.loadFromElement(input);\n\t            }\n\t\n\t            // Return rejected promise with an Error object\n\t            return Promise.reject(new Error('Unsupported input format.'));\n\t        }\n\t\n\t        // Load from Element object\n\t\n\t    }, {\n\t        key: 'loadFromElement',\n\t        value: function loadFromElement(input) {\n\t            var _this = this;\n\t\n\t            return new Promise(function (resolve, reject) {\n\t                // Bad input type\n\t                if (!(input instanceof Element)) {\n\t                    reject(new Error('Input param must be a Element object.'));\n\t                }\n\t\n\t                // Parser error\n\t                if (input.nodeName === 'parsererror') {\n\t                    // FF\n\t                    reject(new Error(input.textContent));\n\t                }\n\t\n\t                if (input.nodeName === 'html' && input.getElementsByTagName('parsererror')) {\n\t                    // Chrome\n\t                    reject(new Error(input.getElementsByTagName('parsererror')[0].textContent));\n\t                }\n\t\n\t                // Set document element\n\t                _this.element = input;\n\t\n\t                // Resolve promise\n\t                resolve(input);\n\t            });\n\t        }\n\t\n\t        // Load from XMLDocument object\n\t\n\t    }, {\n\t        key: 'loadFromXMLDocument',\n\t        value: function loadFromXMLDocument(input) {\n\t            var _this2 = this;\n\t\n\t            return new Promise(function (resolve, reject) {\n\t                // Bad input type\n\t                if (!(input instanceof XMLDocument)) {\n\t                    reject(new Error('Input param must be a XMLDocument object.'));\n\t                }\n\t\n\t                // Load from Element...\n\t                _this2.loadFromElement(input.documentElement).then(resolve).catch(reject);\n\t            });\n\t        }\n\t\n\t        // Load raw XML string\n\t\n\t    }, {\n\t        key: 'loadFromString',\n\t        value: function loadFromString(input) {\n\t            var _this3 = this;\n\t\n\t            return new Promise(function (resolve, reject) {\n\t                // Bad input type\n\t                if (typeof input !== 'string') {\n\t                    reject(new Error('Input param must be a string.'));\n\t                }\n\t\n\t                // Parse svg editor\n\t                _this3._parseEditor(input);\n\t\n\t                // Parse string as DOM object\n\t                var parser = new DOMParser();\n\t                var XMLDoc = parser.parseFromString(input, 'text/xml');\n\t\n\t                // Load from XMLDocument...\n\t                _this3.loadFromXMLDocument(XMLDoc).then(resolve).catch(reject);\n\t            });\n\t        }\n\t\n\t        // Try to get the svg editor from input string\n\t\n\t    }, {\n\t        key: '_parseEditor',\n\t        value: function _parseEditor(input) {\n\t            // Reset editor\n\t            this.editor = {\n\t                name: 'unknown',\n\t                version: null,\n\t                fingerprint: null\n\t            };\n\t\n\t            // Fingerprint matches\n\t            var fingerprint = void 0;\n\t\n\t            // Inkscape\n\t            fingerprint = input.match(/<!-- Created with Inkscape .*-->/i);\n\t\n\t            if (fingerprint) {\n\t                this.editor.name = 'inkscape';\n\t                this.editor.fingerprint = fingerprint[0];\n\t\n\t                return this.editor;\n\t            }\n\t\n\t            // Illustrator\n\t            fingerprint = input.match(/<!-- Generator: Adobe Illustrator ([0-9\\.]+), .*-->/i);\n\t\n\t            if (fingerprint) {\n\t                this.editor.name = 'illustrator';\n\t                this.editor.version = fingerprint[1];\n\t                this.editor.fingerprint = fingerprint[0];\n\t\n\t                return this.editor;\n\t            }\n\t\n\t            // Return default\n\t            return this.editor;\n\t        }\n\t\n\t        // Load from File object\n\t\n\t    }, {\n\t        key: 'loadFromFile',\n\t        value: function loadFromFile(input) {\n\t            var _this4 = this;\n\t\n\t            return new Promise(function (resolve, reject) {\n\t                // Bad input type\n\t                if (!(input instanceof File)) {\n\t                    reject(new Error('Input param must be a File object.'));\n\t                }\n\t\n\t                // Create file reader\n\t                var reader = new FileReader();\n\t\n\t                // Register reader events handlers\n\t                reader.onload = function (event) {\n\t                    _this4.loadFromString(event.target.result).then(resolve).catch(reject);\n\t                };\n\t\n\t                reader.onerror = function (event) {\n\t                    reject(new Error('Error reading file : ' + input.name));\n\t                };\n\t\n\t                // Finally read input file as text\n\t                reader.readAsText(input);\n\t            });\n\t        }\n\t\n\t        // Parse the (loaded) element\n\t\n\t    }, {\n\t        key: 'parse',\n\t        value: function parse(input) {\n\t            var _this5 = this;\n\t\n\t            // Reset properties\n\t            this.document = null;\n\t            this.defs = {};\n\t            this.tags = null;\n\t\n\t            // Load input if provided\n\t            if (input) {\n\t                return new Promise(function (resolve, reject) {\n\t                    _this5.load(input).then(function () {\n\t                        resolve(_this5.parse());\n\t                    }).catch(reject);\n\t                });\n\t            }\n\t\n\t            // Start parsing element\n\t            return new Promise(function (resolve, reject) {\n\t                // If no element is loaded\n\t                if (!_this5.element) {\n\t                    reject(new Error('No element is loaded, call the load method before.'));\n\t                }\n\t\n\t                // Parse the main Element (recursive)\n\t                _this5.tags = _this5._parseElement(_this5.element);\n\t\n\t                if (!_this5.tags) {\n\t                    reject(new Error('No supported tags found.'));\n\t                }\n\t\n\t                // Apply matrix (recursive)\n\t                _this5.tags.applyMatrix();\n\t\n\t                // Resolve the promise\n\t                resolve(_this5.tags);\n\t            });\n\t        }\n\t\n\t        // On tag callback\n\t\n\t    }, {\n\t        key: '_onTag',\n\t        value: function _onTag(tag) {\n\t            console.info('onTag:', tag);\n\t        }\n\t\n\t        // Register on tag callback\n\t\n\t    }, {\n\t        key: 'onTag',\n\t        value: function onTag(callback, context) {\n\t            var _this6 = this;\n\t\n\t            this._onTag = function (tag) {\n\t                return callback.call(context || _this6, tag);\n\t            };\n\t        }\n\t\n\t        // Parse the provided Element and return an Tag collection (recursive)\n\t\n\t    }, {\n\t        key: '_parseElement',\n\t        value: function _parseElement(element, parent) {\n\t            var _this7 = this;\n\t\n\t            // Create base tag object\n\t            var tag = new _tag.Tag(element, parent);\n\t\n\t            // Exluded tag ?\n\t            if (this.skipTags.indexOf(tag.name) !== -1) {\n\t                return null; // silent\n\t            }\n\t\n\t            // Supported tag ?\n\t            if (this.parseTags.indexOf(tag.name) === -1) {\n\t                return this._skipTag(tag, 'unsupported');\n\t            }\n\t\n\t            // Parse the tag\n\t            var tagParser = new _tagparser.TagParser(tag, this);\n\t\n\t            if (!tagParser.parse()) {\n\t                return false;\n\t            }\n\t\n\t            // Call the on tag callback\n\t            this._onTag(tag);\n\t\n\t            // Parse child nodes\n\t            var childTag = void 0;\n\t\n\t            element.childNodes.forEach(function (childNode) {\n\t                // Parse child element\n\t                if (childTag = _this7._parseElement(childNode, tag)) {\n\t                    tag.addChild(childTag);\n\t                }\n\t            });\n\t\n\t            // Empty group\n\t            if (['svg', 'g'].indexOf(tag.name) !== -1 && !tag.children.length) {\n\t                return this._skipTag(tag, 'empty');\n\t            }\n\t\n\t            // Return tag object\n\t            return tag;\n\t        }\n\t\n\t        // Log skip tag warning message\n\t\n\t    }, {\n\t        key: '_skipTag',\n\t        value: function _skipTag(tag, message) {\n\t            console.warn('Skip tag :', message + ':', tag);\n\t            return false;\n\t        }\n\t\n\t        // Log skip tag attribute warning message\n\t\n\t    }, {\n\t        key: '_skipTagAttr',\n\t        value: function _skipTagAttr(tag, attr, message) {\n\t            console.warn('Skip tag attribute :', message + ':', attr, tag);\n\t            return false;\n\t        }\n\t    }]);\n\t\n\t    return Parser;\n\t}();\n\t\n\t// Exports\n\t\n\t\n\texports.Parser = Parser;\n\texports.default = Parser;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.Tag = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _path = __webpack_require__(1);\n\t\n\tvar _clipperLib = __webpack_require__(6);\n\t\n\tvar _clipperLib2 = _interopRequireDefault(_clipperLib);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar DEG_TO_RAD = Math.PI / 180;\n\t\n\t// SVG tag class\n\t\n\tvar Tag = function () {\n\t    // Class constructor...\n\t    function Tag(element, parent) {\n\t        var _this = this;\n\t\n\t        _classCallCheck(this, Tag);\n\t\n\t        // Init properties\n\t        this.element = element;\n\t        this.name = element.nodeName.toLowerCase();\n\t        this.parent = parent || null;\n\t        this.layer = null;\n\t        this.attrs = {};\n\t        this.children = [];\n\t        this.paths = [];\n\t        this.matrix = null;\n\t        this.path = new _path.Path();\n\t        this.point = new _path.Point(0, 0);\n\t        this.shapes = [];\n\t\n\t        // Add first path\n\t        this.paths.push(this.path);\n\t\n\t        // Set the matrix\n\t        this.setMatrix(this.parent && this.parent.matrix);\n\t\n\t        // Clone parent attributes\n\t        if (this.parent && (this.parent.name === 'g' || this.parent.name === 'svg')) {\n\t            (function () {\n\t                // Inherit layer name\n\t                _this.layer = _this.parent.layer;\n\t\n\t                // Inherit parent attributes\n\t                var excludes = ['transform', 'width', 'height'];\n\t\n\t                Object.keys(_this.parent.attrs).forEach(function (key) {\n\t                    if (excludes.indexOf(key) === -1) {\n\t                        _this.setAttr(key, _this.parent.attrs[key]);\n\t                    }\n\t                });\n\t            })();\n\t        }\n\t    }\n\t\n\t    _createClass(Tag, [{\n\t        key: 'setAttr',\n\t        value: function setAttr(name, value) {\n\t            this.attrs[name] = value;\n\t        }\n\t    }, {\n\t        key: 'getAttr',\n\t        value: function getAttr(name, defaultValue) {\n\t            return this.attrs[name] !== undefined ? this.attrs[name] : defaultValue !== undefined ? defaultValue : null;\n\t        }\n\t    }, {\n\t        key: 'getLayerName',\n\t        value: function getLayerName() {\n\t            if (this.name === 'g') {\n\t                return this.getAttr('inkscape:label', this.getAttr('id', null));\n\t            }\n\t        }\n\t    }, {\n\t        key: 'setLayerName',\n\t        value: function setLayerName(name) {\n\t            if (this.name === 'g') {\n\t                this.layer = name || this.getLayerName();\n\t            }\n\t        }\n\t    }, {\n\t        key: 'addChild',\n\t        value: function addChild(childTag) {\n\t            this.children.push(childTag);\n\t        }\n\t    }, {\n\t        key: 'clearPath',\n\t        value: function clearPath() {\n\t            this.path = new _path.Path();\n\t        }\n\t    }, {\n\t        key: 'newPath',\n\t        value: function newPath() {\n\t            if (this.path.length > 0) {\n\t                this.clearPath();\n\t                this.paths.push(this.path);\n\t            }\n\t        }\n\t    }, {\n\t        key: 'closePath',\n\t        value: function closePath() {\n\t            return this.path.close();\n\t        }\n\t    }, {\n\t        key: 'addPoint',\n\t        value: function addPoint(x, y, relative) {\n\t            // Relative from the last point\n\t            if (relative) {\n\t                x += this.point.x;\n\t                y += this.point.y;\n\t            }\n\t\n\t            // Add current point\n\t            this.path.addPoint(x, y);\n\t\n\t            // Update current point\n\t            this.point = this.path.getPoint(-1);\n\t        }\n\t    }, {\n\t        key: 'addPoints',\n\t        value: function addPoints(points, relative) {\n\t            // For each couple of points\n\t            for (var i = 0, il = points.length; i < il; i += 2) {\n\t                this.addPoint(points[i], points[i + 1], relative);\n\t            }\n\t        }\n\t    }, {\n\t        key: 'setMatrix',\n\t        value: function setMatrix(matrix) {\n\t            this.matrix = matrix || [1, 0, 0, 1, 0, 0];\n\t        }\n\t    }, {\n\t        key: 'addMatrix',\n\t        value: function addMatrix(matrix) {\n\t            this.matrix = [this.matrix[0] * matrix[0] + this.matrix[2] * matrix[1], this.matrix[1] * matrix[0] + this.matrix[3] * matrix[1], this.matrix[0] * matrix[2] + this.matrix[2] * matrix[3], this.matrix[1] * matrix[2] + this.matrix[3] * matrix[3], this.matrix[0] * matrix[4] + this.matrix[2] * matrix[5] + this.matrix[4], this.matrix[1] * matrix[4] + this.matrix[3] * matrix[5] + this.matrix[5]];\n\t        }\n\t    }, {\n\t        key: 'translate',\n\t        value: function translate(x, y) {\n\t            y = y === undefined ? 0 : y;\n\t            this.addMatrix([1, 0, 0, 1, x, y]);\n\t        }\n\t    }, {\n\t        key: 'rotate',\n\t        value: function rotate(angle, x, y) {\n\t            angle = angle * DEG_TO_RAD;\n\t\n\t            if (arguments.length == 2) {\n\t                this.addMatrix([1, 0, 0, 1, x, y]);\n\t            }\n\t\n\t            this.addMatrix([Math.cos(angle), Math.sin(angle), -Math.sin(angle), Math.cos(angle), 0, 0]);\n\t\n\t            if (arguments.length == 2) {\n\t                this.addMatrix([1, 0, 0, 1, -x, -y]);\n\t            }\n\t        }\n\t    }, {\n\t        key: 'scale',\n\t        value: function scale(x, y) {\n\t            y = y === undefined ? x : y;\n\t            this.addMatrix([x, 0, 0, y, 0, 0]);\n\t        }\n\t    }, {\n\t        key: 'skewX',\n\t        value: function skewX(angle) {\n\t            this.addMatrix([1, 0, Math.tan(angle * DEG_TO_RAD), 1, 0, 0]);\n\t        }\n\t    }, {\n\t        key: 'skewY',\n\t        value: function skewY(angle) {\n\t            this.addMatrix([1, Math.tan(angle * DEG_TO_RAD), 0, 1, 0, 0]);\n\t        }\n\t    }, {\n\t        key: 'applyMatrix',\n\t        value: function applyMatrix(matrix) {\n\t            var _this2 = this;\n\t\n\t            matrix && this.addMatrix(matrix);\n\t\n\t            this.paths.forEach(function (path) {\n\t                path.transform(_this2.matrix);\n\t            });\n\t\n\t            this.shapes.forEach(function (shape) {\n\t                shape.outer.transform(_this2.matrix);\n\t                shape.holes.forEach(function (hole) {\n\t                    hole.transform(_this2.matrix);\n\t                });\n\t            });\n\t\n\t            this.setMatrix(null);\n\t\n\t            this.children.forEach(function (tag) {\n\t                tag.applyMatrix(matrix);\n\t            });\n\t        }\n\t    }, {\n\t        key: 'getPaths',\n\t        value: function getPaths() {\n\t            return this.paths;\n\t        }\n\t    }, {\n\t        key: 'getShapes',\n\t        value: function getShapes() {\n\t            // No shapes...\n\t            if (this.getAttr('fill', 'none') === 'none' || !this.paths[0].length) {\n\t                return this.shapes;\n\t            }\n\t\n\t            // Get fill rule\n\t            var fillRule = this.getAttr('fill-rule', 'nonzero');\n\t            fillRule = fillRule === 'nonzero' ? _clipperLib2.default.PolyFillType.pftNonZero : _clipperLib2.default.PolyFillType.pftEvenOdd;\n\t\n\t            // Create clipper path\n\t            var cPolyTree = new _clipperLib2.default.PolyTree();\n\t            var cClipper = new _clipperLib2.default.Clipper();\n\t            var clipperScale = 10000000;\n\t            var clipperPaths = [];\n\t\n\t            this.paths.forEach(function (path) {\n\t                clipperPaths.push(path.getClipperPoints(clipperScale));\n\t            });\n\t\n\t            cClipper.AddPaths(clipperPaths, _clipperLib2.default.PolyType.ptSubject, true);\n\t            cClipper.Execute(_clipperLib2.default.ClipType.ctUnion, cPolyTree, fillRule, fillRule);\n\t\n\t            var paths = _clipperLib2.default.Clipper.PolyTreeToPaths(cPolyTree);\n\t            var polygones = _clipperLib2.default.Clipper.SimplifyPolygons(paths, fillRule);\n\t\n\t            // Single path (no hole)\n\t            if (this.paths.length > 1) {\n\t                cClipper.Clear();\n\t                cClipper.StrictlySimple = true;\n\t                cPolyTree = new _clipperLib2.default.PolyTree();\n\t                cClipper.AddPaths(polygones, _clipperLib2.default.PolyType.ptSubject, true);\n\t                cClipper.Execute(_clipperLib2.default.ClipType.ctUnion, cPolyTree, fillRule, fillRule);\n\t            }\n\t\n\t            // PolyTree to ExPolygons\n\t            var toPath = function toPath(path) {\n\t                return new _path.Path().fromClipperPoints(path, 1 / clipperScale);\n\t            };\n\t            var exPolygons = _clipperLib2.default.JS.PolyTreeToExPolygons(cPolyTree);\n\t            this.shapes = exPolygons.map(function (exPolygon) {\n\t                return {\n\t                    outer: toPath(exPolygon.outer),\n\t                    holes: exPolygon.holes.map(toPath)\n\t                };\n\t            });\n\t\n\t            // Return shapes...\n\t            return this.shapes;\n\t        }\n\t    }]);\n\t\n\t    return Tag;\n\t}();\n\t\n\t// Exports\n\t\n\t\n\texports.Tag = Tag;\n\texports.default = Tag;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.TagParser = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _trace = __webpack_require__(5);\n\t\n\tvar _path2 = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// SVG tag parser\n\tvar TagParser = function () {\n\t    // Class constructor...\n\t    function TagParser(tag, parser) {\n\t        _classCallCheck(this, TagParser);\n\t\n\t        // Init properties\n\t        this.tag = tag;\n\t        this.parser = parser;\n\t        this.currentCommand = null;\n\t        this.lastCommand = null;\n\t        this.pathData = null;\n\t        this.traceSettings = parser.traceSettings;\n\t    }\n\t\n\t    _createClass(TagParser, [{\n\t        key: 'parse',\n\t        value: function parse() {\n\t            // Get internal parser from node name\n\t            var handler = this['_' + this.tag.name];\n\t\n\t            // Implemented tag handler?\n\t            if (!handler || typeof handler !== 'function') {\n\t                return this.parser._skipTag(this.tag, 'not yet implemented');\n\t            }\n\t\n\t            // Parse tag attributes\n\t            this._parseTagAttrs();\n\t\n\t            // Parse tag\n\t            return handler.call(this);\n\t        }\n\t\n\t        // Parse the tag attributes\n\t\n\t    }, {\n\t        key: '_parseTagAttrs',\n\t        value: function _parseTagAttrs() {\n\t            var _this = this;\n\t\n\t            // Get tag attributes\n\t            var attrs = this.tag.element.attributes;\n\t\n\t            if (!attrs) {\n\t                return null;\n\t            }\n\t\n\t            // For each attribute\n\t            var attr = void 0,\n\t                value = void 0,\n\t                style = void 0;\n\t\n\t            Object.keys(attrs).some(function (key) {\n\t                // Current attribute\n\t                attr = attrs[key];\n\t\n\t                // Normalize attribute value\n\t                value = _this._normalizeTagAttr(attr);\n\t\n\t                if (value === false) {\n\t                    return false; // continue\n\t                }\n\t\n\t                // Special case\n\t                if (attr.nodeName === 'style') {\n\t                    style = value;\n\t                } else {\n\t                    // Set new attribute name/value\n\t                    _this.tag.setAttr(attr.nodeName, value);\n\t                }\n\t            });\n\t\n\t            // If style attribute (override tag attributes)\n\t            // TODO get/parse global style and override this one...\n\t            style && style.split(';').some(function (attr) {\n\t                // Current style\n\t                attr = attr.split(':');\n\t                attr = { nodeName: attr[0], nodeValue: attr[1] };\n\t\n\t                // Normalize attribute value\n\t                value = _this._normalizeTagAttr(attr);\n\t\n\t                if (value === false) {\n\t                    return false; // continue\n\t                }\n\t\n\t                // Set new attribute name/value\n\t                _this.tag.setAttr(attr.nodeName, value);\n\t            });\n\t\n\t            // Set inherited color\n\t            var colorsAttrs = ['fill', 'stroke', 'color'];\n\t\n\t            colorsAttrs.forEach(function (attrName) {\n\t                if (_this.tag.getAttr(attrName) === 'inherit') {\n\t                    _this.tag.setAttr(attrName, _this.tag.parent.getAttr(attrName, 'none'));\n\t                }\n\t            });\n\t\n\t            // Parse viewBox attribute\n\t            this._parseViewBoxAttr();\n\t\n\t            // Parse transform attribute\n\t            this._parseTransformAttr();\n\t        }\n\t\n\t        // Normalize tag attribute\n\t\n\t    }, {\n\t        key: '_normalizeTagAttr',\n\t        value: function _normalizeTagAttr(attr) {\n\t            // Normalize whitespaces\n\t            var value = attr.nodeValue.replace(/(\\r?\\n|\\r)+/gm, ' ') // Remove all new line chars\n\t            .replace(/\\s+/gm, ' ') // Reduce multiple whitespaces\n\t            .trim(); // Remove trailing whitespaces\n\t\n\t            if (!value.length) {\n\t                return this.parser._skipTagAttr(this.tag, attr, 'empty');\n\t            }\n\t\n\t            // Filters\n\t            switch (attr.nodeName) {\n\t                // Normalize size unit -> to px\n\t                case 'x':\n\t                case 'y':\n\t                case 'x1':\n\t                case 'y1':\n\t                case 'x2':\n\t                case 'y2':\n\t                case 'r':\n\t                case 'rx':\n\t                case 'ry':\n\t                case 'cx':\n\t                case 'cy':\n\t                case 'width':\n\t                case 'height':\n\t                case 'fontSize':\n\t                case 'strokeWidth':\n\t                    value = this._normalizeTagAttrUnit(attr);\n\t                    break;\n\t\n\t                // Normalize points attribute\n\t                case 'points':\n\t                case 'viewBox':\n\t                    value = this._normalizeTagAttrPoints(attr);\n\t                    break;\n\t\n\t                // Range limit to [0 - 1]\n\t                case 'opacity':\n\t                case 'fillOpacity':\n\t                case 'strokeOpacity':\n\t                    value = this._normalizeTagAttrRange(attr, 0, 1);\n\t                    break;\n\t\n\t                case 'preserveAspectRatio':\n\t                    value = this._normalizeTagAttrPreserveAspectRatio(attr);\n\t                    break;\n\t            }\n\t\n\t            // Return normalized value\n\t            return value;\n\t        }\n\t\n\t        // Normalize attribute unit to px\n\t\n\t    }, {\n\t        key: '_normalizeTagAttrUnit',\n\t        value: function _normalizeTagAttrUnit(attr) {\n\t            var stringValue = attr.nodeValue.toLowerCase();\n\t            var floatValue = parseFloat(stringValue);\n\t\n\t            if (isNaN(floatValue)) {\n\t                return this.parser._skipTagAttr(this.tag, attr, 'only numeric value allowed');\n\t            }\n\t\n\t            if (stringValue.indexOf('mm') !== -1) {\n\t                return floatValue * 3.5433070869;\n\t            }\n\t\n\t            if (stringValue.indexOf('cm') !== -1) {\n\t                return floatValue * 35.433070869;\n\t            }\n\t\n\t            if (stringValue.indexOf('in') !== -1) {\n\t                return floatValue * 90.0;\n\t            }\n\t\n\t            if (stringValue.indexOf('pt') !== -1) {\n\t                return floatValue * 1.25;\n\t            }\n\t\n\t            if (stringValue.indexOf('pc') !== -1) {\n\t                return floatValue * 15.0;\n\t            }\n\t\n\t            return floatValue;\n\t        }\n\t\n\t        // Normalize points attribute\n\t\n\t    }, {\n\t        key: '_normalizeTagAttrPoints',\n\t        value: function _normalizeTagAttrPoints(attr) {\n\t            var points = this._parseNumbers(attr.nodeValue);\n\t\n\t            if (points === false) {\n\t                return this.parser._skipTagAttr(this.tag, attr, 'only numeric values are allowed');\n\t            }\n\t\n\t            if (!points.length) {\n\t                return this.parser._skipTagAttr(this.tag, attr, 'empty points list');\n\t            }\n\t\n\t            if (points.length % 0) {\n\t                return this.parser._skipTagAttr(this.tag, attr, 'the number of points must be even');\n\t            }\n\t\n\t            return points;\n\t        }\n\t\n\t        // Normalize range attribute like \"opacity\"\n\t\n\t    }, {\n\t        key: '_normalizeTagAttrRange',\n\t        value: function _normalizeTagAttrRange(attr, min, max) {\n\t            var stringValue = attr.nodeValue.trim();\n\t            var floatValue = parseFloat(stringValue);\n\t\n\t            if (isNaN(floatValue)) {\n\t                return this.parser._skipTagAttr(this.tag, attr, 'only numeric values are allowed');\n\t            }\n\t\n\t            if (floatValue < min || floatValue > max) {\n\t                return this.parser._skipTagAttr(this.tag, attr, 'out of range [' + min + ', ' + max + ']');\n\t            }\n\t\n\t            return floatValue;\n\t        }\n\t\n\t        // Parse points string as numbers array\n\t\n\t    }, {\n\t        key: '_parseNumbers',\n\t        value: function _parseNumbers(points) {\n\t            // http://stackoverflow.com/questions/638565/parsing-scientific-notation-sensibly\n\t            if (typeof points === 'string') {\n\t                points = points.split(/([+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?/g).filter(function (point) {\n\t                    return point && ['', ','].indexOf(point.trim()) === -1;\n\t                });\n\t            }\n\t\n\t            // Normalize to float values\n\t            points = points.map(parseFloat);\n\t\n\t            // Test if all numbers is valid\n\t            if (points.some(isNaN)) {\n\t                return false;\n\t            }\n\t\n\t            return points;\n\t        }\n\t\n\t        // Normalize the preserveAspectRatio attribute\n\t\n\t    }, {\n\t        key: '_normalizeTagAttrPreserveAspectRatio',\n\t        value: function _normalizeTagAttrPreserveAspectRatio(attr) {\n\t            var params = {\n\t                defer: false,\n\t                align: 'none',\n\t                meet: true,\n\t                slice: false\n\t            };\n\t\n\t            var rawParams = attr.nodeValue;\n\t\n\t            if (rawParams.indexOf('defer') === 0) {\n\t                rawParams = rawParams.substr(6);\n\t                params.defer = true;\n\t            }\n\t\n\t            rawParams = rawParams.split(' ');\n\t            params.align = rawParams[0];\n\t            params.meet = rawParams[1] || 'meet';\n\t            params.meet = params.meet === 'meet';\n\t            params.slice = !params.meet;\n\t\n\t            return params;\n\t        }\n\t\n\t        // Parse viewBox attribute and set transformations\n\t\n\t    }, {\n\t        key: '_parseViewBoxAttr',\n\t        value: function _parseViewBoxAttr() {\n\t            // Get viewBox attribute\n\t            var viewBox = this.tag.getAttr('viewBox', null);\n\t\n\t            // No viewBox...\n\t            if (viewBox === null) {\n\t                return null;\n\t            }\n\t\n\t            // Update size attributes\n\t            var width = this.tag.getAttr('width', viewBox[2]);\n\t            var height = this.tag.getAttr('height', viewBox[3]);\n\t\n\t            this.tag.setAttr('width', width);\n\t            this.tag.setAttr('height', height);\n\t\n\t            // Scale to match viewBox\n\t            // TODO clip path if preserveAspectRatio.slice\n\t            var scaleX = width / viewBox[2];\n\t            var scaleY = height / viewBox[3];\n\t            var translateX = viewBox[0];\n\t            var translateY = viewBox[1];\n\t\n\t            var preserveAspectRatio = this.tag.getAttr('preserveAspectRatio', 'meet xMidYMid');\n\t\n\t            if (preserveAspectRatio) {\n\t                var newWidth = void 0,\n\t                    newHeight = void 0;\n\t\n\t                if (preserveAspectRatio.meet) {\n\t                    if (scaleX > scaleY) {\n\t                        scaleX = scaleY;\n\t                        newWidth = viewBox[2] * scaleX;\n\t                    } else if (scaleX < scaleY) {\n\t                        scaleY = scaleX;\n\t                        newHeight = viewBox[3] * scaleY;\n\t                    }\n\t                } else if (preserveAspectRatio.slice) {\n\t                    if (scaleX < scaleY) {\n\t                        scaleX = scaleY;\n\t                        newWidth = viewBox[2] * scaleX;\n\t                    } else if (scaleX > scaleY) {\n\t                        scaleY = scaleX;\n\t                        newHeight = viewBox[3] * scaleY;\n\t                    }\n\t                }\n\t\n\t                if (newWidth !== undefined) {\n\t                    if (preserveAspectRatio.align === 'xMidYMid') {\n\t                        this.tag.translate((width - newWidth) / 2, 0);\n\t                    } else if (preserveAspectRatio.align === 'xMaxYMax') {\n\t                        this.tag.translate(width - newWidth, 0);\n\t                    }\n\t                } else if (newHeight !== undefined) {\n\t                    if (preserveAspectRatio.align === 'xMidYMid') {\n\t                        this.tag.translate(0, (height - newHeight) / 2);\n\t                    } else if (preserveAspectRatio.align === 'xMaxYMax') {\n\t                        this.tag.translate(0, height - newHeight);\n\t                    }\n\t                }\n\t            }\n\t\n\t            this.tag.scale(scaleX, scaleY);\n\t            this.tag.translate(-translateX, -translateY);\n\t        }\n\t\n\t        // Parse transform attribute and set transformations\n\t\n\t    }, {\n\t        key: '_parseTransformAttr',\n\t        value: function _parseTransformAttr() {\n\t            var _this2 = this;\n\t\n\t            // Get transform attribute\n\t            var transformAttr = this.tag.getAttr('transform', null);\n\t\n\t            // No transformation...\n\t            if (transformAttr === null || !transformAttr.length) {\n\t                return null;\n\t            }\n\t\n\t            // Parse attribute (split group on closing parenthesis)\n\t            var transformations = transformAttr.split(')');\n\t\n\t            // Remove last entry due to last \")\" found\n\t            transformations.pop();\n\t\n\t            // For each transformation\n\t            var transform = void 0,\n\t                type = void 0,\n\t                params = void 0;\n\t\n\t            transformations.some(function (raw) {\n\t                // Split name and value on opening parenthesis\n\t                transform = raw.split('(');\n\t\n\t                // Invalid parts number\n\t                if (transform.length !== 2) {\n\t                    return _this2.parser._skipTagAttr(_this2.tag, transformAttr, 'malformed'); // continue\n\t                }\n\t\n\t                type = transform[0].trim();\n\t\n\t                // Quik hack 1/2\n\t                var func = type;\n\t                if (func === 'matrix') {\n\t                    func = 'addMatrix';\n\t                }\n\t\n\t                // Get tag transform method\n\t                var tagTransform = _this2.tag[func];\n\t\n\t                if (typeof tagTransform !== 'function') {\n\t                    return _this2.parser._skipTagAttr(_this2.tag, transformAttr, 'unsupported transform type :' + type);\n\t                }\n\t\n\t                params = transform[1].trim();\n\t                params = _this2._parseNumbers(params);\n\t\n\t                // Skip empty value\n\t                if (!params.length) {\n\t                    return _this2.parser._skipTagAttr(_this2.tag, transformAttr, 'malformed transform type :' + type);\n\t                }\n\t\n\t                // Quik hack 2/2\n\t                if (func == 'addMatrix') {\n\t                    params = [params];\n\t                }\n\t\n\t                // Call tag transform method like \"tag.translate(param1, ..., paramN)\"\n\t                tagTransform.apply(_this2.tag, params);\n\t            });\n\t        }\n\t    }, {\n\t        key: '_newPath',\n\t        value: function _newPath() {\n\t            this.tag.newPath();\n\t        }\n\t    }, {\n\t        key: '_clearPath',\n\t        value: function _clearPath() {\n\t            this.tag.clearPath();\n\t        }\n\t    }, {\n\t        key: '_closePath',\n\t        value: function _closePath() {\n\t            return this.tag.closePath();\n\t        }\n\t    }, {\n\t        key: '_addPoints',\n\t        value: function _addPoints(points, relative) {\n\t            if (!points.length) {\n\t                return this.parser._skipTag(this.tag, 'empty points list');\n\t            }\n\t\n\t            if (points.length % 0) {\n\t                return this.parser._skipTag(this.tag, 'the number of points must be even');\n\t            }\n\t\n\t            relative = arguments.length < 2 && this.currentCommand.relative;\n\t\n\t            this.tag.addPoints(points, relative);\n\t            return true;\n\t        }\n\t\n\t        // SVG specs at https://www.w3.org/TR/SVG11/\n\t\n\t    }, {\n\t        key: '_svg',\n\t        value: function _svg() {\n\t            // Only parse the root SVG tag as main document\n\t            if (this.parser.document) {\n\t                // Handled tag\n\t                return true;\n\t            }\n\t\n\t            // Get the document size\n\t            var width = this.tag.getAttr('width');\n\t            var height = this.tag.getAttr('height');\n\t\n\t            // Invalid size\n\t            if (!width || width < 0 || !height || height < 0) {\n\t                throw new Error('Invalid document size: ' + width + ' / ' + height);\n\t            }\n\t\n\t            // Set document size\n\t            this.parser.document = {\n\t                width: width,\n\t                height: height\n\t            };\n\t\n\t            // Get document viewBox or set default to document size\n\t            var viewBox = this.tag.getAttr('viewBox', [0, 0, width, height]);\n\t\n\t            this.parser.document.viewBox = {\n\t                x: viewBox[0],\n\t                y: viewBox[1],\n\t                width: viewBox[2],\n\t                height: viewBox[3]\n\t            };\n\t\n\t            // Check inkscape version\n\t            if (this.parser.editor.name === 'inkscape') {\n\t                this.parser.editor.version = this.tag.getAttr('inkscape:version');\n\t            }\n\t\n\t            // Handled tag\n\t            return true;\n\t        }\n\t    }, {\n\t        key: '_title',\n\t        value: function _title() {\n\t            // Register the first encountered title tag as document title\n\t            if (this.parser.document && !this.parser.document.title) {\n\t                this.parser.document.title = this.tag.element.textContent;\n\t            }\n\t\n\t            // Skipped tag\n\t            return false;\n\t        }\n\t    }, {\n\t        key: '_desc',\n\t        value: function _desc() {\n\t            // Register the first encountered desc tag as document description\n\t            if (this.parser.document && !this.parser.document.description) {\n\t                this.parser.document.description = this.tag.element.textContent;\n\t            }\n\t\n\t            // Skipped tag\n\t            return false;\n\t        }\n\t    }, {\n\t        key: '_defs',\n\t        value: function _defs() {\n\t            var _this3 = this;\n\t\n\t            // Register all child element with an id attribute\n\t            this.tag.element.childNodes.forEach(function (childNode) {\n\t                childNode.id && (_this3.parser.defs[childNode.id] = childNode);\n\t            });\n\t\n\t            // Skipped tag\n\t            return false;\n\t        }\n\t    }, {\n\t        key: '_use',\n\t        value: function _use() {\n\t            // Get the target id\n\t            var target = this.tag.getAttr('xlink:href').replace(/^#/, '');\n\t\n\t            // Try to get the defined element\n\t            var element = this.parser.defs[target];\n\t\n\t            if (!element) {\n\t                return this.parser._skipTag(this.tag, 'undefined reference [' + target + ']');\n\t            }\n\t\n\t            // Parse the defined element and set new parent from <use> tag parent\n\t            var useTag = this.parser._parseElement(element, this.tag.parent);\n\t\n\t            if (!useTag) {\n\t                return this.parser._skipTag(this.tag, 'empty reference [' + target + ']');\n\t            }\n\t\n\t            // Set matrix from real parent (<use>)\n\t            useTag.setMatrix(this.tag.matrix);\n\t\n\t            // Replace the use tag with new one\n\t            this.tag.parent.addChild(useTag);\n\t\n\t            // Skipped tag\n\t            return false;\n\t        }\n\t    }, {\n\t        key: '_g',\n\t        value: function _g() {\n\t            // Set the tag layer name\n\t            this.tag.setLayerName();\n\t\n\t            // Handled tag\n\t            return true;\n\t        }\n\t    }, {\n\t        key: '_line',\n\t        value: function _line() {\n\t            // Handled tag\n\t            return this._path(['M', this.tag.getAttr('x1'), this.tag.getAttr('y1'), 'L', this.tag.getAttr('x2'), this.tag.getAttr('y2')]);\n\t        }\n\t    }, {\n\t        key: '_polyline',\n\t        value: function _polyline() {\n\t            var close = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\t\n\t            var points = this.tag.getAttr('points');\n\t            var path = ['M', points.shift(), points.shift(), 'L'];\n\t\n\t            path = path.concat(points);\n\t            close && path.push('Z');\n\t\n\t            // Handled tag\n\t            return this._path(path);\n\t        }\n\t    }, {\n\t        key: '_polygon',\n\t        value: function _polygon() {\n\t            // Handled like polyline but closed\n\t            return this._polyline(true);\n\t        }\n\t    }, {\n\t        key: '_rect',\n\t        value: function _rect() {\n\t            // Get rectangle attributes\n\t            var w = this.tag.getAttr('width');\n\t            var h = this.tag.getAttr('height');\n\t            var x = this.tag.getAttr('x', 0);\n\t            var y = this.tag.getAttr('y', 0);\n\t            var rx = this.tag.getAttr('rx', null);\n\t            var ry = this.tag.getAttr('ry', null);\n\t\n\t            // Simple rect\n\t            if (!rx && !ry) {\n\t                // Handled tag\n\t                return this._path(['M', x, y, 'h', w, 'v', h, 'h', -w, 'z']);\n\t            }\n\t\n\t            // If a properly specified value is provided for ‘rx’, but not for ‘ry’,\n\t            // then set both rx and ry to the value of ‘rx’ and vis-vera...\n\t            if (rx === null) rx = ry;\n\t            if (ry === null) ry = rx;\n\t\n\t            // A negative value is an error\n\t            if (rx === null || rx === null || rx < 0 || ry < 0) {\n\t                // Skip tag\n\t                return this.parser._skipTag(this.tag, 'negative value for \"rx/ry\" not allowed');\n\t            }\n\t\n\t            // If rx is greater than half of ‘width’, then set rx to half of ‘width’.\n\t            // If ry is greater than half of ‘height’, then set ry to half of ‘height’.\n\t            if (rx > w / 2) rx = w / 2;\n\t            if (ry > h / 2) ry = h / 2;\n\t\n\t            var dx = rx * 2;\n\t            var dy = ry * 2;\n\t\n\t            // Handled tag\n\t            return this._path(['M', x + rx, y, 'h', w - dx, 'c', rx, 0, rx, ry, rx, ry, 'v', h - dy, 'c', 0, ry, -rx, ry, -rx, ry, 'h', -w + dx, 'c', -rx, 0, -rx, -ry, -rx, -ry, 'v', -h + dy, 'c', 0, 0, 0, -ry, rx, -ry, 'z']);\n\t        }\n\t    }, {\n\t        key: '_circle',\n\t        value: function _circle() {\n\t            var r = this.tag.getAttr('r', 0);\n\t\n\t            if (r <= 0) {\n\t                // Skipped tag\n\t                return false;\n\t            }\n\t\n\t            var cx = this.tag.getAttr('cx', 0);\n\t            var cy = this.tag.getAttr('cy', 0);\n\t\n\t            // Handled tag\n\t            return this._path(['M', cx - r, cy, 'A', r, r, 0, 0, 0, cx, cy + r, 'A', r, r, 0, 0, 0, cx + r, cy, 'A', r, r, 0, 0, 0, cx, cy - r, 'A', r, r, 0, 0, 0, cx - r, cy, 'Z']);\n\t        }\n\t    }, {\n\t        key: '_ellipse',\n\t        value: function _ellipse() {\n\t            var rx = this.tag.getAttr('rx', 0);\n\t            var ry = this.tag.getAttr('ry', 0);\n\t\n\t            if (rx <= 0 || ry <= 0) {\n\t                // Skipped tag\n\t                return false;\n\t            }\n\t\n\t            var cx = this.tag.getAttr('cx', 0);\n\t            var cy = this.tag.getAttr('cy', 0);\n\t\n\t            // Handled tag\n\t            return this._path(['M', cx - rx, cy, 'A', rx, ry, 0, 0, 0, cx, cy + ry, 'A', rx, ry, 0, 0, 0, cx + rx, cy, 'A', rx, ry, 0, 0, 0, cx, cy - ry, 'A', rx, ry, 0, 0, 0, cx - rx, cy, 'Z']);\n\t        }\n\t    }, {\n\t        key: '_paths',\n\t        value: function _paths(type, num, points) {\n\t            if (points.length > num) {\n\t                var handler = void 0,\n\t                    result = true;\n\t\n\t                while (result && points.length) {\n\t                    handler = this['_path' + type];\n\t                    result = handler.call(this, points.splice(0, num));\n\t                }\n\t\n\t                return result;\n\t            }\n\t\n\t            return null;\n\t        }\n\t    }, {\n\t        key: '_path',\n\t        value: function _path(path) {\n\t            var _this4 = this;\n\t\n\t            // Provided path\n\t            if (path && typeof path !== 'string') {\n\t                path = path.join(' ');\n\t            }\n\t\n\t            // Get the paths data attribute value\n\t            var dAttr = path || this.tag.getAttr('d', null);\n\t\n\t            if (!dAttr) {\n\t                // Skipped tag\n\t                return false;\n\t            }\n\t\n\t            // Split on each commands\n\t            var commands = dAttr.match(/([M|Z|L|H|V|C|S|Q|T|A]+([^M|Z|L|H|V|C|S|Q|T|A]+)?)/gi);\n\t\n\t            if (!commands) {\n\t                return this.parser._skipTag(this.tag, 'malformed \"d\" attribute');\n\t            }\n\t\n\t            // For each command...\n\t            this.currentCommand = {\n\t                raw: null,\n\t                type: null,\n\t                params: null,\n\t                relative: null\n\t            };\n\t            this.lastCommand = this.currentCommand;\n\t            this.pathData = {};\n\t\n\t            var handler = null;\n\t            var parseError = false;\n\t\n\t            commands.some(function (raw) {\n\t                // Remove trailing whitespaces\n\t                raw = raw.trim();\n\t\n\t                // Extract command char and params\n\t                _this4.currentCommand.raw = raw;\n\t                _this4.currentCommand.type = raw[0].toUpperCase();\n\t                _this4.currentCommand.params = raw.substr(1).trim();\n\t                _this4.currentCommand.relative = _this4.currentCommand.type !== raw[0];\n\t\n\t                // Get path handler from command char\n\t                handler = _this4['_path' + _this4.currentCommand.type];\n\t\n\t                if (!handler || typeof handler !== 'function') {\n\t                    _this4.parser._skipTag(_this4.tag, 'unsupported path command [' + raw[0] + ']');\n\t                    return parseError = true; // break\n\t                }\n\t\n\t                // Extract all numbers from arguments string\n\t                _this4.currentCommand.params = _this4._parseNumbers(_this4.currentCommand.params);\n\t\n\t                if (_this4.currentCommand.params === false) {\n\t                    _this4.parser._skipTag(_this4.tag, 'only numeric values are allowed in [' + _this4.currentCommand.raw + ']');\n\t                    return parseError = true; // break\n\t                }\n\t\n\t                // Execute command parser\n\t                if (!handler.call(_this4, _this4.currentCommand.params)) {\n\t                    return parseError = true; // break\n\t                }\n\t\n\t                // Update last command\n\t                _this4.lastCommand = {};\n\t\n\t                Object.keys(_this4.currentCommand).forEach(function (key) {\n\t                    _this4.lastCommand[key] = _this4.currentCommand[key];\n\t                });\n\t            });\n\t\n\t            // Skip tag\n\t            if (parseError) {\n\t                this._clearPath();\n\t                return false;\n\t            }\n\t\n\t            // Handled tag\n\t            return true;\n\t        }\n\t    }, {\n\t        key: '_pathM',\n\t        value: function _pathM(points) {\n\t            // New path\n\t            this._newPath();\n\t\n\t            // Set the current point (start of new path)\n\t            // If is followed by multiple pairs of coordinates,\n\t            // the subsequent pairs are treated as implicit lineto commands.\n\t            return this._addPoints(points);\n\t        }\n\t    }, {\n\t        key: '_pathZ',\n\t        value: function _pathZ() {\n\t            this._closePath();\n\t            return true;\n\t        }\n\t    }, {\n\t        key: '_pathL',\n\t        value: function _pathL(points) {\n\t            return this._addPoints(points);\n\t        }\n\t    }, {\n\t        key: '_pathH',\n\t        value: function _pathH(points) {\n\t            var _this5 = this;\n\t\n\t            return points.every(function (x) {\n\t                return _this5._addPoints([x, _this5.currentCommand.relative ? 0 : _this5.tag.point.y]);\n\t            });\n\t        }\n\t    }, {\n\t        key: '_pathV',\n\t        value: function _pathV(points) {\n\t            var _this6 = this;\n\t\n\t            return points.every(function (y) {\n\t                return _this6._addPoints([_this6.currentCommand.relative ? 0 : _this6.tag.point.x, y]);\n\t            });\n\t        }\n\t    }, {\n\t        key: '_pathC',\n\t        value: function _pathC(points) {\n\t            // Multiple paths\n\t            var result = this._paths('C', 6, points);\n\t\n\t            if (result !== null) {\n\t                return result;\n\t            }\n\t\n\t            // Single path\n\t            var p1 = this.tag.point;\n\t            var rl = this.currentCommand.relative;\n\t\n\t            var x1 = points[0] + (rl ? p1.x : 0);\n\t            var y1 = points[1] + (rl ? p1.y : 0);\n\t            var x2 = points[2] + (rl ? p1.x : 0);\n\t            var y2 = points[3] + (rl ? p1.y : 0);\n\t            var x = points[4] + (rl ? p1.x : 0);\n\t            var y = points[5] + (rl ? p1.y : 0);\n\t\n\t            this.pathData.x2 = x2;\n\t            this.pathData.y2 = y2;\n\t\n\t            var p2 = new _path2.Point(x1, y1);\n\t            var p3 = new _path2.Point(x2, y2);\n\t            var p4 = new _path2.Point(x, y);\n\t\n\t            //console.log('C', p1, p2, p3, p4)\n\t\n\t            // p1  : starting point\n\t            // p2  : control point\n\t            // p3  : control point\n\t            // p4  : end point\n\t            var tracer = new _trace.CubicBezier(this.traceSettings);\n\t            var coords = tracer.trace({ p1: p1, p2: p2, p3: p3, p4: p4 }); // => [x,y, x,y, ...]\n\t            // let tracer = trace(CubicBezier, this.traceSettings)\n\t            // let coords = tracer({ p1, p2, p3, p4 })\n\t\n\t            // Trace the line\n\t            return this._addPoints(coords, false);\n\t        }\n\t    }, {\n\t        key: '_pathS',\n\t        value: function _pathS(points) {\n\t            // Multiple paths\n\t            var result = this._paths('S', 4, points);\n\t\n\t            if (result !== null) {\n\t                return result;\n\t            }\n\t\n\t            // Single path\n\t            var p1 = this.tag.point;\n\t            var rl = this.currentCommand.relative;\n\t\n\t            var x1 = p1.x;\n\t            var y1 = p1.y;\n\t\n\t            if (this.lastCommand.type === 'S' || this.lastCommand.type === 'C') {\n\t                x1 -= this.pathData.x2 - x1;\n\t                y1 -= this.pathData.y2 - y1;\n\t            }\n\t\n\t            var x2 = points[0] + (rl ? p1.x : 0);\n\t            var y2 = points[1] + (rl ? p1.y : 0);\n\t            var x = points[2] + (rl ? p1.x : 0);\n\t            var y = points[3] + (rl ? p1.y : 0);\n\t\n\t            this.pathData.x2 = x2;\n\t            this.pathData.y2 = y2;\n\t\n\t            var p2 = new _path2.Point(x1, y1);\n\t            var p3 = new _path2.Point(x2, y2);\n\t            var p4 = new _path2.Point(x, y);\n\t\n\t            //console.log('S', p1, p2, p3, p4)\n\t\n\t            // p1  : starting point\n\t            // p2  : control point\n\t            // p3  : control point\n\t            // p4  : end point\n\t            var tracer = new _trace.CubicBezier(this.traceSettings);\n\t            var coords = tracer.trace({ p1: p1, p2: p2, p3: p3, p4: p4 }); // => [x,y, x,y, ...]\n\t            // let tracer = trace(CubicBezier, this.traceSettings)\n\t            // let coords = tracer({ p1, p2, p3, p4 })\n\t\n\t            // Trace the line\n\t            return this._addPoints(coords, false);\n\t        }\n\t    }, {\n\t        key: '_pathQ',\n\t        value: function _pathQ(points) {\n\t            // Multiple paths\n\t            var result = this._paths('Q', 4, points);\n\t\n\t            if (result !== null) {\n\t                return result;\n\t            }\n\t\n\t            // Single path\n\t            var p1 = this.tag.point;\n\t            var rl = this.currentCommand.relative;\n\t\n\t            var x1 = points[0] + (rl ? p1.x : 0);\n\t            var y1 = points[1] + (rl ? p1.y : 0);\n\t            var x = points[2] + (rl ? p1.x : 0);\n\t            var y = points[3] + (rl ? p1.y : 0);\n\t\n\t            this.pathData.x1 = x1;\n\t            this.pathData.y1 = y1;\n\t\n\t            var p2 = new _path2.Point(x1, y1);\n\t            var p3 = new _path2.Point(x, y);\n\t\n\t            //console.log('Q', p1, p2, p3)\n\t\n\t            // p1  : starting point\n\t            // p2  : control point\n\t            // p3  : end point\n\t            var tracer = new _trace.QuadricBezier(this.traceSettings);\n\t            var coords = tracer.trace({ p1: p1, p2: p2, p3: p3 }); // => [x,y, x,y, ...]\n\t\n\t            // Trace the line\n\t            return this._addPoints(coords, false);\n\t        }\n\t    }, {\n\t        key: '_pathT',\n\t        value: function _pathT(points) {\n\t            // Multiple paths\n\t            var result = this._paths('T', 2, points);\n\t\n\t            if (result !== null) {\n\t                return result;\n\t            }\n\t\n\t            // Single path\n\t            var p1 = this.tag.point;\n\t            var rl = this.currentCommand.relative;\n\t\n\t            var x1 = p1.x;\n\t            var y1 = p1.y;\n\t\n\t            if (this.lastCommand.type === 'Q' || this.lastCommand.type === 'T') {\n\t                x1 -= this.pathData.x1 - x1;\n\t                y1 -= this.pathData.y1 - y1;\n\t            }\n\t\n\t            var x = points[0] + (rl ? p1.x : 0);\n\t            var y = points[1] + (rl ? p1.y : 0);\n\t\n\t            this.pathData.x1 = x1;\n\t            this.pathData.y1 = y1;\n\t\n\t            var p2 = new _path2.Point(x1, y1);\n\t            var p3 = new _path2.Point(x, y);\n\t\n\t            //console.log('T', p1, p2, p3)\n\t\n\t            // p1  : starting point\n\t            // p2  : control point\n\t            // p3  : end point\n\t            var tracer = new _trace.QuadricBezier(this.traceSettings);\n\t            var coords = tracer.trace({ p1: p1, p2: p2, p3: p3 }); // => [x,y, x,y, ...]\n\t\n\t            // Trace the line\n\t            return this._addPoints(coords, false);\n\t        }\n\t    }, {\n\t        key: '_pathA',\n\t        value: function _pathA(points) {\n\t            // Multiple paths\n\t            var result = this._paths('A', 7, points);\n\t\n\t            if (result !== null) {\n\t                return result;\n\t            }\n\t\n\t            // Single path\n\t            var rl = this.currentCommand.relative;\n\t            var p1 = this.tag.point;\n\t            var rx = points[0];\n\t            var ry = points[1];\n\t            var angle = points[2];\n\t            var large = !!points[3];\n\t            var sweep = !!points[4];\n\t            var x = points[5] + (rl ? p1.x : 0);\n\t            var y = points[6] + (rl ? p1.y : 0);\n\t            var p2 = new _path2.Point(x, y);\n\t\n\t            //console.log('A', p1, rx, ry, angle, large, sweep, p2)\n\t\n\t            var tracer = new _trace.Arc(this.traceSettings);\n\t            var coords = tracer.trace({ p1: p1, rx: rx, ry: ry, angle: angle, large: large, sweep: sweep, p2: p2 }); // => [x,y, x,y, ...]\n\t\n\t            // Trace the line\n\t            return this._addPoints(coords, false);\n\t        }\n\t    }]);\n\t\n\t    return TagParser;\n\t}();\n\t\n\t// Exports\n\t\n\t\n\texports.TagParser = TagParser;\n\texports.default = TagParser;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.QuadricBezier = exports.CubicBezier = exports.Arc = undefined;\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Base code from : https://github.com/MadLittleMods/svg-curve-lib/blob/master/src/js/svg-curve-lib.js\n\t\n\t\n\tvar _path = __webpack_require__(1);\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar MATH_PI_2 = Math.PI * 2;\n\tvar DEG_TO_RAD = Math.PI / 180;\n\t\n\tfunction mod(x, m) {\n\t    return (x % m + m) % m;\n\t}\n\t\n\tfunction clamp(val, min, max) {\n\t    return Math.min(Math.max(val, min), max);\n\t}\n\t\n\tfunction distance(p0, p1) {\n\t    return Math.sqrt(Math.pow(p1.x - p0.x, 2) + Math.pow(p1.y - p0.y, 2));\n\t}\n\t\n\tfunction angle(v0, v1) {\n\t    var p = v0.x * v1.x + v0.y * v1.y;\n\t    var n = Math.sqrt((Math.pow(v0.x, 2) + Math.pow(v0.y, 2)) * (Math.pow(v1.x, 2) + Math.pow(v1.y, 2)));\n\t    return (v0.x * v1.y - v0.y * v1.x < 0 ? -1 : 1) * Math.acos(p / n);\n\t}\n\t\n\t// Abstract class\n\t\n\tvar TraceBase = function () {\n\t    function TraceBase(settings) {\n\t        _classCallCheck(this, TraceBase);\n\t\n\t        // Set defaults properties\n\t        this.path = []; // Points collection [x,y, x,y, ...]\n\t        this.linear = true; // Linear trace mode\n\t        this.step = 0.01; // Step resolution if linear mode = false\n\t        this.resolution = 500; // Number of segments we use to approximate arc length\n\t        this.segmentLength = 0.1; // Segment length\n\t\n\t        // Update properties from user settings\n\t        Object.assign(this, settings || {});\n\t\n\t        // Arc length properties\n\t        this.arcLength = null;\n\t        this.arcLengthMap = null;\n\t    }\n\t\n\t    _createClass(TraceBase, [{\n\t        key: '_clearPath',\n\t        value: function _clearPath() {\n\t            this.path = [];\n\t        }\n\t    }, {\n\t        key: 'getPath',\n\t        value: function getPath() {\n\t            return this.path;\n\t        }\n\t    }, {\n\t        key: 'getPointAtT',\n\t        value: function getPointAtT(t) {\n\t            return new _path.Point(0, 0);\n\t        }\n\t    }, {\n\t        key: '_addPoint',\n\t        value: function _addPoint(point) {\n\t            this.path.push(point.x, point.y);\n\t        }\n\t    }, {\n\t        key: '_postTrace',\n\t        value: function _postTrace() {\n\t            // Do additional tasks\n\t        }\n\t    }, {\n\t        key: '_approximateLength',\n\t        value: function _approximateLength() {\n\t            var arcLength = 0;\n\t            var arcLengthMap = [];\n\t            var prevPoint = this.getPointAtT(0);\n\t\n\t            var i = void 0,\n\t                t = void 0,\n\t                nextPoint = void 0;\n\t\n\t            for (i = 0; i < this.resolution; i++) {\n\t                t = clamp(i * (1 / this.resolution), 0, 1);\n\t                nextPoint = this.getPointAtT(t);\n\t                arcLength += distance(prevPoint, nextPoint);\n\t\n\t                arcLengthMap.push({ t: t, arcLength: arcLength });\n\t\n\t                prevPoint = nextPoint;\n\t            }\n\t\n\t            // Last stretch to the endpoint\n\t            nextPoint = this.getPointAtT(1);\n\t            arcLength += distance(prevPoint, nextPoint);\n\t\n\t            arcLengthMap.push({ t: 1, arcLength: arcLength });\n\t            Object.assign(this, { arcLength: arcLength, arcLengthMap: arcLengthMap });\n\t        }\n\t    }, {\n\t        key: 'getPointAtU',\n\t        value: function getPointAtU(u) {\n\t            u = clamp(u, 0, 1);\n\t\n\t            var targetDistanceFromStartingPoint = u * this.arcLength;\n\t\n\t            var resultantT = 0;\n\t            var prevArcLength = 0;\n\t            var prevT = 0;\n\t\n\t            this.arcLengthMap.every(function (entry) {\n\t                var t = entry.t;\n\t                var arcLength = entry.arcLength;\n\t\n\t                // Once we go a past our target\n\t                // Lets interpolate from a previous to current\n\t                if (arcLength >= targetDistanceFromStartingPoint) {\n\t                    var endDiff = arcLength - targetDistanceFromStartingPoint;\n\t                    var startDiff = targetDistanceFromStartingPoint - prevArcLength;\n\t                    var linearFactor = startDiff / (endDiff + startDiff) || 0;\n\t\n\t                    resultantT = prevT + (t - prevT) * linearFactor;\n\t\n\t                    // Break\n\t                    return false;\n\t                }\n\t\n\t                prevArcLength = arcLength;\n\t                prevT = t;\n\t\n\t                return true;\n\t            });\n\t\n\t            return this.getPointAtT(resultantT);\n\t        }\n\t    }, {\n\t        key: 'trace',\n\t        value: function trace(settings) {\n\t            // Update properties from user settings\n\t            Object.assign(this, settings || {});\n\t\n\t            // Default getPoint settings\n\t            var getPoint = 'getPointAtT';\n\t            var step = this.step;\n\t\n\t            // Linear mode ?\n\t            if (this.linear) {\n\t                this._approximateLength();\n\t\n\t                var segments = Math.round(this.arcLength / this.segmentLength);\n\t\n\t                getPoint = 'getPointAtU';\n\t                step = 1 / segments;\n\t            }\n\t\n\t            // Clear points list\n\t            this._clearPath();\n\t\n\t            // Trace the path\n\t            for (var t = 0; t <= 1; t += step) {\n\t                this._addPoint(this[getPoint](t));\n\t            }\n\t\n\t            // Do additional tasks\n\t            this._postTrace();\n\t\n\t            // Return the path\n\t            return this.getPath();\n\t        }\n\t    }]);\n\t\n\t    return TraceBase;\n\t}();\n\t\n\t// Rewrite from https://github.com/MadLittleMods/svg-curve-lib/blob/master/src/js/svg-curve-lib.js#L84\n\t\n\t\n\tvar Arc = function (_TraceBase) {\n\t    _inherits(Arc, _TraceBase);\n\t\n\t    function Arc() {\n\t        _classCallCheck(this, Arc);\n\t\n\t        return _possibleConstructorReturn(this, (Arc.__proto__ || Object.getPrototypeOf(Arc)).apply(this, arguments));\n\t    }\n\t\n\t    _createClass(Arc, [{\n\t        key: 'init',\n\t        value: function init(settings) {\n\t            // Update properties from user settings\n\t            Object.assign(this, settings || {});\n\t\n\t            // Get angle in radians\n\t            this.radians = mod(this.angle, 360) * DEG_TO_RAD;\n\t\n\t            // If the endpoints are identical, then this is equivalent\n\t            // to omitting the elliptical arc segment entirely.\n\t            if (this.p1.x === this.p2.x && this.p1.y === this.p2.y) {\n\t                return this.path;\n\t            }\n\t\n\t            this.rx = Math.abs(this.rx);\n\t            this.ry = Math.abs(this.ry);\n\t\n\t            // If rx = 0 or ry = 0 then this arc is treated as\n\t            // a straight line segment joining the endpoints.\n\t            if (this.rx === 0 || this.ry === 0) {\n\t                this.__addPoint(this.p1);\n\t                this.__addPoint(this.p2);\n\t                return this.path;\n\t            }\n\t\n\t            // Following \"Conversion from endpoint to center parameterization\"\n\t            // http://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter\n\t\n\t            // Step #1: Compute transformedPoint\n\t            var dx = (this.p1.x - this.p2.x) / 2;\n\t            var dy = (this.p1.y - this.p2.y) / 2;\n\t\n\t            var transformedPoint = {\n\t                x: Math.cos(this.radians) * dx + Math.sin(this.radians) * dy,\n\t                y: -Math.sin(this.radians) * dx + Math.cos(this.radians) * dy\n\t            };\n\t\n\t            // Ensure radii are large enough\n\t            var radiiCheck = Math.pow(transformedPoint.x, 2) / Math.pow(this.rx, 2) + Math.pow(transformedPoint.y, 2) / Math.pow(this.ry, 2);\n\t\n\t            if (radiiCheck > 1) {\n\t                this.rx = Math.sqrt(radiiCheck) * this.rx;\n\t                this.ry = Math.sqrt(radiiCheck) * this.ry;\n\t            }\n\t\n\t            // Step #2: Compute transformedCenter\n\t            var cSquareNumerator = Math.pow(this.rx, 2) * Math.pow(this.ry, 2) - Math.pow(this.rx, 2) * Math.pow(transformedPoint.y, 2) - Math.pow(this.ry, 2) * Math.pow(transformedPoint.x, 2);\n\t            var cSquareRootDenom = Math.pow(this.rx, 2) * Math.pow(transformedPoint.y, 2) + Math.pow(this.ry, 2) * Math.pow(transformedPoint.x, 2);\n\t            var cRadicand = cSquareNumerator / cSquareRootDenom;\n\t\n\t            // Make sure this never drops below zero because of precision\n\t            cRadicand = cRadicand < 0 ? 0 : cRadicand;\n\t            var cCoef = (this.large !== this.sweep ? 1 : -1) * Math.sqrt(cRadicand);\n\t            var transformedCenter = {\n\t                x: cCoef * (this.rx * transformedPoint.y / this.ry),\n\t                y: cCoef * (-(this.ry * transformedPoint.x) / this.rx)\n\t            };\n\t\n\t            // Step #3: Compute center\n\t            this.center = {\n\t                x: Math.cos(this.radians) * transformedCenter.x - Math.sin(this.radians) * transformedCenter.y + (this.p1.x + this.p2.x) / 2,\n\t                y: Math.sin(this.radians) * transformedCenter.x + Math.cos(this.radians) * transformedCenter.y + (this.p1.y + this.p2.y) / 2\n\t            };\n\t\n\t            // Step #4: Compute start/sweep angles\n\t            // Start angle of the elliptical arc prior to the stretch and rotate operations.\n\t            // Difference between the start and end angles\n\t            var startVector = {\n\t                x: (transformedPoint.x - transformedCenter.x) / this.rx,\n\t                y: (transformedPoint.y - transformedCenter.y) / this.ry\n\t            };\n\t\n\t            var endVector = {\n\t                x: (-transformedPoint.x - transformedCenter.x) / this.rx,\n\t                y: (-transformedPoint.y - transformedCenter.y) / this.ry\n\t            };\n\t\n\t            this.startAngle = angle({ x: 1, y: 0 }, startVector);\n\t            this.sweepAngle = angle(startVector, endVector);\n\t\n\t            if (!this.sweep && this.sweepAngle > 0) {\n\t                this.sweepAngle -= MATH_PI_2;\n\t            } else if (this.sweep && this.sweepAngle < 0) {\n\t                this.sweepAngle += MATH_PI_2;\n\t            }\n\t\n\t            // We use % instead of `mod(..)` because we want it to be -360deg to 360deg(but actually in radians)\n\t            this.sweepAngle %= MATH_PI_2;\n\t        }\n\t    }, {\n\t        key: 'trace',\n\t        value: function trace(settings) {\n\t            this.init(settings);\n\t            return _get(Arc.prototype.__proto__ || Object.getPrototypeOf(Arc.prototype), 'trace', this).call(this);\n\t        }\n\t    }, {\n\t        key: 'getPointAtT',\n\t        value: function getPointAtT(t) {\n\t            var angle = this.startAngle + this.sweepAngle * t;\n\t\n\t            var x = this.rx * Math.cos(angle);\n\t            var y = this.ry * Math.sin(angle);\n\t\n\t            return new _path.Point(Math.cos(this.radians) * x - Math.sin(this.radians) * y + this.center.x, Math.sin(this.radians) * x + Math.cos(this.radians) * y + this.center.y);\n\t        }\n\t    }, {\n\t        key: '_postTrace',\n\t        value: function _postTrace() {\n\t            // Add last point in the path\n\t            this._addPoint(this.p2);\n\t        }\n\t    }]);\n\t\n\t    return Arc;\n\t}(TraceBase);\n\t\n\tvar CubicBezier = function (_TraceBase2) {\n\t    _inherits(CubicBezier, _TraceBase2);\n\t\n\t    function CubicBezier() {\n\t        _classCallCheck(this, CubicBezier);\n\t\n\t        return _possibleConstructorReturn(this, (CubicBezier.__proto__ || Object.getPrototypeOf(CubicBezier)).apply(this, arguments));\n\t    }\n\t\n\t    _createClass(CubicBezier, [{\n\t        key: '_B1',\n\t        value: function _B1(t) {\n\t            return t * t * t;\n\t        }\n\t    }, {\n\t        key: '_B2',\n\t        value: function _B2(t) {\n\t            return 3 * t * t * (1 - t);\n\t        }\n\t    }, {\n\t        key: '_B3',\n\t        value: function _B3(t) {\n\t            return 3 * t * (1 - t) * (1 - t);\n\t        }\n\t    }, {\n\t        key: '_B4',\n\t        value: function _B4(t) {\n\t            return (1 - t) * (1 - t) * (1 - t);\n\t        }\n\t    }, {\n\t        key: '_C1',\n\t        value: function _C1(p1, p2, p3, p4, t) {\n\t            return p1 * this._B1(t) + p2 * this._B2(t) + p3 * this._B3(t) + p4 * this._B4(t);\n\t        }\n\t    }, {\n\t        key: 'getPointAtT',\n\t        value: function getPointAtT(t) {\n\t            return new _path.Point(this._C1(this.p1.x, this.p2.x, this.p3.x, this.p4.x, t), this._C1(this.p1.y, this.p2.y, this.p3.y, this.p4.y, t));\n\t        }\n\t    }, {\n\t        key: '_addPoint',\n\t        value: function _addPoint(point) {\n\t            this.path.unshift(point.x, point.y);\n\t        }\n\t    }]);\n\t\n\t    return CubicBezier;\n\t}(TraceBase);\n\t\n\tvar QuadricBezier = function (_TraceBase3) {\n\t    _inherits(QuadricBezier, _TraceBase3);\n\t\n\t    function QuadricBezier() {\n\t        _classCallCheck(this, QuadricBezier);\n\t\n\t        return _possibleConstructorReturn(this, (QuadricBezier.__proto__ || Object.getPrototypeOf(QuadricBezier)).apply(this, arguments));\n\t    }\n\t\n\t    _createClass(QuadricBezier, [{\n\t        key: '_B1',\n\t        value: function _B1(t) {\n\t            return t * t;\n\t        }\n\t    }, {\n\t        key: '_B2',\n\t        value: function _B2(t) {\n\t            return 2 * t * (1 - t);\n\t        }\n\t    }, {\n\t        key: '_B3',\n\t        value: function _B3(t) {\n\t            return (1 - t) * (1 - t);\n\t        }\n\t    }, {\n\t        key: '_C1',\n\t        value: function _C1(p1, p2, p3, t) {\n\t            return p1 * this._B1(t) + p2 * this._B2(t) + p3 * this._B3(t);\n\t        }\n\t    }, {\n\t        key: 'getPointAtT',\n\t        value: function getPointAtT(t) {\n\t            return new _path.Point(this._C1(this.p1.x, this.p2.x, this.p3.x, t), this._C1(this.p1.y, this.p2.y, this.p3.y, t));\n\t        }\n\t    }, {\n\t        key: '_addPoint',\n\t        value: function _addPoint(point) {\n\t            this.path.unshift(point.x, point.y);\n\t        }\n\t    }]);\n\t\n\t    return QuadricBezier;\n\t}(TraceBase);\n\t\n\t// Exports\n\t\n\t\n\texports.Arc = Arc;\n\texports.CubicBezier = CubicBezier;\n\texports.QuadricBezier = QuadricBezier;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;// rev 482\n\t/********************************************************************************\n\t *                                                                              *\n\t * Author    :  Angus Johnson                                                   *\n\t * Version   :  6.2.1                                                          *\n\t * Date      :  31 October 2014                                                 *\n\t * Website   :  http://www.angusj.com                                           *\n\t * Copyright :  Angus Johnson 2010-2014                                         *\n\t *                                                                              *\n\t * License:                                                                     *\n\t * Use, modification & distribution is subject to Boost Software License Ver 1. *\n\t * http://www.boost.org/LICENSE_1_0.txt                                         *\n\t *                                                                              *\n\t * Attributions:                                                                *\n\t * The code in this library is an extension of Bala Vatti's clipping algorithm: *\n\t * \"A generic solution to polygon clipping\"                                     *\n\t * Communications of the ACM, Vol 35, Issue 7 (July 1992) pp 56-63.             *\n\t * http://portal.acm.org/citation.cfm?id=129906                                 *\n\t *                                                                              *\n\t * Computer graphics and geometric modeling: implementation and algorithms      *\n\t * By Max K. Agoston                                                            *\n\t * Springer; 1 edition (January 4, 2005)                                        *\n\t * http://books.google.com/books?q=vatti+clipping+agoston                       *\n\t *                                                                              *\n\t * See also:                                                                    *\n\t * \"Polygon Offsetting by Computing Winding Numbers\"                            *\n\t * Paper no. DETC2005-85513 pp. 565-575                                         *\n\t * ASME 2005 International Design Engineering Technical Conferences             *\n\t * and Computers and Information in Engineering Conference (IDETC/CIE2005)      *\n\t * September 24-28, 2005 , Long Beach, California, USA                          *\n\t * http://www.me.berkeley.edu/~mcmains/pubs/DAC05OffsetPolygon.pdf              *\n\t *                                                                              *\n\t *******************************************************************************/\n\t/*******************************************************************************\n\t *                                                                              *\n\t * Author    :  Timo                                                            *\n\t * Version   :  6.2.1.0                                                         *\n\t * Date      :  17 June 2016                                                 *\n\t *                                                                              *\n\t * This is a translation of the C# Clipper library to Javascript.               *\n\t * Int128 struct of C# is implemented using JSBN of Tom Wu.                     *\n\t * Because Javascript lacks support for 64-bit integers, the space              *\n\t * is a little more restricted than in C# version.                              *\n\t *                                                                              *\n\t * C# version has support for coordinate space:                                 *\n\t * +-4611686018427387903 ( sqrt(2^127 -1)/2 )                                   *\n\t * while Javascript version has support for space:                              *\n\t * +-4503599627370495 ( sqrt(2^106 -1)/2 )                                      *\n\t *                                                                              *\n\t * Tom Wu's JSBN proved to be the fastest big integer library:                  *\n\t * http://jsperf.com/big-integer-library-test                                   *\n\t *                                                                              *\n\t * This class can be made simpler when (if ever) 64-bit integer support comes.  *\n\t *                                                                              *\n\t *******************************************************************************/\n\t/*******************************************************************************\n\t *                                                                              *\n\t * Basic JavaScript BN library - subset useful for RSA encryption.              *\n\t * http://www-cs-students.stanford.edu/~tjw/jsbn/                               *\n\t * Copyright (c) 2005  Tom Wu                                                   *\n\t * All Rights Reserved.                                                         *\n\t * See \"LICENSE\" for details:                                                   *\n\t * http://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE                        *\n\t *                                                                              *\n\t *******************************************************************************/\n\t(function ()\n\t{\n\t  \"use strict\";\n\t  //use_int32: When enabled 32bit ints are used instead of 64bit ints. This\n\t  //improve performance but coordinate values are limited to the range +/- 46340\n\t  var use_int32 = false;\n\t  //use_xyz: adds a Z member to IntPoint. Adds a minor cost to performance.\n\t  var use_xyz = false;\n\t  //UseLines: Enables open path clipping. Adds a very minor cost to performance.\n\t  var use_lines = true;\n\t\n\t  var ClipperLib = {};\n\t  var isNode = false;\n\t  if (typeof module !== 'undefined' && module.exports)\n\t  {\n\t    module.exports = ClipperLib;\n\t    isNode = true;\n\t  }\n\t  else\n\t  {\n\t    if (true) {\n\t      !(__WEBPACK_AMD_DEFINE_FACTORY__ = (ClipperLib), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    }\n\t    if (typeof (document) !== \"undefined\") window.ClipperLib = ClipperLib;\n\t    else self['ClipperLib'] = ClipperLib;\n\t  }\n\t  var navigator_appName;\n\t  if (!isNode)\n\t  {\n\t    var nav = navigator.userAgent.toString().toLowerCase();\n\t    navigator_appName = navigator.appName;\n\t  }\n\t  else\n\t  {\n\t    var nav = \"chrome\"; // Node.js uses Chrome's V8 engine\n\t    navigator_appName = \"Netscape\"; // Firefox, Chrome and Safari returns \"Netscape\", so Node.js should also\n\t  }\n\t  // Browser test to speedup performance critical functions\n\t  var browser = {};\n\t  if (nav.indexOf(\"chrome\") != -1 && nav.indexOf(\"chromium\") == -1) browser.chrome = 1;\n\t  else browser.chrome = 0;\n\t  if (nav.indexOf(\"chromium\") != -1) browser.chromium = 1;\n\t  else browser.chromium = 0;\n\t  if (nav.indexOf(\"safari\") != -1 && nav.indexOf(\"chrome\") == -1 && nav.indexOf(\"chromium\") == -1) browser.safari = 1;\n\t  else browser.safari = 0;\n\t  if (nav.indexOf(\"firefox\") != -1) browser.firefox = 1;\n\t  else browser.firefox = 0;\n\t  if (nav.indexOf(\"firefox/17\") != -1) browser.firefox17 = 1;\n\t  else browser.firefox17 = 0;\n\t  if (nav.indexOf(\"firefox/15\") != -1) browser.firefox15 = 1;\n\t  else browser.firefox15 = 0;\n\t  if (nav.indexOf(\"firefox/3\") != -1) browser.firefox3 = 1;\n\t  else browser.firefox3 = 0;\n\t  if (nav.indexOf(\"opera\") != -1) browser.opera = 1;\n\t  else browser.opera = 0;\n\t  if (nav.indexOf(\"msie 10\") != -1) browser.msie10 = 1;\n\t  else browser.msie10 = 0;\n\t  if (nav.indexOf(\"msie 9\") != -1) browser.msie9 = 1;\n\t  else browser.msie9 = 0;\n\t  if (nav.indexOf(\"msie 8\") != -1) browser.msie8 = 1;\n\t  else browser.msie8 = 0;\n\t  if (nav.indexOf(\"msie 7\") != -1) browser.msie7 = 1;\n\t  else browser.msie7 = 0;\n\t  if (nav.indexOf(\"msie \") != -1) browser.msie = 1;\n\t  else browser.msie = 0;\n\t  ClipperLib.biginteger_used = null;\n\t\n\t  // Copyright (c) 2005  Tom Wu\n\t  // All Rights Reserved.\n\t  // See \"LICENSE\" for details.\n\t  // Basic JavaScript BN library - subset useful for RSA encryption.\n\t  // Bits per digit\n\t  var dbits;\n\t  // JavaScript engine analysis\n\t  var canary = 0xdeadbeefcafe;\n\t  var j_lm = ((canary & 0xffffff) == 0xefcafe);\n\t  // (public) Constructor\n\t  function BigInteger(a, b, c)\n\t  {\n\t    // This test variable can be removed,\n\t    // but at least for performance tests it is useful piece of knowledge\n\t    // This is the only ClipperLib related variable in BigInteger library\n\t    ClipperLib.biginteger_used = 1;\n\t    if (a != null)\n\t      if (\"number\" == typeof a && \"undefined\" == typeof (b)) this.fromInt(a); // faster conversion\n\t      else if (\"number\" == typeof a) this.fromNumber(a, b, c);\n\t    else if (b == null && \"string\" != typeof a) this.fromString(a, 256);\n\t    else this.fromString(a, b);\n\t  }\n\t  // return new, unset BigInteger\n\t  function nbi()\n\t  {\n\t    return new BigInteger(null,undefined,undefined);\n\t  }\n\t  // am: Compute w_j += (x*this_i), propagate carries,\n\t  // c is initial carry, returns final carry.\n\t  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n\t  // We need to select the fastest one that works in this environment.\n\t  // am1: use a single mult and divide to get the high bits,\n\t  // max digit bits should be 26 because\n\t  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n\t  function am1(i, x, w, j, c, n)\n\t  {\n\t    while (--n >= 0)\n\t    {\n\t      var v = x * this[i++] + w[j] + c;\n\t      c = Math.floor(v / 0x4000000);\n\t      w[j++] = v & 0x3ffffff;\n\t    }\n\t    return c;\n\t  }\n\t  // am2 avoids a big mult-and-extract completely.\n\t  // Max digit bits should be <= 30 because we do bitwise ops\n\t  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n\t  function am2(i, x, w, j, c, n)\n\t  {\n\t    var xl = x & 0x7fff,\n\t      xh = x >> 15;\n\t    while (--n >= 0)\n\t    {\n\t      var l = this[i] & 0x7fff;\n\t      var h = this[i++] >> 15;\n\t      var m = xh * l + h * xl;\n\t      l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n\t      c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n\t      w[j++] = l & 0x3fffffff;\n\t    }\n\t    return c;\n\t  }\n\t  // Alternately, set max digit bits to 28 since some\n\t  // browsers slow down when dealing with 32-bit numbers.\n\t  function am3(i, x, w, j, c, n)\n\t  {\n\t    var xl = x & 0x3fff,\n\t      xh = x >> 14;\n\t    while (--n >= 0)\n\t    {\n\t      var l = this[i] & 0x3fff;\n\t      var h = this[i++] >> 14;\n\t      var m = xh * l + h * xl;\n\t      l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n\t      c = (l >> 28) + (m >> 14) + xh * h;\n\t      w[j++] = l & 0xfffffff;\n\t    }\n\t    return c;\n\t  }\n\t  if (j_lm && (navigator_appName == \"Microsoft Internet Explorer\"))\n\t  {\n\t    BigInteger.prototype.am = am2;\n\t    dbits = 30;\n\t  }\n\t  else if (j_lm && (navigator_appName != \"Netscape\"))\n\t  {\n\t    BigInteger.prototype.am = am1;\n\t    dbits = 26;\n\t  }\n\t  else\n\t  { // Mozilla/Netscape seems to prefer am3\n\t    BigInteger.prototype.am = am3;\n\t    dbits = 28;\n\t  }\n\t  BigInteger.prototype.DB = dbits;\n\t  BigInteger.prototype.DM = ((1 << dbits) - 1);\n\t  BigInteger.prototype.DV = (1 << dbits);\n\t  var BI_FP = 52;\n\t  BigInteger.prototype.FV = Math.pow(2, BI_FP);\n\t  BigInteger.prototype.F1 = BI_FP - dbits;\n\t  BigInteger.prototype.F2 = 2 * dbits - BI_FP;\n\t  // Digit conversions\n\t  var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n\t  var BI_RC = new Array();\n\t  var rr, vv;\n\t  rr = \"0\".charCodeAt(0);\n\t  for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\n\t  rr = \"a\".charCodeAt(0);\n\t  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\t  rr = \"A\".charCodeAt(0);\n\t  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\t\n\t  function int2char(n)\n\t  {\n\t    return BI_RM.charAt(n);\n\t  }\n\t\n\t  function intAt(s, i)\n\t  {\n\t    var c = BI_RC[s.charCodeAt(i)];\n\t    return (c == null) ? -1 : c;\n\t  }\n\t  // (protected) copy this to r\n\t  function bnpCopyTo(r)\n\t  {\n\t    for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];\n\t    r.t = this.t;\n\t    r.s = this.s;\n\t  }\n\t  // (protected) set from integer value x, -DV <= x < DV\n\t  function bnpFromInt(x)\n\t  {\n\t    this.t = 1;\n\t    this.s = (x < 0) ? -1 : 0;\n\t    if (x > 0) this[0] = x;\n\t    else if (x < -1) this[0] = x + this.DV;\n\t    else this.t = 0;\n\t  }\n\t  // return bigint initialized to value\n\t  function nbv(i)\n\t  {\n\t    var r = nbi();\n\t    r.fromInt(i);\n\t    return r;\n\t  }\n\t  // (protected) set from string and radix\n\t  function bnpFromString(s, b)\n\t  {\n\t    var k;\n\t    if (b == 16) k = 4;\n\t    else if (b == 8) k = 3;\n\t    else if (b == 256) k = 8; // byte array\n\t    else if (b == 2) k = 1;\n\t    else if (b == 32) k = 5;\n\t    else if (b == 4) k = 2;\n\t    else\n\t    {\n\t      this.fromRadix(s, b);\n\t      return;\n\t    }\n\t    this.t = 0;\n\t    this.s = 0;\n\t    var i = s.length,\n\t      mi = false,\n\t      sh = 0;\n\t    while (--i >= 0)\n\t    {\n\t      var x = (k == 8) ? s[i] & 0xff : intAt(s, i);\n\t      if (x < 0)\n\t      {\n\t        if (s.charAt(i) == \"-\") mi = true;\n\t        continue;\n\t      }\n\t      mi = false;\n\t      if (sh == 0)\n\t        this[this.t++] = x;\n\t      else if (sh + k > this.DB)\n\t      {\n\t        this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\n\t        this[this.t++] = (x >> (this.DB - sh));\n\t      }\n\t      else\n\t        this[this.t - 1] |= x << sh;\n\t      sh += k;\n\t      if (sh >= this.DB) sh -= this.DB;\n\t    }\n\t    if (k == 8 && (s[0] & 0x80) != 0)\n\t    {\n\t      this.s = -1;\n\t      if (sh > 0) this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;\n\t    }\n\t    this.clamp();\n\t    if (mi) BigInteger.ZERO.subTo(this, this);\n\t  }\n\t  // (protected) clamp off excess high words\n\t  function bnpClamp()\n\t  {\n\t    var c = this.s & this.DM;\n\t    while (this.t > 0 && this[this.t - 1] == c)--this.t;\n\t  }\n\t  // (public) return string representation in given radix\n\t  function bnToString(b)\n\t  {\n\t    if (this.s < 0) return \"-\" + this.negate().toString(b);\n\t    var k;\n\t    if (b == 16) k = 4;\n\t    else if (b == 8) k = 3;\n\t    else if (b == 2) k = 1;\n\t    else if (b == 32) k = 5;\n\t    else if (b == 4) k = 2;\n\t    else return this.toRadix(b);\n\t    var km = (1 << k) - 1,\n\t      d, m = false,\n\t      r = \"\",\n\t      i = this.t;\n\t    var p = this.DB - (i * this.DB) % k;\n\t    if (i-- > 0)\n\t    {\n\t      if (p < this.DB && (d = this[i] >> p) > 0)\n\t      {\n\t        m = true;\n\t        r = int2char(d);\n\t      }\n\t      while (i >= 0)\n\t      {\n\t        if (p < k)\n\t        {\n\t          d = (this[i] & ((1 << p) - 1)) << (k - p);\n\t          d |= this[--i] >> (p += this.DB - k);\n\t        }\n\t        else\n\t        {\n\t          d = (this[i] >> (p -= k)) & km;\n\t          if (p <= 0)\n\t          {\n\t            p += this.DB;\n\t            --i;\n\t          }\n\t        }\n\t        if (d > 0) m = true;\n\t        if (m) r += int2char(d);\n\t      }\n\t    }\n\t    return m ? r : \"0\";\n\t  }\n\t  // (public) -this\n\t  function bnNegate()\n\t  {\n\t    var r = nbi();\n\t    BigInteger.ZERO.subTo(this, r);\n\t    return r;\n\t  }\n\t  // (public) |this|\n\t  function bnAbs()\n\t  {\n\t    return (this.s < 0) ? this.negate() : this;\n\t  }\n\t  // (public) return + if this > a, - if this < a, 0 if equal\n\t  function bnCompareTo(a)\n\t  {\n\t    var r = this.s - a.s;\n\t    if (r != 0) return r;\n\t    var i = this.t;\n\t    r = i - a.t;\n\t    if (r != 0) return (this.s < 0) ? -r : r;\n\t    while (--i >= 0)\n\t      if ((r = this[i] - a[i]) != 0) return r;\n\t    return 0;\n\t  }\n\t  // returns bit length of the integer x\n\t  function nbits(x)\n\t  {\n\t    var r = 1,\n\t      t;\n\t    if ((t = x >>> 16) != 0)\n\t    {\n\t      x = t;\n\t      r += 16;\n\t    }\n\t    if ((t = x >> 8) != 0)\n\t    {\n\t      x = t;\n\t      r += 8;\n\t    }\n\t    if ((t = x >> 4) != 0)\n\t    {\n\t      x = t;\n\t      r += 4;\n\t    }\n\t    if ((t = x >> 2) != 0)\n\t    {\n\t      x = t;\n\t      r += 2;\n\t    }\n\t    if ((t = x >> 1) != 0)\n\t    {\n\t      x = t;\n\t      r += 1;\n\t    }\n\t    return r;\n\t  }\n\t  // (public) return the number of bits in \"this\"\n\t  function bnBitLength()\n\t  {\n\t    if (this.t <= 0) return 0;\n\t    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\n\t  }\n\t  // (protected) r = this << n*DB\n\t  function bnpDLShiftTo(n, r)\n\t  {\n\t    var i;\n\t    for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];\n\t    for (i = n - 1; i >= 0; --i) r[i] = 0;\n\t    r.t = this.t + n;\n\t    r.s = this.s;\n\t  }\n\t  // (protected) r = this >> n*DB\n\t  function bnpDRShiftTo(n, r)\n\t  {\n\t    for (var i = n; i < this.t; ++i) r[i - n] = this[i];\n\t    r.t = Math.max(this.t - n, 0);\n\t    r.s = this.s;\n\t  }\n\t  // (protected) r = this << n\n\t  function bnpLShiftTo(n, r)\n\t  {\n\t    var bs = n % this.DB;\n\t    var cbs = this.DB - bs;\n\t    var bm = (1 << cbs) - 1;\n\t    var ds = Math.floor(n / this.DB),\n\t      c = (this.s << bs) & this.DM,\n\t      i;\n\t    for (i = this.t - 1; i >= 0; --i)\n\t    {\n\t      r[i + ds + 1] = (this[i] >> cbs) | c;\n\t      c = (this[i] & bm) << bs;\n\t    }\n\t    for (i = ds - 1; i >= 0; --i) r[i] = 0;\n\t    r[ds] = c;\n\t    r.t = this.t + ds + 1;\n\t    r.s = this.s;\n\t    r.clamp();\n\t  }\n\t  // (protected) r = this >> n\n\t  function bnpRShiftTo(n, r)\n\t  {\n\t    r.s = this.s;\n\t    var ds = Math.floor(n / this.DB);\n\t    if (ds >= this.t)\n\t    {\n\t      r.t = 0;\n\t      return;\n\t    }\n\t    var bs = n % this.DB;\n\t    var cbs = this.DB - bs;\n\t    var bm = (1 << bs) - 1;\n\t    r[0] = this[ds] >> bs;\n\t    for (var i = ds + 1; i < this.t; ++i)\n\t    {\n\t      r[i - ds - 1] |= (this[i] & bm) << cbs;\n\t      r[i - ds] = this[i] >> bs;\n\t    }\n\t    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n\t    r.t = this.t - ds;\n\t    r.clamp();\n\t  }\n\t  // (protected) r = this - a\n\t  function bnpSubTo(a, r)\n\t  {\n\t    var i = 0,\n\t      c = 0,\n\t      m = Math.min(a.t, this.t);\n\t    while (i < m)\n\t    {\n\t      c += this[i] - a[i];\n\t      r[i++] = c & this.DM;\n\t      c >>= this.DB;\n\t    }\n\t    if (a.t < this.t)\n\t    {\n\t      c -= a.s;\n\t      while (i < this.t)\n\t      {\n\t        c += this[i];\n\t        r[i++] = c & this.DM;\n\t        c >>= this.DB;\n\t      }\n\t      c += this.s;\n\t    }\n\t    else\n\t    {\n\t      c += this.s;\n\t      while (i < a.t)\n\t      {\n\t        c -= a[i];\n\t        r[i++] = c & this.DM;\n\t        c >>= this.DB;\n\t      }\n\t      c -= a.s;\n\t    }\n\t    r.s = (c < 0) ? -1 : 0;\n\t    if (c < -1) r[i++] = this.DV + c;\n\t    else if (c > 0) r[i++] = c;\n\t    r.t = i;\n\t    r.clamp();\n\t  }\n\t  // (protected) r = this * a, r != this,a (HAC 14.12)\n\t  // \"this\" should be the larger one if appropriate.\n\t  function bnpMultiplyTo(a, r)\n\t  {\n\t    var x = this.abs(),\n\t      y = a.abs();\n\t    var i = x.t;\n\t    r.t = i + y.t;\n\t    while (--i >= 0) r[i] = 0;\n\t    for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n\t    r.s = 0;\n\t    r.clamp();\n\t    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n\t  }\n\t  // (protected) r = this^2, r != this (HAC 14.16)\n\t  function bnpSquareTo(r)\n\t  {\n\t    var x = this.abs();\n\t    var i = r.t = 2 * x.t;\n\t    while (--i >= 0) r[i] = 0;\n\t    for (i = 0; i < x.t - 1; ++i)\n\t    {\n\t      var c = x.am(i, x[i], r, 2 * i, 0, 1);\n\t      if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV)\n\t      {\n\t        r[i + x.t] -= x.DV;\n\t        r[i + x.t + 1] = 1;\n\t      }\n\t    }\n\t    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n\t    r.s = 0;\n\t    r.clamp();\n\t  }\n\t  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n\t  // r != q, this != m.  q or r may be null.\n\t  function bnpDivRemTo(m, q, r)\n\t  {\n\t    var pm = m.abs();\n\t    if (pm.t <= 0) return;\n\t    var pt = this.abs();\n\t    if (pt.t < pm.t)\n\t    {\n\t      if (q != null) q.fromInt(0);\n\t      if (r != null) this.copyTo(r);\n\t      return;\n\t    }\n\t    if (r == null) r = nbi();\n\t    var y = nbi(),\n\t      ts = this.s,\n\t      ms = m.s;\n\t    var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n\t    if (nsh > 0)\n\t    {\n\t      pm.lShiftTo(nsh, y);\n\t      pt.lShiftTo(nsh, r);\n\t    }\n\t    else\n\t    {\n\t      pm.copyTo(y);\n\t      pt.copyTo(r);\n\t    }\n\t    var ys = y.t;\n\t    var y0 = y[ys - 1];\n\t    if (y0 == 0) return;\n\t    var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);\n\t    var d1 = this.FV / yt,\n\t      d2 = (1 << this.F1) / yt,\n\t      e = 1 << this.F2;\n\t    var i = r.t,\n\t      j = i - ys,\n\t      t = (q == null) ? nbi() : q;\n\t    y.dlShiftTo(j, t);\n\t    if (r.compareTo(t) >= 0)\n\t    {\n\t      r[r.t++] = 1;\n\t      r.subTo(t, r);\n\t    }\n\t    BigInteger.ONE.dlShiftTo(ys, t);\n\t    t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n\t    while (y.t < ys) y[y.t++] = 0;\n\t    while (--j >= 0)\n\t    {\n\t      // Estimate quotient digit\n\t      var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n\t      if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd)\n\t      { // Try it out\n\t        y.dlShiftTo(j, t);\n\t        r.subTo(t, r);\n\t        while (r[i] < --qd) r.subTo(t, r);\n\t      }\n\t    }\n\t    if (q != null)\n\t    {\n\t      r.drShiftTo(ys, q);\n\t      if (ts != ms) BigInteger.ZERO.subTo(q, q);\n\t    }\n\t    r.t = ys;\n\t    r.clamp();\n\t    if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n\t    if (ts < 0) BigInteger.ZERO.subTo(r, r);\n\t  }\n\t  // (public) this mod a\n\t  function bnMod(a)\n\t  {\n\t    var r = nbi();\n\t    this.abs().divRemTo(a, null, r);\n\t    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n\t    return r;\n\t  }\n\t  // Modular reduction using \"classic\" algorithm\n\t  function Classic(m)\n\t  {\n\t    this.m = m;\n\t  }\n\t\n\t  function cConvert(x)\n\t  {\n\t    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n\t    else return x;\n\t  }\n\t\n\t  function cRevert(x)\n\t  {\n\t    return x;\n\t  }\n\t\n\t  function cReduce(x)\n\t  {\n\t    x.divRemTo(this.m, null, x);\n\t  }\n\t\n\t  function cMulTo(x, y, r)\n\t  {\n\t    x.multiplyTo(y, r);\n\t    this.reduce(r);\n\t  }\n\t\n\t  function cSqrTo(x, r)\n\t  {\n\t    x.squareTo(r);\n\t    this.reduce(r);\n\t  }\n\t  Classic.prototype.convert = cConvert;\n\t  Classic.prototype.revert = cRevert;\n\t  Classic.prototype.reduce = cReduce;\n\t  Classic.prototype.mulTo = cMulTo;\n\t  Classic.prototype.sqrTo = cSqrTo;\n\t  // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n\t  // justification:\n\t  //         xy == 1 (mod m)\n\t  //         xy =  1+km\n\t  //   xy(2-xy) = (1+km)(1-km)\n\t  // x[y(2-xy)] = 1-k^2m^2\n\t  // x[y(2-xy)] == 1 (mod m^2)\n\t  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n\t  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n\t  // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n\t  function bnpInvDigit()\n\t  {\n\t    if (this.t < 1) return 0;\n\t    var x = this[0];\n\t    if ((x & 1) == 0) return 0;\n\t    var y = x & 3; // y == 1/x mod 2^2\n\t    y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4\n\t    y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8\n\t    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16\n\t    // last step - calculate inverse mod DV directly;\n\t    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n\t    y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits\n\t    // we really want the negative inverse, and -DV < y < DV\n\t    return (y > 0) ? this.DV - y : -y;\n\t  }\n\t  // Montgomery reduction\n\t  function Montgomery(m)\n\t  {\n\t    this.m = m;\n\t    this.mp = m.invDigit();\n\t    this.mpl = this.mp & 0x7fff;\n\t    this.mph = this.mp >> 15;\n\t    this.um = (1 << (m.DB - 15)) - 1;\n\t    this.mt2 = 2 * m.t;\n\t  }\n\t  // xR mod m\n\t  function montConvert(x)\n\t  {\n\t    var r = nbi();\n\t    x.abs().dlShiftTo(this.m.t, r);\n\t    r.divRemTo(this.m, null, r);\n\t    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n\t    return r;\n\t  }\n\t  // x/R mod m\n\t  function montRevert(x)\n\t  {\n\t    var r = nbi();\n\t    x.copyTo(r);\n\t    this.reduce(r);\n\t    return r;\n\t  }\n\t  // x = x/R mod m (HAC 14.32)\n\t  function montReduce(x)\n\t  {\n\t    while (x.t <= this.mt2) // pad x so am has enough room later\n\t      x[x.t++] = 0;\n\t    for (var i = 0; i < this.m.t; ++i)\n\t    {\n\t      // faster way of calculating u0 = x[i]*mp mod DV\n\t      var j = x[i] & 0x7fff;\n\t      var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;\n\t      // use am to combine the multiply-shift-add into one call\n\t      j = i + this.m.t;\n\t      x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n\t      // propagate carry\n\t      while (x[j] >= x.DV)\n\t      {\n\t        x[j] -= x.DV;\n\t        x[++j]++;\n\t      }\n\t    }\n\t    x.clamp();\n\t    x.drShiftTo(this.m.t, x);\n\t    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n\t  }\n\t  // r = \"x^2/R mod m\"; x != r\n\t  function montSqrTo(x, r)\n\t  {\n\t    x.squareTo(r);\n\t    this.reduce(r);\n\t  }\n\t  // r = \"xy/R mod m\"; x,y != r\n\t  function montMulTo(x, y, r)\n\t  {\n\t    x.multiplyTo(y, r);\n\t    this.reduce(r);\n\t  }\n\t  Montgomery.prototype.convert = montConvert;\n\t  Montgomery.prototype.revert = montRevert;\n\t  Montgomery.prototype.reduce = montReduce;\n\t  Montgomery.prototype.mulTo = montMulTo;\n\t  Montgomery.prototype.sqrTo = montSqrTo;\n\t  // (protected) true iff this is even\n\t  function bnpIsEven()\n\t  {\n\t    return ((this.t > 0) ? (this[0] & 1) : this.s) == 0;\n\t  }\n\t  // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n\t  function bnpExp(e, z)\n\t  {\n\t    if (e > 0xffffffff || e < 1) return BigInteger.ONE;\n\t    var r = nbi(),\n\t      r2 = nbi(),\n\t      g = z.convert(this),\n\t      i = nbits(e) - 1;\n\t    g.copyTo(r);\n\t    while (--i >= 0)\n\t    {\n\t      z.sqrTo(r, r2);\n\t      if ((e & (1 << i)) > 0) z.mulTo(r2, g, r);\n\t      else\n\t      {\n\t        var t = r;\n\t        r = r2;\n\t        r2 = t;\n\t      }\n\t    }\n\t    return z.revert(r);\n\t  }\n\t  // (public) this^e % m, 0 <= e < 2^32\n\t  function bnModPowInt(e, m)\n\t  {\n\t    var z;\n\t    if (e < 256 || m.isEven()) z = new Classic(m);\n\t    else z = new Montgomery(m);\n\t    return this.exp(e, z);\n\t  }\n\t  // protected\n\t  BigInteger.prototype.copyTo = bnpCopyTo;\n\t  BigInteger.prototype.fromInt = bnpFromInt;\n\t  BigInteger.prototype.fromString = bnpFromString;\n\t  BigInteger.prototype.clamp = bnpClamp;\n\t  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n\t  BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n\t  BigInteger.prototype.lShiftTo = bnpLShiftTo;\n\t  BigInteger.prototype.rShiftTo = bnpRShiftTo;\n\t  BigInteger.prototype.subTo = bnpSubTo;\n\t  BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n\t  BigInteger.prototype.squareTo = bnpSquareTo;\n\t  BigInteger.prototype.divRemTo = bnpDivRemTo;\n\t  BigInteger.prototype.invDigit = bnpInvDigit;\n\t  BigInteger.prototype.isEven = bnpIsEven;\n\t  BigInteger.prototype.exp = bnpExp;\n\t  // public\n\t  BigInteger.prototype.toString = bnToString;\n\t  BigInteger.prototype.negate = bnNegate;\n\t  BigInteger.prototype.abs = bnAbs;\n\t  BigInteger.prototype.compareTo = bnCompareTo;\n\t  BigInteger.prototype.bitLength = bnBitLength;\n\t  BigInteger.prototype.mod = bnMod;\n\t  BigInteger.prototype.modPowInt = bnModPowInt;\n\t  // \"constants\"\n\t  BigInteger.ZERO = nbv(0);\n\t  BigInteger.ONE = nbv(1);\n\t  // Copyright (c) 2005-2009  Tom Wu\n\t  // All Rights Reserved.\n\t  // See \"LICENSE\" for details.\n\t  // Extended JavaScript BN functions, required for RSA private ops.\n\t  // Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n\t  // Version 1.2: square() API, isProbablePrime fix\n\t  // (public)\n\t  function bnClone()\n\t  {\n\t    var r = nbi();\n\t    this.copyTo(r);\n\t    return r;\n\t  }\n\t  // (public) return value as integer\n\t  function bnIntValue()\n\t  {\n\t    if (this.s < 0)\n\t    {\n\t      if (this.t == 1) return this[0] - this.DV;\n\t      else if (this.t == 0) return -1;\n\t    }\n\t    else if (this.t == 1) return this[0];\n\t    else if (this.t == 0) return 0;\n\t    // assumes 16 < DB < 32\n\t    return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];\n\t  }\n\t  // (public) return value as byte\n\t  function bnByteValue()\n\t  {\n\t    return (this.t == 0) ? this.s : (this[0] << 24) >> 24;\n\t  }\n\t  // (public) return value as short (assumes DB>=16)\n\t  function bnShortValue()\n\t  {\n\t    return (this.t == 0) ? this.s : (this[0] << 16) >> 16;\n\t  }\n\t  // (protected) return x s.t. r^x < DV\n\t  function bnpChunkSize(r)\n\t  {\n\t    return Math.floor(Math.LN2 * this.DB / Math.log(r));\n\t  }\n\t  // (public) 0 if this == 0, 1 if this > 0\n\t  function bnSigNum()\n\t  {\n\t    if (this.s < 0) return -1;\n\t    else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n\t    else return 1;\n\t  }\n\t  // (protected) convert to radix string\n\t  function bnpToRadix(b)\n\t  {\n\t    if (b == null) b = 10;\n\t    if (this.signum() == 0 || b < 2 || b > 36) return \"0\";\n\t    var cs = this.chunkSize(b);\n\t    var a = Math.pow(b, cs);\n\t    var d = nbv(a),\n\t      y = nbi(),\n\t      z = nbi(),\n\t      r = \"\";\n\t    this.divRemTo(d, y, z);\n\t    while (y.signum() > 0)\n\t    {\n\t      r = (a + z.intValue()).toString(b).substr(1) + r;\n\t      y.divRemTo(d, y, z);\n\t    }\n\t    return z.intValue().toString(b) + r;\n\t  }\n\t  // (protected) convert from radix string\n\t  function bnpFromRadix(s, b)\n\t  {\n\t    this.fromInt(0);\n\t    if (b == null) b = 10;\n\t    var cs = this.chunkSize(b);\n\t    var d = Math.pow(b, cs),\n\t      mi = false,\n\t      j = 0,\n\t      w = 0;\n\t    for (var i = 0; i < s.length; ++i)\n\t    {\n\t      var x = intAt(s, i);\n\t      if (x < 0)\n\t      {\n\t        if (s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n\t        continue;\n\t      }\n\t      w = b * w + x;\n\t      if (++j >= cs)\n\t      {\n\t        this.dMultiply(d);\n\t        this.dAddOffset(w, 0);\n\t        j = 0;\n\t        w = 0;\n\t      }\n\t    }\n\t    if (j > 0)\n\t    {\n\t      this.dMultiply(Math.pow(b, j));\n\t      this.dAddOffset(w, 0);\n\t    }\n\t    if (mi) BigInteger.ZERO.subTo(this, this);\n\t  }\n\t  // (protected) alternate constructor\n\t  function bnpFromNumber(a, b, c)\n\t  {\n\t    if (\"number\" == typeof b)\n\t    {\n\t      // new BigInteger(int,int,RNG)\n\t      if (a < 2) this.fromInt(1);\n\t      else\n\t      {\n\t        this.fromNumber(a, c);\n\t        if (!this.testBit(a - 1)) // force MSB set\n\t          this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n\t        if (this.isEven()) this.dAddOffset(1, 0); // force odd\n\t        while (!this.isProbablePrime(b))\n\t        {\n\t          this.dAddOffset(2, 0);\n\t          if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n\t        }\n\t      }\n\t    }\n\t    else\n\t    {\n\t      // new BigInteger(int,RNG)\n\t      var x = new Array(),\n\t        t = a & 7;\n\t      x.length = (a >> 3) + 1;\n\t      b.nextBytes(x);\n\t      if (t > 0) x[0] &= ((1 << t) - 1);\n\t      else x[0] = 0;\n\t      this.fromString(x, 256);\n\t    }\n\t  }\n\t  // (public) convert to bigendian byte array\n\t  function bnToByteArray()\n\t  {\n\t    var i = this.t,\n\t      r = new Array();\n\t    r[0] = this.s;\n\t    var p = this.DB - (i * this.DB) % 8,\n\t      d, k = 0;\n\t    if (i-- > 0)\n\t    {\n\t      if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)\n\t        r[k++] = d | (this.s << (this.DB - p));\n\t      while (i >= 0)\n\t      {\n\t        if (p < 8)\n\t        {\n\t          d = (this[i] & ((1 << p) - 1)) << (8 - p);\n\t          d |= this[--i] >> (p += this.DB - 8);\n\t        }\n\t        else\n\t        {\n\t          d = (this[i] >> (p -= 8)) & 0xff;\n\t          if (p <= 0)\n\t          {\n\t            p += this.DB;\n\t            --i;\n\t          }\n\t        }\n\t        if ((d & 0x80) != 0) d |= -256;\n\t        if (k == 0 && (this.s & 0x80) != (d & 0x80))++k;\n\t        if (k > 0 || d != this.s) r[k++] = d;\n\t      }\n\t    }\n\t    return r;\n\t  }\n\t\n\t  function bnEquals(a)\n\t  {\n\t    return (this.compareTo(a) == 0);\n\t  }\n\t\n\t  function bnMin(a)\n\t  {\n\t    return (this.compareTo(a) < 0) ? this : a;\n\t  }\n\t\n\t  function bnMax(a)\n\t  {\n\t    return (this.compareTo(a) > 0) ? this : a;\n\t  }\n\t  // (protected) r = this op a (bitwise)\n\t  function bnpBitwiseTo(a, op, r)\n\t  {\n\t    var i, f, m = Math.min(a.t, this.t);\n\t    for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);\n\t    if (a.t < this.t)\n\t    {\n\t      f = a.s & this.DM;\n\t      for (i = m; i < this.t; ++i) r[i] = op(this[i], f);\n\t      r.t = this.t;\n\t    }\n\t    else\n\t    {\n\t      f = this.s & this.DM;\n\t      for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);\n\t      r.t = a.t;\n\t    }\n\t    r.s = op(this.s, a.s);\n\t    r.clamp();\n\t  }\n\t  // (public) this & a\n\t  function op_and(x, y)\n\t  {\n\t    return x & y;\n\t  }\n\t\n\t  function bnAnd(a)\n\t  {\n\t    var r = nbi();\n\t    this.bitwiseTo(a, op_and, r);\n\t    return r;\n\t  }\n\t  // (public) this | a\n\t  function op_or(x, y)\n\t  {\n\t    return x | y;\n\t  }\n\t\n\t  function bnOr(a)\n\t  {\n\t    var r = nbi();\n\t    this.bitwiseTo(a, op_or, r);\n\t    return r;\n\t  }\n\t  // (public) this ^ a\n\t  function op_xor(x, y)\n\t  {\n\t    return x ^ y;\n\t  }\n\t\n\t  function bnXor(a)\n\t  {\n\t    var r = nbi();\n\t    this.bitwiseTo(a, op_xor, r);\n\t    return r;\n\t  }\n\t  // (public) this & ~a\n\t  function op_andnot(x, y)\n\t  {\n\t    return x & ~y;\n\t  }\n\t\n\t  function bnAndNot(a)\n\t  {\n\t    var r = nbi();\n\t    this.bitwiseTo(a, op_andnot, r);\n\t    return r;\n\t  }\n\t  // (public) ~this\n\t  function bnNot()\n\t  {\n\t    var r = nbi();\n\t    for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];\n\t    r.t = this.t;\n\t    r.s = ~this.s;\n\t    return r;\n\t  }\n\t  // (public) this << n\n\t  function bnShiftLeft(n)\n\t  {\n\t    var r = nbi();\n\t    if (n < 0) this.rShiftTo(-n, r);\n\t    else this.lShiftTo(n, r);\n\t    return r;\n\t  }\n\t  // (public) this >> n\n\t  function bnShiftRight(n)\n\t  {\n\t    var r = nbi();\n\t    if (n < 0) this.lShiftTo(-n, r);\n\t    else this.rShiftTo(n, r);\n\t    return r;\n\t  }\n\t  // return index of lowest 1-bit in x, x < 2^31\n\t  function lbit(x)\n\t  {\n\t    if (x == 0) return -1;\n\t    var r = 0;\n\t    if ((x & 0xffff) == 0)\n\t    {\n\t      x >>= 16;\n\t      r += 16;\n\t    }\n\t    if ((x & 0xff) == 0)\n\t    {\n\t      x >>= 8;\n\t      r += 8;\n\t    }\n\t    if ((x & 0xf) == 0)\n\t    {\n\t      x >>= 4;\n\t      r += 4;\n\t    }\n\t    if ((x & 3) == 0)\n\t    {\n\t      x >>= 2;\n\t      r += 2;\n\t    }\n\t    if ((x & 1) == 0)++r;\n\t    return r;\n\t  }\n\t  // (public) returns index of lowest 1-bit (or -1 if none)\n\t  function bnGetLowestSetBit()\n\t  {\n\t    for (var i = 0; i < this.t; ++i)\n\t      if (this[i] != 0) return i * this.DB + lbit(this[i]);\n\t    if (this.s < 0) return this.t * this.DB;\n\t    return -1;\n\t  }\n\t  // return number of 1 bits in x\n\t  function cbit(x)\n\t  {\n\t    var r = 0;\n\t    while (x != 0)\n\t    {\n\t      x &= x - 1;\n\t      ++r;\n\t    }\n\t    return r;\n\t  }\n\t  // (public) return number of set bits\n\t  function bnBitCount()\n\t  {\n\t    var r = 0,\n\t      x = this.s & this.DM;\n\t    for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);\n\t    return r;\n\t  }\n\t  // (public) true iff nth bit is set\n\t  function bnTestBit(n)\n\t  {\n\t    var j = Math.floor(n / this.DB);\n\t    if (j >= this.t) return (this.s != 0);\n\t    return ((this[j] & (1 << (n % this.DB))) != 0);\n\t  }\n\t  // (protected) this op (1<<n)\n\t  function bnpChangeBit(n, op)\n\t  {\n\t    var r = BigInteger.ONE.shiftLeft(n);\n\t    this.bitwiseTo(r, op, r);\n\t    return r;\n\t  }\n\t  // (public) this | (1<<n)\n\t  function bnSetBit(n)\n\t  {\n\t    return this.changeBit(n, op_or);\n\t  }\n\t  // (public) this & ~(1<<n)\n\t  function bnClearBit(n)\n\t  {\n\t    return this.changeBit(n, op_andnot);\n\t  }\n\t  // (public) this ^ (1<<n)\n\t  function bnFlipBit(n)\n\t  {\n\t    return this.changeBit(n, op_xor);\n\t  }\n\t  // (protected) r = this + a\n\t  function bnpAddTo(a, r)\n\t  {\n\t    var i = 0,\n\t      c = 0,\n\t      m = Math.min(a.t, this.t);\n\t    while (i < m)\n\t    {\n\t      c += this[i] + a[i];\n\t      r[i++] = c & this.DM;\n\t      c >>= this.DB;\n\t    }\n\t    if (a.t < this.t)\n\t    {\n\t      c += a.s;\n\t      while (i < this.t)\n\t      {\n\t        c += this[i];\n\t        r[i++] = c & this.DM;\n\t        c >>= this.DB;\n\t      }\n\t      c += this.s;\n\t    }\n\t    else\n\t    {\n\t      c += this.s;\n\t      while (i < a.t)\n\t      {\n\t        c += a[i];\n\t        r[i++] = c & this.DM;\n\t        c >>= this.DB;\n\t      }\n\t      c += a.s;\n\t    }\n\t    r.s = (c < 0) ? -1 : 0;\n\t    if (c > 0) r[i++] = c;\n\t    else if (c < -1) r[i++] = this.DV + c;\n\t    r.t = i;\n\t    r.clamp();\n\t  }\n\t  // (public) this + a\n\t  function bnAdd(a)\n\t  {\n\t    var r = nbi();\n\t    this.addTo(a, r);\n\t    return r;\n\t  }\n\t  // (public) this - a\n\t  function bnSubtract(a)\n\t  {\n\t    var r = nbi();\n\t    this.subTo(a, r);\n\t    return r;\n\t  }\n\t  // (public) this * a\n\t  function bnMultiply(a)\n\t  {\n\t    var r = nbi();\n\t    this.multiplyTo(a, r);\n\t    return r;\n\t  }\n\t  // (public) this^2\n\t  function bnSquare()\n\t  {\n\t    var r = nbi();\n\t    this.squareTo(r);\n\t    return r;\n\t  }\n\t  // (public) this / a\n\t  function bnDivide(a)\n\t  {\n\t    var r = nbi();\n\t    this.divRemTo(a, r, null);\n\t    return r;\n\t  }\n\t  // (public) this % a\n\t  function bnRemainder(a)\n\t  {\n\t    var r = nbi();\n\t    this.divRemTo(a, null, r);\n\t    return r;\n\t  }\n\t  // (public) [this/a,this%a]\n\t  function bnDivideAndRemainder(a)\n\t  {\n\t    var q = nbi(),\n\t      r = nbi();\n\t    this.divRemTo(a, q, r);\n\t    return new Array(q, r);\n\t  }\n\t  // (protected) this *= n, this >= 0, 1 < n < DV\n\t  function bnpDMultiply(n)\n\t  {\n\t    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n\t    ++this.t;\n\t    this.clamp();\n\t  }\n\t  // (protected) this += n << w words, this >= 0\n\t  function bnpDAddOffset(n, w)\n\t  {\n\t    if (n == 0) return;\n\t    while (this.t <= w) this[this.t++] = 0;\n\t    this[w] += n;\n\t    while (this[w] >= this.DV)\n\t    {\n\t      this[w] -= this.DV;\n\t      if (++w >= this.t) this[this.t++] = 0;\n\t      ++this[w];\n\t    }\n\t  }\n\t  // A \"null\" reducer\n\t  function NullExp()\n\t  {}\n\t\n\t  function nNop(x)\n\t  {\n\t    return x;\n\t  }\n\t\n\t  function nMulTo(x, y, r)\n\t  {\n\t    x.multiplyTo(y, r);\n\t  }\n\t\n\t  function nSqrTo(x, r)\n\t  {\n\t    x.squareTo(r);\n\t  }\n\t  NullExp.prototype.convert = nNop;\n\t  NullExp.prototype.revert = nNop;\n\t  NullExp.prototype.mulTo = nMulTo;\n\t  NullExp.prototype.sqrTo = nSqrTo;\n\t  // (public) this^e\n\t  function bnPow(e)\n\t  {\n\t    return this.exp(e, new NullExp());\n\t  }\n\t  // (protected) r = lower n words of \"this * a\", a.t <= n\n\t  // \"this\" should be the larger one if appropriate.\n\t  function bnpMultiplyLowerTo(a, n, r)\n\t  {\n\t    var i = Math.min(this.t + a.t, n);\n\t    r.s = 0; // assumes a,this >= 0\n\t    r.t = i;\n\t    while (i > 0) r[--i] = 0;\n\t    var j;\n\t    for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n\t    for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);\n\t    r.clamp();\n\t  }\n\t  // (protected) r = \"this * a\" without lower n words, n > 0\n\t  // \"this\" should be the larger one if appropriate.\n\t  function bnpMultiplyUpperTo(a, n, r)\n\t  {\n\t    --n;\n\t    var i = r.t = this.t + a.t - n;\n\t    r.s = 0; // assumes a,this >= 0\n\t    while (--i >= 0) r[i] = 0;\n\t    for (i = Math.max(n - this.t, 0); i < a.t; ++i)\n\t      r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n\t    r.clamp();\n\t    r.drShiftTo(1, r);\n\t  }\n\t  // Barrett modular reduction\n\t  function Barrett(m)\n\t  {\n\t    // setup Barrett\n\t    this.r2 = nbi();\n\t    this.q3 = nbi();\n\t    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n\t    this.mu = this.r2.divide(m);\n\t    this.m = m;\n\t  }\n\t\n\t  function barrettConvert(x)\n\t  {\n\t    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);\n\t    else if (x.compareTo(this.m) < 0) return x;\n\t    else\n\t    {\n\t      var r = nbi();\n\t      x.copyTo(r);\n\t      this.reduce(r);\n\t      return r;\n\t    }\n\t  }\n\t\n\t  function barrettRevert(x)\n\t  {\n\t    return x;\n\t  }\n\t  // x = x mod m (HAC 14.42)\n\t  function barrettReduce(x)\n\t  {\n\t    x.drShiftTo(this.m.t - 1, this.r2);\n\t    if (x.t > this.m.t + 1)\n\t    {\n\t      x.t = this.m.t + 1;\n\t      x.clamp();\n\t    }\n\t    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n\t    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n\t    while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);\n\t    x.subTo(this.r2, x);\n\t    while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n\t  }\n\t  // r = x^2 mod m; x != r\n\t  function barrettSqrTo(x, r)\n\t  {\n\t    x.squareTo(r);\n\t    this.reduce(r);\n\t  }\n\t  // r = x*y mod m; x,y != r\n\t  function barrettMulTo(x, y, r)\n\t  {\n\t    x.multiplyTo(y, r);\n\t    this.reduce(r);\n\t  }\n\t  Barrett.prototype.convert = barrettConvert;\n\t  Barrett.prototype.revert = barrettRevert;\n\t  Barrett.prototype.reduce = barrettReduce;\n\t  Barrett.prototype.mulTo = barrettMulTo;\n\t  Barrett.prototype.sqrTo = barrettSqrTo;\n\t  // (public) this^e % m (HAC 14.85)\n\t  function bnModPow(e, m)\n\t  {\n\t    var i = e.bitLength(),\n\t      k, r = nbv(1),\n\t      z;\n\t    if (i <= 0) return r;\n\t    else if (i < 18) k = 1;\n\t    else if (i < 48) k = 3;\n\t    else if (i < 144) k = 4;\n\t    else if (i < 768) k = 5;\n\t    else k = 6;\n\t    if (i < 8)\n\t      z = new Classic(m);\n\t    else if (m.isEven())\n\t      z = new Barrett(m);\n\t    else\n\t      z = new Montgomery(m);\n\t    // precomputation\n\t    var g = new Array(),\n\t      n = 3,\n\t      k1 = k - 1,\n\t      km = (1 << k) - 1;\n\t    g[1] = z.convert(this);\n\t    if (k > 1)\n\t    {\n\t      var g2 = nbi();\n\t      z.sqrTo(g[1], g2);\n\t      while (n <= km)\n\t      {\n\t        g[n] = nbi();\n\t        z.mulTo(g2, g[n - 2], g[n]);\n\t        n += 2;\n\t      }\n\t    }\n\t    var j = e.t - 1,\n\t      w, is1 = true,\n\t      r2 = nbi(),\n\t      t;\n\t    i = nbits(e[j]) - 1;\n\t    while (j >= 0)\n\t    {\n\t      if (i >= k1) w = (e[j] >> (i - k1)) & km;\n\t      else\n\t      {\n\t        w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\n\t        if (j > 0) w |= e[j - 1] >> (this.DB + i - k1);\n\t      }\n\t      n = k;\n\t      while ((w & 1) == 0)\n\t      {\n\t        w >>= 1;\n\t        --n;\n\t      }\n\t      if ((i -= n) < 0)\n\t      {\n\t        i += this.DB;\n\t        --j;\n\t      }\n\t      if (is1)\n\t      { // ret == 1, don't bother squaring or multiplying it\n\t        g[w].copyTo(r);\n\t        is1 = false;\n\t      }\n\t      else\n\t      {\n\t        while (n > 1)\n\t        {\n\t          z.sqrTo(r, r2);\n\t          z.sqrTo(r2, r);\n\t          n -= 2;\n\t        }\n\t        if (n > 0) z.sqrTo(r, r2);\n\t        else\n\t        {\n\t          t = r;\n\t          r = r2;\n\t          r2 = t;\n\t        }\n\t        z.mulTo(r2, g[w], r);\n\t      }\n\t      while (j >= 0 && (e[j] & (1 << i)) == 0)\n\t      {\n\t        z.sqrTo(r, r2);\n\t        t = r;\n\t        r = r2;\n\t        r2 = t;\n\t        if (--i < 0)\n\t        {\n\t          i = this.DB - 1;\n\t          --j;\n\t        }\n\t      }\n\t    }\n\t    return z.revert(r);\n\t  }\n\t  // (public) gcd(this,a) (HAC 14.54)\n\t  function bnGCD(a)\n\t  {\n\t    var x = (this.s < 0) ? this.negate() : this.clone();\n\t    var y = (a.s < 0) ? a.negate() : a.clone();\n\t    if (x.compareTo(y) < 0)\n\t    {\n\t      var t = x;\n\t      x = y;\n\t      y = t;\n\t    }\n\t    var i = x.getLowestSetBit(),\n\t      g = y.getLowestSetBit();\n\t    if (g < 0) return x;\n\t    if (i < g) g = i;\n\t    if (g > 0)\n\t    {\n\t      x.rShiftTo(g, x);\n\t      y.rShiftTo(g, y);\n\t    }\n\t    while (x.signum() > 0)\n\t    {\n\t      if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n\t      if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n\t      if (x.compareTo(y) >= 0)\n\t      {\n\t        x.subTo(y, x);\n\t        x.rShiftTo(1, x);\n\t      }\n\t      else\n\t      {\n\t        y.subTo(x, y);\n\t        y.rShiftTo(1, y);\n\t      }\n\t    }\n\t    if (g > 0) y.lShiftTo(g, y);\n\t    return y;\n\t  }\n\t  // (protected) this % n, n < 2^26\n\t  function bnpModInt(n)\n\t  {\n\t    if (n <= 0) return 0;\n\t    var d = this.DV % n,\n\t      r = (this.s < 0) ? n - 1 : 0;\n\t    if (this.t > 0)\n\t      if (d == 0) r = this[0] % n;\n\t      else\n\t        for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;\n\t    return r;\n\t  }\n\t  // (public) 1/this % m (HAC 14.61)\n\t  function bnModInverse(m)\n\t  {\n\t    var ac = m.isEven();\n\t    if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\n\t    var u = m.clone(),\n\t      v = this.clone();\n\t    var a = nbv(1),\n\t      b = nbv(0),\n\t      c = nbv(0),\n\t      d = nbv(1);\n\t    while (u.signum() != 0)\n\t    {\n\t      while (u.isEven())\n\t      {\n\t        u.rShiftTo(1, u);\n\t        if (ac)\n\t        {\n\t          if (!a.isEven() || !b.isEven())\n\t          {\n\t            a.addTo(this, a);\n\t            b.subTo(m, b);\n\t          }\n\t          a.rShiftTo(1, a);\n\t        }\n\t        else if (!b.isEven()) b.subTo(m, b);\n\t        b.rShiftTo(1, b);\n\t      }\n\t      while (v.isEven())\n\t      {\n\t        v.rShiftTo(1, v);\n\t        if (ac)\n\t        {\n\t          if (!c.isEven() || !d.isEven())\n\t          {\n\t            c.addTo(this, c);\n\t            d.subTo(m, d);\n\t          }\n\t          c.rShiftTo(1, c);\n\t        }\n\t        else if (!d.isEven()) d.subTo(m, d);\n\t        d.rShiftTo(1, d);\n\t      }\n\t      if (u.compareTo(v) >= 0)\n\t      {\n\t        u.subTo(v, u);\n\t        if (ac) a.subTo(c, a);\n\t        b.subTo(d, b);\n\t      }\n\t      else\n\t      {\n\t        v.subTo(u, v);\n\t        if (ac) c.subTo(a, c);\n\t        d.subTo(b, d);\n\t      }\n\t    }\n\t    if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n\t    if (d.compareTo(m) >= 0) return d.subtract(m);\n\t    if (d.signum() < 0) d.addTo(m, d);\n\t    else return d;\n\t    if (d.signum() < 0) return d.add(m);\n\t    else return d;\n\t  }\n\t  var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n\t  var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n\t  // (public) test primality with certainty >= 1-.5^t\n\t  function bnIsProbablePrime(t)\n\t  {\n\t    var i, x = this.abs();\n\t    if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1])\n\t    {\n\t      for (i = 0; i < lowprimes.length; ++i)\n\t        if (x[0] == lowprimes[i]) return true;\n\t      return false;\n\t    }\n\t    if (x.isEven()) return false;\n\t    i = 1;\n\t    while (i < lowprimes.length)\n\t    {\n\t      var m = lowprimes[i],\n\t        j = i + 1;\n\t      while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n\t      m = x.modInt(m);\n\t      while (i < j)\n\t        if (m % lowprimes[i++] == 0) return false;\n\t    }\n\t    return x.millerRabin(t);\n\t  }\n\t  // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n\t  function bnpMillerRabin(t)\n\t  {\n\t    var n1 = this.subtract(BigInteger.ONE);\n\t    var k = n1.getLowestSetBit();\n\t    if (k <= 0) return false;\n\t    var r = n1.shiftRight(k);\n\t    t = (t + 1) >> 1;\n\t    if (t > lowprimes.length) t = lowprimes.length;\n\t    var a = nbi();\n\t    for (var i = 0; i < t; ++i)\n\t    {\n\t      //Pick bases at random, instead of starting at 2\n\t      a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n\t      var y = a.modPow(r, this);\n\t      if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0)\n\t      {\n\t        var j = 1;\n\t        while (j++ < k && y.compareTo(n1) != 0)\n\t        {\n\t          y = y.modPowInt(2, this);\n\t          if (y.compareTo(BigInteger.ONE) == 0) return false;\n\t        }\n\t        if (y.compareTo(n1) != 0) return false;\n\t      }\n\t    }\n\t    return true;\n\t  }\n\t  // protected\n\t  BigInteger.prototype.chunkSize = bnpChunkSize;\n\t  BigInteger.prototype.toRadix = bnpToRadix;\n\t  BigInteger.prototype.fromRadix = bnpFromRadix;\n\t  BigInteger.prototype.fromNumber = bnpFromNumber;\n\t  BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n\t  BigInteger.prototype.changeBit = bnpChangeBit;\n\t  BigInteger.prototype.addTo = bnpAddTo;\n\t  BigInteger.prototype.dMultiply = bnpDMultiply;\n\t  BigInteger.prototype.dAddOffset = bnpDAddOffset;\n\t  BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n\t  BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n\t  BigInteger.prototype.modInt = bnpModInt;\n\t  BigInteger.prototype.millerRabin = bnpMillerRabin;\n\t  // public\n\t  BigInteger.prototype.clone = bnClone;\n\t  BigInteger.prototype.intValue = bnIntValue;\n\t  BigInteger.prototype.byteValue = bnByteValue;\n\t  BigInteger.prototype.shortValue = bnShortValue;\n\t  BigInteger.prototype.signum = bnSigNum;\n\t  BigInteger.prototype.toByteArray = bnToByteArray;\n\t  BigInteger.prototype.equals = bnEquals;\n\t  BigInteger.prototype.min = bnMin;\n\t  BigInteger.prototype.max = bnMax;\n\t  BigInteger.prototype.and = bnAnd;\n\t  BigInteger.prototype.or = bnOr;\n\t  BigInteger.prototype.xor = bnXor;\n\t  BigInteger.prototype.andNot = bnAndNot;\n\t  BigInteger.prototype.not = bnNot;\n\t  BigInteger.prototype.shiftLeft = bnShiftLeft;\n\t  BigInteger.prototype.shiftRight = bnShiftRight;\n\t  BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n\t  BigInteger.prototype.bitCount = bnBitCount;\n\t  BigInteger.prototype.testBit = bnTestBit;\n\t  BigInteger.prototype.setBit = bnSetBit;\n\t  BigInteger.prototype.clearBit = bnClearBit;\n\t  BigInteger.prototype.flipBit = bnFlipBit;\n\t  BigInteger.prototype.add = bnAdd;\n\t  BigInteger.prototype.subtract = bnSubtract;\n\t  BigInteger.prototype.multiply = bnMultiply;\n\t  BigInteger.prototype.divide = bnDivide;\n\t  BigInteger.prototype.remainder = bnRemainder;\n\t  BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n\t  BigInteger.prototype.modPow = bnModPow;\n\t  BigInteger.prototype.modInverse = bnModInverse;\n\t  BigInteger.prototype.pow = bnPow;\n\t  BigInteger.prototype.gcd = bnGCD;\n\t  BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n\t  // JSBN-specific extension\n\t  BigInteger.prototype.square = bnSquare;\n\t  var Int128 = BigInteger;\n\t  // BigInteger interfaces not implemented in jsbn:\n\t  // BigInteger(int signum, byte[] magnitude)\n\t  // double doubleValue()\n\t  // float floatValue()\n\t  // int hashCode()\n\t  // long longValue()\n\t  // static BigInteger valueOf(long val)\n\t  // Helper functions to make BigInteger functions callable with two parameters\n\t  // as in original C# Clipper\n\t  Int128.prototype.IsNegative = function ()\n\t  {\n\t    if (this.compareTo(Int128.ZERO) == -1) return true;\n\t    else return false;\n\t  };\n\t  Int128.op_Equality = function (val1, val2)\n\t  {\n\t    if (val1.compareTo(val2) == 0) return true;\n\t    else return false;\n\t  };\n\t  Int128.op_Inequality = function (val1, val2)\n\t  {\n\t    if (val1.compareTo(val2) != 0) return true;\n\t    else return false;\n\t  };\n\t  Int128.op_GreaterThan = function (val1, val2)\n\t  {\n\t    if (val1.compareTo(val2) > 0) return true;\n\t    else return false;\n\t  };\n\t  Int128.op_LessThan = function (val1, val2)\n\t  {\n\t    if (val1.compareTo(val2) < 0) return true;\n\t    else return false;\n\t  };\n\t  Int128.op_Addition = function (lhs, rhs)\n\t  {\n\t    return new Int128(lhs).add(new Int128(rhs));\n\t  };\n\t  Int128.op_Subtraction = function (lhs, rhs)\n\t  {\n\t    return new Int128(lhs).subtract(new Int128(rhs));\n\t  };\n\t  Int128.Int128Mul = function (lhs, rhs)\n\t  {\n\t    return new Int128(lhs).multiply(new Int128(rhs));\n\t  };\n\t  Int128.op_Division = function (lhs, rhs)\n\t  {\n\t    return lhs.divide(rhs);\n\t  };\n\t  Int128.prototype.ToDouble = function ()\n\t  {\n\t    return parseFloat(this.toString()); // This could be something faster\n\t  };\n\t  // end of Int128 section\n\t  /*\n\t  // Uncomment the following two lines if you want to use Int128 outside ClipperLib\n\t  if (typeof(document) !== \"undefined\") window.Int128 = Int128;\n\t  else self.Int128 = Int128;\n\t  */\n\t\n\t\n\t  // ---------------------------------------------\n\t  // Here starts the actual Clipper library:\n\t  // Helper function to support Inheritance in Javascript\n\t\tvar Inherit = function (ce, ce2)\n\t\t{\n\t\t\tvar p;\n\t\t\tif (typeof (Object.getOwnPropertyNames) == 'undefined')\n\t\t\t{\n\t\t\t\tfor (p in ce2.prototype)\n\t\t\t\t\tif (typeof (ce.prototype[p]) == 'undefined' || ce.prototype[p] == Object.prototype[p]) ce.prototype[p] = ce2.prototype[p];\n\t\t\t\tfor (p in ce2)\n\t\t\t\t\tif (typeof (ce[p]) == 'undefined') ce[p] = ce2[p];\n\t\t\t\tce.$baseCtor = ce2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar props = Object.getOwnPropertyNames(ce2.prototype);\n\t\t\t\tfor (var i = 0; i < props.length; i++)\n\t\t\t\t\tif (typeof (Object.getOwnPropertyDescriptor(ce.prototype, props[i])) == 'undefined') Object.defineProperty(ce.prototype, props[i], Object.getOwnPropertyDescriptor(ce2.prototype, props[i]));\n\t\t\t\tfor (p in ce2)\n\t\t\t\t\tif (typeof (ce[p]) == 'undefined') ce[p] = ce2[p];\n\t\t\t\tce.$baseCtor = ce2;\n\t\t\t}\n\t\t};\n\t  ClipperLib.Path = function ()\n\t  {\n\t    return [];\n\t  };\n\t  ClipperLib.Paths = function ()\n\t  {\n\t    return []; // Was previously [[]], but caused problems when pushed\n\t  };\n\t  // Preserves the calling way of original C# Clipper\n\t  // Is essential due to compatibility, because DoublePoint is public class in original C# version\n\t  ClipperLib.DoublePoint = function ()\n\t  {\n\t    var a = arguments;\n\t    this.X = 0;\n\t    this.Y = 0;\n\t    // public DoublePoint(DoublePoint dp)\n\t    // public DoublePoint(IntPoint ip)\n\t    if (a.length == 1)\n\t    {\n\t      this.X = a[0].X;\n\t      this.Y = a[0].Y;\n\t    }\n\t    else if (a.length == 2)\n\t    {\n\t      this.X = a[0];\n\t      this.Y = a[1];\n\t    }\n\t  }; // This is internal faster function when called without arguments\n\t  ClipperLib.DoublePoint0 = function ()\n\t  {\n\t    this.X = 0;\n\t    this.Y = 0;\n\t  };\n\t  // This is internal faster function when called with 1 argument (dp or ip)\n\t  ClipperLib.DoublePoint1 = function (dp)\n\t  {\n\t    this.X = dp.X;\n\t    this.Y = dp.Y;\n\t  };\n\t  // This is internal faster function when called with 2 arguments (x and y)\n\t  ClipperLib.DoublePoint2 = function (x, y)\n\t  {\n\t    this.X = x;\n\t    this.Y = y;\n\t  };\n\t  // PolyTree & PolyNode start\n\t  // -------------------------------\n\t  ClipperLib.PolyNode = function ()\n\t  {\n\t    this.m_Parent = null;\n\t    this.m_polygon = new ClipperLib.Path();\n\t    this.m_Index = 0;\n\t    this.m_jointype = 0;\n\t    this.m_endtype = 0;\n\t    this.m_Childs = [];\n\t    this.IsOpen = false;\n\t  };\n\t  ClipperLib.PolyNode.prototype.IsHoleNode = function ()\n\t  {\n\t    var result = true;\n\t    var node = this.m_Parent;\n\t    while (node !== null)\n\t    {\n\t      result = !result;\n\t      node = node.m_Parent;\n\t    }\n\t    return result;\n\t  };\n\t  ClipperLib.PolyNode.prototype.ChildCount = function ()\n\t  {\n\t    return this.m_Childs.length;\n\t  };\n\t  ClipperLib.PolyNode.prototype.Contour = function ()\n\t  {\n\t    return this.m_polygon;\n\t  };\n\t  ClipperLib.PolyNode.prototype.AddChild = function (Child)\n\t  {\n\t    var cnt = this.m_Childs.length;\n\t    this.m_Childs.push(Child);\n\t    Child.m_Parent = this;\n\t    Child.m_Index = cnt;\n\t  };\n\t  ClipperLib.PolyNode.prototype.GetNext = function ()\n\t  {\n\t    if (this.m_Childs.length > 0)\n\t      return this.m_Childs[0];\n\t    else\n\t      return this.GetNextSiblingUp();\n\t  };\n\t  ClipperLib.PolyNode.prototype.GetNextSiblingUp = function ()\n\t  {\n\t    if (this.m_Parent === null)\n\t      return null;\n\t    else if (this.m_Index == this.m_Parent.m_Childs.length - 1)\n\t      return this.m_Parent.GetNextSiblingUp();\n\t    else\n\t      return this.m_Parent.m_Childs[this.m_Index + 1];\n\t  };\n\t  ClipperLib.PolyNode.prototype.Childs = function ()\n\t  {\n\t    return this.m_Childs;\n\t  };\n\t  ClipperLib.PolyNode.prototype.Parent = function ()\n\t  {\n\t    return this.m_Parent;\n\t  };\n\t  ClipperLib.PolyNode.prototype.IsHole = function ()\n\t  {\n\t    return this.IsHoleNode();\n\t  };\n\t  // PolyTree : PolyNode\n\t  ClipperLib.PolyTree = function ()\n\t  {\n\t    this.m_AllPolys = [];\n\t    ClipperLib.PolyNode.call(this);\n\t  };\n\t  ClipperLib.PolyTree.prototype.Clear = function ()\n\t  {\n\t    for (var i = 0, ilen = this.m_AllPolys.length; i < ilen; i++)\n\t      this.m_AllPolys[i] = null;\n\t    this.m_AllPolys.length = 0;\n\t    this.m_Childs.length = 0;\n\t  };\n\t  ClipperLib.PolyTree.prototype.GetFirst = function ()\n\t  {\n\t    if (this.m_Childs.length > 0)\n\t      return this.m_Childs[0];\n\t    else\n\t      return null;\n\t  };\n\t  ClipperLib.PolyTree.prototype.Total = function ()\n\t  {\n\t\t\tvar result = this.m_AllPolys.length;\n\t\t\t//with negative offsets, ignore the hidden outer polygon ...\n\t\t\tif (result > 0 && this.m_Childs[0] != this.m_AllPolys[0]) result--;\n\t\t\treturn result;\n\t  };\n\t  Inherit(ClipperLib.PolyTree, ClipperLib.PolyNode);\n\t  // -------------------------------\n\t  // PolyTree & PolyNode end\n\t  ClipperLib.Math_Abs_Int64 = ClipperLib.Math_Abs_Int32 = ClipperLib.Math_Abs_Double = function (a)\n\t  {\n\t    return Math.abs(a);\n\t  };\n\t  ClipperLib.Math_Max_Int32_Int32 = function (a, b)\n\t  {\n\t    return Math.max(a, b);\n\t  };\n\t  /*\n\t  -----------------------------------\n\t  cast_32 speedtest: http://jsperf.com/truncate-float-to-integer/2\n\t  -----------------------------------\n\t  */\n\t  if (browser.msie || browser.opera || browser.safari) ClipperLib.Cast_Int32 = function (a)\n\t  {\n\t    return a | 0;\n\t  };\n\t  else ClipperLib.Cast_Int32 = function (a)\n\t  { // eg. browser.chrome || browser.chromium || browser.firefox\n\t    return~~ a;\n\t  };\n\t  /*\n\t  --------------------------\n\t  cast_64 speedtests: http://jsperf.com/truncate-float-to-integer\n\t  Chrome: bitwise_not_floor\n\t  Firefox17: toInteger (typeof test)\n\t  IE9: bitwise_or_floor\n\t  IE7 and IE8: to_parseint\n\t  Chromium: to_floor_or_ceil\n\t  Firefox3: to_floor_or_ceil\n\t  Firefox15: to_floor_or_ceil\n\t  Opera: to_floor_or_ceil\n\t  Safari: to_floor_or_ceil\n\t  --------------------------\n\t  */\n\t  if (browser.chrome) ClipperLib.Cast_Int64 = function (a)\n\t  {\n\t    if (a < -2147483648 || a > 2147483647)\n\t      return a < 0 ? Math.ceil(a) : Math.floor(a);\n\t    else return~~ a;\n\t  };\n\t  else if (browser.firefox && typeof (Number.toInteger) == \"function\") ClipperLib.Cast_Int64 = function (a)\n\t  {\n\t    return Number.toInteger(a);\n\t  };\n\t  else if (browser.msie7 || browser.msie8) ClipperLib.Cast_Int64 = function (a)\n\t  {\n\t    return parseInt(a, 10);\n\t  };\n\t  else if (browser.msie) ClipperLib.Cast_Int64 = function (a)\n\t  {\n\t    if (a < -2147483648 || a > 2147483647)\n\t      return a < 0 ? Math.ceil(a) : Math.floor(a);\n\t    return a | 0;\n\t  };\n\t  // eg. browser.chromium || browser.firefox || browser.opera || browser.safari\n\t  else ClipperLib.Cast_Int64 = function (a)\n\t  {\n\t    return a < 0 ? Math.ceil(a) : Math.floor(a);\n\t  };\n\t  ClipperLib.Clear = function (a)\n\t  {\n\t    a.length = 0;\n\t  };\n\t  //ClipperLib.MaxSteps = 64; // How many steps at maximum in arc in BuildArc() function\n\t  ClipperLib.PI = 3.141592653589793;\n\t  ClipperLib.PI2 = 2 * 3.141592653589793;\n\t  ClipperLib.IntPoint = function ()\n\t  {\n\t    var a = arguments,\n\t      alen = a.length;\n\t    this.X = 0;\n\t    this.Y = 0;\n\t    if (use_xyz)\n\t    {\n\t      this.Z = 0;\n\t      if (alen == 3) // public IntPoint(cInt x, cInt y, cInt z = 0)\n\t      {\n\t        this.X = a[0];\n\t        this.Y = a[1];\n\t        this.Z = a[2];\n\t      }\n\t      else if (alen == 2) // public IntPoint(cInt x, cInt y)\n\t      {\n\t        this.X = a[0];\n\t        this.Y = a[1];\n\t        this.Z = 0;\n\t      }\n\t      else if (alen == 1)\n\t      {\n\t        if (a[0] instanceof ClipperLib.DoublePoint) // public IntPoint(DoublePoint dp)\n\t        {\n\t          var dp = a[0];\n\t          this.X = ClipperLib.Clipper.Round(dp.X);\n\t          this.Y = ClipperLib.Clipper.Round(dp.Y);\n\t          this.Z = 0;\n\t        }\n\t        else // public IntPoint(IntPoint pt)\n\t        {\n\t          var pt = a[0];\n\t          if (typeof (pt.Z) == \"undefined\") pt.Z = 0;\n\t          this.X = pt.X;\n\t          this.Y = pt.Y;\n\t          this.Z = pt.Z;\n\t        }\n\t      }\n\t      else // public IntPoint()\n\t      {\n\t        this.X = 0;\n\t        this.Y = 0;\n\t        this.Z = 0;\n\t      }\n\t    }\n\t    else // if (!use_xyz)\n\t    {\n\t      if (alen == 2) // public IntPoint(cInt X, cInt Y)\n\t      {\n\t        this.X = a[0];\n\t        this.Y = a[1];\n\t      }\n\t      else if (alen == 1)\n\t      {\n\t        if (a[0] instanceof ClipperLib.DoublePoint) // public IntPoint(DoublePoint dp)\n\t        {\n\t          var dp = a[0];\n\t          this.X = ClipperLib.Clipper.Round(dp.X);\n\t          this.Y = ClipperLib.Clipper.Round(dp.Y);\n\t        }\n\t        else // public IntPoint(IntPoint pt)\n\t        {\n\t          var pt = a[0];\n\t          this.X = pt.X;\n\t          this.Y = pt.Y;\n\t        }\n\t      }\n\t      else // public IntPoint(IntPoint pt)\n\t      {\n\t        this.X = 0;\n\t        this.Y = 0;\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.IntPoint.op_Equality = function (a, b)\n\t  {\n\t    //return a == b;\n\t    return a.X == b.X && a.Y == b.Y;\n\t  };\n\t  ClipperLib.IntPoint.op_Inequality = function (a, b)\n\t  {\n\t    //return a != b;\n\t    return a.X != b.X || a.Y != b.Y;\n\t  };\n\t  /*\n\t  ClipperLib.IntPoint.prototype.Equals = function (obj)\n\t  {\n\t    if (obj === null)\n\t        return false;\n\t    if (obj instanceof ClipperLib.IntPoint)\n\t    {\n\t        var a = Cast(obj, ClipperLib.IntPoint);\n\t        return (this.X == a.X) && (this.Y == a.Y);\n\t    }\n\t    else\n\t        return false;\n\t  };\n\t*/\n\t  if (use_xyz)\n\t  {\n\t    ClipperLib.IntPoint0 = function ()\n\t    {\n\t      this.X = 0;\n\t      this.Y = 0;\n\t      this.Z = 0;\n\t    };\n\t    ClipperLib.IntPoint1 = function (pt)\n\t    {\n\t      this.X = pt.X;\n\t      this.Y = pt.Y;\n\t      this.Z = pt.Z;\n\t    };\n\t    ClipperLib.IntPoint1dp = function (dp)\n\t    {\n\t      this.X = ClipperLib.Clipper.Round(dp.X);\n\t      this.Y = ClipperLib.Clipper.Round(dp.Y);\n\t      this.Z = 0;\n\t    };\n\t    ClipperLib.IntPoint2 = function (x, y)\n\t    {\n\t      this.X = x;\n\t      this.Y = y;\n\t      this.Z = 0;\n\t    };\n\t    ClipperLib.IntPoint3 = function (x, y, z)\n\t    {\n\t      this.X = x;\n\t      this.Y = y;\n\t      this.Z = z;\n\t    };\n\t  }\n\t  else // if (!use_xyz)\n\t  {\n\t    ClipperLib.IntPoint0 = function ()\n\t    {\n\t      this.X = 0;\n\t      this.Y = 0;\n\t    };\n\t    ClipperLib.IntPoint1 = function (pt)\n\t    {\n\t      this.X = pt.X;\n\t      this.Y = pt.Y;\n\t    };\n\t    ClipperLib.IntPoint1dp = function (dp)\n\t    {\n\t      this.X = ClipperLib.Clipper.Round(dp.X);\n\t      this.Y = ClipperLib.Clipper.Round(dp.Y);\n\t    };\n\t    ClipperLib.IntPoint2 = function (x, y)\n\t    {\n\t      this.X = x;\n\t      this.Y = y;\n\t    };\n\t  }\n\t  ClipperLib.IntRect = function ()\n\t  {\n\t    var a = arguments,\n\t      alen = a.length;\n\t    if (alen == 4) // function (l, t, r, b)\n\t    {\n\t      this.left = a[0];\n\t      this.top = a[1];\n\t      this.right = a[2];\n\t      this.bottom = a[3];\n\t    }\n\t    else if (alen == 1) // function (ir)\n\t    {\n\t      this.left = ir.left;\n\t      this.top = ir.top;\n\t      this.right = ir.right;\n\t      this.bottom = ir.bottom;\n\t    }\n\t    else // function ()\n\t    {\n\t      this.left = 0;\n\t      this.top = 0;\n\t      this.right = 0;\n\t      this.bottom = 0;\n\t    }\n\t  };\n\t  ClipperLib.IntRect0 = function ()\n\t  {\n\t    this.left = 0;\n\t    this.top = 0;\n\t    this.right = 0;\n\t    this.bottom = 0;\n\t  };\n\t  ClipperLib.IntRect1 = function (ir)\n\t  {\n\t    this.left = ir.left;\n\t    this.top = ir.top;\n\t    this.right = ir.right;\n\t    this.bottom = ir.bottom;\n\t  };\n\t  ClipperLib.IntRect4 = function (l, t, r, b)\n\t  {\n\t    this.left = l;\n\t    this.top = t;\n\t    this.right = r;\n\t    this.bottom = b;\n\t  };\n\t  ClipperLib.ClipType = {\n\t    ctIntersection: 0,\n\t    ctUnion: 1,\n\t    ctDifference: 2,\n\t    ctXor: 3\n\t  };\n\t  ClipperLib.PolyType = {\n\t    ptSubject: 0,\n\t    ptClip: 1\n\t  };\n\t  ClipperLib.PolyFillType = {\n\t    pftEvenOdd: 0,\n\t    pftNonZero: 1,\n\t    pftPositive: 2,\n\t    pftNegative: 3\n\t  };\n\t  ClipperLib.JoinType = {\n\t    jtSquare: 0,\n\t    jtRound: 1,\n\t    jtMiter: 2\n\t  };\n\t  ClipperLib.EndType = {\n\t    etOpenSquare: 0,\n\t    etOpenRound: 1,\n\t    etOpenButt: 2,\n\t    etClosedLine: 3,\n\t    etClosedPolygon: 4\n\t  };\n\t  ClipperLib.EdgeSide = {\n\t    esLeft: 0,\n\t    esRight: 1\n\t  };\n\t  ClipperLib.Direction = {\n\t    dRightToLeft: 0,\n\t    dLeftToRight: 1\n\t  };\n\t  ClipperLib.TEdge = function ()\n\t  {\n\t    this.Bot = new ClipperLib.IntPoint();\n\t    this.Curr = new ClipperLib.IntPoint();\n\t    this.Top = new ClipperLib.IntPoint();\n\t    this.Delta = new ClipperLib.IntPoint();\n\t    this.Dx = 0;\n\t    this.PolyTyp = ClipperLib.PolyType.ptSubject;\n\t    this.Side = ClipperLib.EdgeSide.esLeft;\n\t    this.WindDelta = 0;\n\t    this.WindCnt = 0;\n\t    this.WindCnt2 = 0;\n\t    this.OutIdx = 0;\n\t    this.Next = null;\n\t    this.Prev = null;\n\t    this.NextInLML = null;\n\t    this.NextInAEL = null;\n\t    this.PrevInAEL = null;\n\t    this.NextInSEL = null;\n\t    this.PrevInSEL = null;\n\t  };\n\t  ClipperLib.IntersectNode = function ()\n\t  {\n\t    this.Edge1 = null;\n\t    this.Edge2 = null;\n\t    this.Pt = new ClipperLib.IntPoint();\n\t  };\n\t  ClipperLib.MyIntersectNodeSort = function () {};\n\t  ClipperLib.MyIntersectNodeSort.Compare = function (node1, node2)\n\t  {\n\t    var i = node2.Pt.Y - node1.Pt.Y;\n\t    if (i > 0) return 1;\n\t    else if (i < 0) return -1;\n\t    else return 0;\n\t  };\n\t\n\t  ClipperLib.LocalMinima = function ()\n\t  {\n\t    this.Y = 0;\n\t    this.LeftBound = null;\n\t    this.RightBound = null;\n\t    this.Next = null;\n\t  };\n\t  ClipperLib.Scanbeam = function ()\n\t  {\n\t    this.Y = 0;\n\t    this.Next = null;\n\t  };\n\t  ClipperLib.OutRec = function ()\n\t  {\n\t    this.Idx = 0;\n\t    this.IsHole = false;\n\t    this.IsOpen = false;\n\t    this.FirstLeft = null;\n\t    this.Pts = null;\n\t    this.BottomPt = null;\n\t    this.PolyNode = null;\n\t  };\n\t  ClipperLib.OutPt = function ()\n\t  {\n\t    this.Idx = 0;\n\t    this.Pt = new ClipperLib.IntPoint();\n\t    this.Next = null;\n\t    this.Prev = null;\n\t  };\n\t  ClipperLib.Join = function ()\n\t  {\n\t    this.OutPt1 = null;\n\t    this.OutPt2 = null;\n\t    this.OffPt = new ClipperLib.IntPoint();\n\t  };\n\t  ClipperLib.ClipperBase = function ()\n\t  {\n\t    this.m_MinimaList = null;\n\t    this.m_CurrentLM = null;\n\t    this.m_edges = new Array();\n\t    this.m_UseFullRange = false;\n\t    this.m_HasOpenPaths = false;\n\t    this.PreserveCollinear = false;\n\t    this.m_MinimaList = null;\n\t    this.m_CurrentLM = null;\n\t    this.m_UseFullRange = false;\n\t    this.m_HasOpenPaths = false;\n\t  };\n\t  // Ranges are in original C# too high for Javascript (in current state 2013 september):\n\t  // protected const double horizontal = -3.4E+38;\n\t  // internal const cInt loRange = 0x3FFFFFFF; // = 1073741823 = sqrt(2^63 -1)/2\n\t  // internal const cInt hiRange = 0x3FFFFFFFFFFFFFFFL; // = 4611686018427387903 = sqrt(2^127 -1)/2\n\t  // So had to adjust them to more suitable for Javascript.\n\t  // If JS some day supports truly 64-bit integers, then these ranges can be as in C#\n\t  // and biginteger library can be more simpler (as then 128bit can be represented as two 64bit numbers)\n\t  ClipperLib.ClipperBase.horizontal = -9007199254740992; //-2^53\n\t  ClipperLib.ClipperBase.Skip = -2;\n\t  ClipperLib.ClipperBase.Unassigned = -1;\n\t  ClipperLib.ClipperBase.tolerance = 1E-20;\n\t  if (use_int32)\n\t  {\n\t    ClipperLib.ClipperBase.loRange = 0x7FFF;\n\t    ClipperLib.ClipperBase.hiRange = 0x7FFF;\n\t  }\n\t  else\n\t  {\n\t    ClipperLib.ClipperBase.loRange = 47453132; // sqrt(2^53 -1)/2\n\t    ClipperLib.ClipperBase.hiRange = 4503599627370495; // sqrt(2^106 -1)/2\n\t  }\n\t\n\t  ClipperLib.ClipperBase.near_zero = function (val)\n\t  {\n\t    return (val > -ClipperLib.ClipperBase.tolerance) && (val < ClipperLib.ClipperBase.tolerance);\n\t  };\n\t  ClipperLib.ClipperBase.IsHorizontal = function (e)\n\t  {\n\t    return e.Delta.Y === 0;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.PointIsVertex = function (pt, pp)\n\t  {\n\t    var pp2 = pp;\n\t    do {\n\t      if (ClipperLib.IntPoint.op_Equality(pp2.Pt, pt))\n\t        return true;\n\t      pp2 = pp2.Next;\n\t    }\n\t    while (pp2 != pp)\n\t    return false;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.PointOnLineSegment = function (pt, linePt1, linePt2, UseFullRange)\n\t  {\n\t    if (UseFullRange)\n\t      return ((pt.X == linePt1.X) && (pt.Y == linePt1.Y)) ||\n\t        ((pt.X == linePt2.X) && (pt.Y == linePt2.Y)) ||\n\t        (((pt.X > linePt1.X) == (pt.X < linePt2.X)) &&\n\t        ((pt.Y > linePt1.Y) == (pt.Y < linePt2.Y)) &&\n\t        (Int128.op_Equality(Int128.Int128Mul((pt.X - linePt1.X), (linePt2.Y - linePt1.Y)),\n\t          Int128.Int128Mul((linePt2.X - linePt1.X), (pt.Y - linePt1.Y)))));\n\t    else\n\t      return ((pt.X == linePt1.X) && (pt.Y == linePt1.Y)) || ((pt.X == linePt2.X) && (pt.Y == linePt2.Y)) || (((pt.X > linePt1.X) == (pt.X < linePt2.X)) && ((pt.Y > linePt1.Y) == (pt.Y < linePt2.Y)) && ((pt.X - linePt1.X) * (linePt2.Y - linePt1.Y) == (linePt2.X - linePt1.X) * (pt.Y - linePt1.Y)));\n\t  };\n\t  ClipperLib.ClipperBase.prototype.PointOnPolygon = function (pt, pp, UseFullRange)\n\t  {\n\t    var pp2 = pp;\n\t    while (true)\n\t    {\n\t      if (this.PointOnLineSegment(pt, pp2.Pt, pp2.Next.Pt, UseFullRange))\n\t        return true;\n\t      pp2 = pp2.Next;\n\t      if (pp2 == pp)\n\t        break;\n\t    }\n\t    return false;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.SlopesEqual = ClipperLib.ClipperBase.SlopesEqual = function ()\n\t  {\n\t    var a = arguments,\n\t      alen = a.length;\n\t    var e1, e2, pt1, pt2, pt3, pt4, UseFullRange;\n\t    if (alen == 3) // function (e1, e2, UseFullRange)\n\t    {\n\t      e1 = a[0];\n\t      e2 = a[1];\n\t      UseFullRange = a[2];\n\t      if (UseFullRange)\n\t        return Int128.op_Equality(Int128.Int128Mul(e1.Delta.Y, e2.Delta.X), Int128.Int128Mul(e1.Delta.X, e2.Delta.Y));\n\t      else\n\t        return ClipperLib.Cast_Int64((e1.Delta.Y) * (e2.Delta.X)) == ClipperLib.Cast_Int64((e1.Delta.X) * (e2.Delta.Y));\n\t    }\n\t    else if (alen == 4) // function (pt1, pt2, pt3, UseFullRange)\n\t    {\n\t      pt1 = a[0];\n\t      pt2 = a[1];\n\t      pt3 = a[2];\n\t      UseFullRange = a[3];\n\t      if (UseFullRange)\n\t        return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt2.X - pt3.X), Int128.Int128Mul(pt1.X - pt2.X, pt2.Y - pt3.Y));\n\t      else\n\t        return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt2.X - pt3.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt2.Y - pt3.Y)) === 0;\n\t    }\n\t    else // function (pt1, pt2, pt3, pt4, UseFullRange)\n\t    {\n\t      pt1 = a[0];\n\t      pt2 = a[1];\n\t      pt3 = a[2];\n\t      pt4 = a[3];\n\t      UseFullRange = a[4];\n\t      if (UseFullRange)\n\t        return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt3.X - pt4.X), Int128.Int128Mul(pt1.X - pt2.X, pt3.Y - pt4.Y));\n\t      else\n\t        return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt3.X - pt4.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt3.Y - pt4.Y)) === 0;\n\t    }\n\t  };\n\t  ClipperLib.ClipperBase.SlopesEqual3 = function (e1, e2, UseFullRange)\n\t  {\n\t    if (UseFullRange)\n\t      return Int128.op_Equality(Int128.Int128Mul(e1.Delta.Y, e2.Delta.X), Int128.Int128Mul(e1.Delta.X, e2.Delta.Y));\n\t    else\n\t      return ClipperLib.Cast_Int64((e1.Delta.Y) * (e2.Delta.X)) == ClipperLib.Cast_Int64((e1.Delta.X) * (e2.Delta.Y));\n\t  };\n\t  ClipperLib.ClipperBase.SlopesEqual4 = function (pt1, pt2, pt3, UseFullRange)\n\t  {\n\t    if (UseFullRange)\n\t      return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt2.X - pt3.X), Int128.Int128Mul(pt1.X - pt2.X, pt2.Y - pt3.Y));\n\t    else\n\t      return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt2.X - pt3.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt2.Y - pt3.Y)) === 0;\n\t  };\n\t  ClipperLib.ClipperBase.SlopesEqual5 = function (pt1, pt2, pt3, pt4, UseFullRange)\n\t  {\n\t    if (UseFullRange)\n\t      return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt3.X - pt4.X), Int128.Int128Mul(pt1.X - pt2.X, pt3.Y - pt4.Y));\n\t    else\n\t      return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt3.X - pt4.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt3.Y - pt4.Y)) === 0;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.Clear = function ()\n\t  {\n\t    this.DisposeLocalMinimaList();\n\t    for (var i = 0, ilen = this.m_edges.length; i < ilen; ++i)\n\t    {\n\t      for (var j = 0, jlen = this.m_edges[i].length; j < jlen; ++j)\n\t        this.m_edges[i][j] = null;\n\t      ClipperLib.Clear(this.m_edges[i]);\n\t    }\n\t    ClipperLib.Clear(this.m_edges);\n\t    this.m_UseFullRange = false;\n\t    this.m_HasOpenPaths = false;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.DisposeLocalMinimaList = function ()\n\t  {\n\t    while (this.m_MinimaList !== null)\n\t    {\n\t      var tmpLm = this.m_MinimaList.Next;\n\t      this.m_MinimaList = null;\n\t      this.m_MinimaList = tmpLm;\n\t    }\n\t    this.m_CurrentLM = null;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.RangeTest = function (Pt, useFullRange)\n\t  {\n\t    if (useFullRange.Value)\n\t    {\n\t      if (Pt.X > ClipperLib.ClipperBase.hiRange || Pt.Y > ClipperLib.ClipperBase.hiRange || -Pt.X > ClipperLib.ClipperBase.hiRange || -Pt.Y > ClipperLib.ClipperBase.hiRange)\n\t        ClipperLib.Error(\"Coordinate outside allowed range in RangeTest().\");\n\t    }\n\t    else if (Pt.X > ClipperLib.ClipperBase.loRange || Pt.Y > ClipperLib.ClipperBase.loRange || -Pt.X > ClipperLib.ClipperBase.loRange || -Pt.Y > ClipperLib.ClipperBase.loRange)\n\t    {\n\t      useFullRange.Value = true;\n\t      this.RangeTest(Pt, useFullRange);\n\t    }\n\t  };\n\t  ClipperLib.ClipperBase.prototype.InitEdge = function (e, eNext, ePrev, pt)\n\t  {\n\t    e.Next = eNext;\n\t    e.Prev = ePrev;\n\t    //e.Curr = pt;\n\t    e.Curr.X = pt.X;\n\t    e.Curr.Y = pt.Y;\n\t    e.OutIdx = -1;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.InitEdge2 = function (e, polyType)\n\t  {\n\t    if (e.Curr.Y >= e.Next.Curr.Y)\n\t    {\n\t      //e.Bot = e.Curr;\n\t      e.Bot.X = e.Curr.X;\n\t      e.Bot.Y = e.Curr.Y;\n\t      //e.Top = e.Next.Curr;\n\t      e.Top.X = e.Next.Curr.X;\n\t      e.Top.Y = e.Next.Curr.Y;\n\t    }\n\t    else\n\t    {\n\t      //e.Top = e.Curr;\n\t      e.Top.X = e.Curr.X;\n\t      e.Top.Y = e.Curr.Y;\n\t      //e.Bot = e.Next.Curr;\n\t      e.Bot.X = e.Next.Curr.X;\n\t      e.Bot.Y = e.Next.Curr.Y;\n\t    }\n\t    this.SetDx(e);\n\t    e.PolyTyp = polyType;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.FindNextLocMin = function (E)\n\t  {\n\t    var E2;\n\t    for (;;)\n\t    {\n\t      while (ClipperLib.IntPoint.op_Inequality(E.Bot, E.Prev.Bot) || ClipperLib.IntPoint.op_Equality(E.Curr, E.Top))\n\t        E = E.Next;\n\t      if (E.Dx != ClipperLib.ClipperBase.horizontal && E.Prev.Dx != ClipperLib.ClipperBase.horizontal)\n\t        break;\n\t      while (E.Prev.Dx == ClipperLib.ClipperBase.horizontal)\n\t        E = E.Prev;\n\t      E2 = E;\n\t      while (E.Dx == ClipperLib.ClipperBase.horizontal)\n\t        E = E.Next;\n\t      if (E.Top.Y == E.Prev.Bot.Y)\n\t        continue;\n\t      //ie just an intermediate horz.\n\t      if (E2.Prev.Bot.X < E.Bot.X)\n\t        E = E2;\n\t      break;\n\t    }\n\t    return E;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.ProcessBound = function (E, LeftBoundIsForward)\n\t  {\n\t    var EStart;\n\t    var Result = E;\n\t    var Horz;\n\t\n\t      if (Result.OutIdx == ClipperLib.ClipperBase.Skip)\n\t      {\n\t        //check if there are edges beyond the skip edge in the bound and if so\n\t        //create another LocMin and calling ProcessBound once more ...\n\t        E = Result;\n\t        if (LeftBoundIsForward)\n\t        {\n\t          while (E.Top.Y == E.Next.Bot.Y) E = E.Next;\n\t          while (E != Result && E.Dx == ClipperLib.ClipperBase.horizontal) E = E.Prev;\n\t        }\n\t        else\n\t        {\n\t          while (E.Top.Y == E.Prev.Bot.Y) E = E.Prev;\n\t          while (E != Result && E.Dx == ClipperLib.ClipperBase.horizontal) E = E.Next;\n\t        }\n\t        if (E == Result)\n\t        {\n\t          if (LeftBoundIsForward) Result = E.Next;\n\t          else Result = E.Prev;\n\t        }\n\t        else\n\t        {\n\t          //there are more edges in the bound beyond result starting with E\n\t          if (LeftBoundIsForward)\n\t            E = Result.Next;\n\t          else\n\t            E = Result.Prev;\n\t          var locMin = new ClipperLib.LocalMinima();\n\t          locMin.Next = null;\n\t          locMin.Y = E.Bot.Y;\n\t          locMin.LeftBound = null;\n\t          locMin.RightBound = E;\n\t          E.WindDelta = 0;\n\t          Result = this.ProcessBound(E, LeftBoundIsForward);\n\t          this.InsertLocalMinima(locMin);\n\t        }\n\t        return Result;\n\t      }\n\t\n\t      if (E.Dx == ClipperLib.ClipperBase.horizontal)\n\t      {\n\t        //We need to be careful with open paths because this may not be a\n\t        //true local minima (ie E may be following a skip edge).\n\t        //Also, consecutive horz. edges may start heading left before going right.\n\t        if (LeftBoundIsForward) EStart = E.Prev;\n\t        else EStart = E.Next;\n\t        if (EStart.OutIdx != ClipperLib.ClipperBase.Skip)\n\t        {\n\t          if (EStart.Dx == ClipperLib.ClipperBase.horizontal) //ie an adjoining horizontal skip edge\n\t          {\n\t            if (EStart.Bot.X != E.Bot.X && EStart.Top.X != E.Bot.X)\n\t              this.ReverseHorizontal(E);\n\t          }\n\t          else if (EStart.Bot.X != E.Bot.X)\n\t            this.ReverseHorizontal(E);\n\t        }\n\t      }\n\t\n\t      EStart = E;\n\t      if (LeftBoundIsForward)\n\t      {\n\t        while (Result.Top.Y == Result.Next.Bot.Y && Result.Next.OutIdx != ClipperLib.ClipperBase.Skip)\n\t          Result = Result.Next;\n\t        if (Result.Dx == ClipperLib.ClipperBase.horizontal && Result.Next.OutIdx != ClipperLib.ClipperBase.Skip)\n\t        {\n\t          //nb: at the top of a bound, horizontals are added to the bound\n\t          //only when the preceding edge attaches to the horizontal's left vertex\n\t          //unless a Skip edge is encountered when that becomes the top divide\n\t          Horz = Result;\n\t          while (Horz.Prev.Dx == ClipperLib.ClipperBase.horizontal)\n\t            Horz = Horz.Prev;\n\t          if (Horz.Prev.Top.X == Result.Next.Top.X)\n\t          {\n\t            if (!LeftBoundIsForward)\n\t              Result = Horz.Prev;\n\t          }\n\t          else if (Horz.Prev.Top.X > Result.Next.Top.X)\n\t            Result = Horz.Prev;\n\t        }\n\t        while (E != Result)\n\t        {\n\t          E.NextInLML = E.Next;\n\t          if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Prev.Top.X)\n\t            this.ReverseHorizontal(E);\n\t          E = E.Next;\n\t        }\n\t        if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Prev.Top.X)\n\t          this.ReverseHorizontal(E);\n\t        Result = Result.Next;\n\t        //move to the edge just beyond current bound\n\t      }\n\t      else\n\t      {\n\t        while (Result.Top.Y == Result.Prev.Bot.Y && Result.Prev.OutIdx != ClipperLib.ClipperBase.Skip)\n\t          Result = Result.Prev;\n\t        if (Result.Dx == ClipperLib.ClipperBase.horizontal && Result.Prev.OutIdx != ClipperLib.ClipperBase.Skip)\n\t        {\n\t          Horz = Result;\n\t          while (Horz.Next.Dx == ClipperLib.ClipperBase.horizontal)\n\t            Horz = Horz.Next;\n\t          if (Horz.Next.Top.X == Result.Prev.Top.X)\n\t          {\n\t            if (!LeftBoundIsForward)\n\t              Result = Horz.Next;\n\t          }\n\t          else if (Horz.Next.Top.X > Result.Prev.Top.X)\n\t            Result = Horz.Next;\n\t        }\n\t        while (E != Result)\n\t        {\n\t          E.NextInLML = E.Prev;\n\t          if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Next.Top.X)\n\t            this.ReverseHorizontal(E);\n\t          E = E.Prev;\n\t        }\n\t        if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Next.Top.X)\n\t          this.ReverseHorizontal(E);\n\t        Result = Result.Prev;\n\t        //move to the edge just beyond current bound\n\t      }\n\t\n\t    return Result;\n\t  };\n\t\n\t  ClipperLib.ClipperBase.prototype.AddPath = function (pg, polyType, Closed)\n\t  {\n\t    if (use_lines)\n\t    {\n\t      if (!Closed && polyType == ClipperLib.PolyType.ptClip)\n\t        ClipperLib.Error(\"AddPath: Open paths must be subject.\");\n\t    }\n\t    else\n\t    {\n\t      if (!Closed)\n\t        ClipperLib.Error(\"AddPath: Open paths have been disabled.\");\n\t    }\n\t    var highI = pg.length - 1;\n\t    if (Closed)\n\t      while (highI > 0 && (ClipperLib.IntPoint.op_Equality(pg[highI], pg[0])))\n\t    --highI;\n\t    while (highI > 0 && (ClipperLib.IntPoint.op_Equality(pg[highI], pg[highI - 1])))\n\t    --highI;\n\t    if ((Closed && highI < 2) || (!Closed && highI < 1))\n\t      return false;\n\t    //create a new edge array ...\n\t    var edges = new Array();\n\t    for (var i = 0; i <= highI; i++)\n\t      edges.push(new ClipperLib.TEdge());\n\t    var IsFlat = true;\n\t    //1. Basic (first) edge initialization ...\n\t\n\t    //edges[1].Curr = pg[1];\n\t    edges[1].Curr.X = pg[1].X;\n\t    edges[1].Curr.Y = pg[1].Y;\n\t\n\t    var $1 = {Value: this.m_UseFullRange};\n\t    this.RangeTest(pg[0], $1);\n\t    this.m_UseFullRange = $1.Value;\n\t\n\t    $1.Value = this.m_UseFullRange;\n\t    this.RangeTest(pg[highI], $1);\n\t    this.m_UseFullRange = $1.Value;\n\t\n\t    this.InitEdge(edges[0], edges[1], edges[highI], pg[0]);\n\t    this.InitEdge(edges[highI], edges[0], edges[highI - 1], pg[highI]);\n\t    for (var i = highI - 1; i >= 1; --i)\n\t    {\n\t      $1.Value = this.m_UseFullRange;\n\t      this.RangeTest(pg[i], $1);\n\t      this.m_UseFullRange = $1.Value;\n\t\n\t      this.InitEdge(edges[i], edges[i + 1], edges[i - 1], pg[i]);\n\t    }\n\t\n\t    var eStart = edges[0];\n\t    //2. Remove duplicate vertices, and (when closed) collinear edges ...\n\t    var E = eStart,\n\t      eLoopStop = eStart;\n\t    for (;;)\n\t    {\n\t    //console.log(E.Next, eStart);\n\t    \t//nb: allows matching start and end points when not Closed ...\n\t      if (E.Curr == E.Next.Curr && (Closed || E.Next != eStart))\n\t      {\n\t        if (E == E.Next)\n\t          break;\n\t        if (E == eStart)\n\t          eStart = E.Next;\n\t        E = this.RemoveEdge(E);\n\t        eLoopStop = E;\n\t        continue;\n\t      }\n\t      if (E.Prev == E.Next)\n\t        break;\n\t      else if (Closed && ClipperLib.ClipperBase.SlopesEqual(E.Prev.Curr, E.Curr, E.Next.Curr, this.m_UseFullRange) && (!this.PreserveCollinear || !this.Pt2IsBetweenPt1AndPt3(E.Prev.Curr, E.Curr, E.Next.Curr)))\n\t      {\n\t        //Collinear edges are allowed for open paths but in closed paths\n\t        //the default is to merge adjacent collinear edges into a single edge.\n\t        //However, if the PreserveCollinear property is enabled, only overlapping\n\t        //collinear edges (ie spikes) will be removed from closed paths.\n\t        if (E == eStart)\n\t          eStart = E.Next;\n\t        E = this.RemoveEdge(E);\n\t        E = E.Prev;\n\t        eLoopStop = E;\n\t        continue;\n\t      }\n\t      E = E.Next;\n\t      if ((E == eLoopStop) || (!Closed && E.Next == eStart)) break;\n\t    }\n\t    if ((!Closed && (E == E.Next)) || (Closed && (E.Prev == E.Next)))\n\t      return false;\n\t    if (!Closed)\n\t    {\n\t      this.m_HasOpenPaths = true;\n\t      eStart.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n\t    }\n\t    //3. Do second stage of edge initialization ...\n\t    E = eStart;\n\t    do {\n\t      this.InitEdge2(E, polyType);\n\t      E = E.Next;\n\t      if (IsFlat && E.Curr.Y != eStart.Curr.Y)\n\t        IsFlat = false;\n\t    }\n\t    while (E != eStart)\n\t    //4. Finally, add edge bounds to LocalMinima list ...\n\t    //Totally flat paths must be handled differently when adding them\n\t    //to LocalMinima list to avoid endless loops etc ...\n\t    if (IsFlat)\n\t    {\n\t      if (Closed)\n\t        return false;\n\t      E.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n\t      if (E.Prev.Bot.X < E.Prev.Top.X)\n\t        this.ReverseHorizontal(E.Prev);\n\t      var locMin = new ClipperLib.LocalMinima();\n\t      locMin.Next = null;\n\t      locMin.Y = E.Bot.Y;\n\t      locMin.LeftBound = null;\n\t      locMin.RightBound = E;\n\t      locMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n\t      locMin.RightBound.WindDelta = 0;\n\t      while (E.Next.OutIdx != ClipperLib.ClipperBase.Skip)\n\t      {\n\t        E.NextInLML = E.Next;\n\t        if (E.Bot.X != E.Prev.Top.X)\n\t          this.ReverseHorizontal(E);\n\t        E = E.Next;\n\t      }\n\t      this.InsertLocalMinima(locMin);\n\t      this.m_edges.push(edges);\n\t      return true;\n\t    }\n\t    this.m_edges.push(edges);\n\t    var leftBoundIsForward;\n\t    var EMin = null;\n\t\n\t\t\t//workaround to avoid an endless loop in the while loop below when\n\t    //open paths have matching start and end points ...\n\t    if(ClipperLib.IntPoint.op_Equality(E.Prev.Bot, E.Prev.Top))\n\t    \tE = E.Next;\n\t\n\t    for (;;)\n\t    {\n\t      E = this.FindNextLocMin(E);\n\t      if (E == EMin)\n\t        break;\n\t      else if (EMin == null)\n\t        EMin = E;\n\t      //E and E.Prev now share a local minima (left aligned if horizontal).\n\t      //Compare their slopes to find which starts which bound ...\n\t      var locMin = new ClipperLib.LocalMinima();\n\t      locMin.Next = null;\n\t      locMin.Y = E.Bot.Y;\n\t      if (E.Dx < E.Prev.Dx)\n\t      {\n\t        locMin.LeftBound = E.Prev;\n\t        locMin.RightBound = E;\n\t        leftBoundIsForward = false;\n\t        //Q.nextInLML = Q.prev\n\t      }\n\t      else\n\t      {\n\t        locMin.LeftBound = E;\n\t        locMin.RightBound = E.Prev;\n\t        leftBoundIsForward = true;\n\t        //Q.nextInLML = Q.next\n\t      }\n\t      locMin.LeftBound.Side = ClipperLib.EdgeSide.esLeft;\n\t      locMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n\t      if (!Closed)\n\t        locMin.LeftBound.WindDelta = 0;\n\t      else if (locMin.LeftBound.Next == locMin.RightBound)\n\t        locMin.LeftBound.WindDelta = -1;\n\t      else\n\t        locMin.LeftBound.WindDelta = 1;\n\t      locMin.RightBound.WindDelta = -locMin.LeftBound.WindDelta;\n\t      E = this.ProcessBound(locMin.LeftBound, leftBoundIsForward);\n\t      if (E.OutIdx == ClipperLib.ClipperBase.Skip)\n\t      \tE = this.ProcessBound(E, leftBoundIsForward);\n\t      var E2 = this.ProcessBound(locMin.RightBound, !leftBoundIsForward);\n\t      if (E2.OutIdx == ClipperLib.ClipperBase.Skip) E2 = this.ProcessBound(E2, !leftBoundIsForward);\n\t      if (locMin.LeftBound.OutIdx == ClipperLib.ClipperBase.Skip)\n\t        locMin.LeftBound = null;\n\t      else if (locMin.RightBound.OutIdx == ClipperLib.ClipperBase.Skip)\n\t        locMin.RightBound = null;\n\t      this.InsertLocalMinima(locMin);\n\t      if (!leftBoundIsForward)\n\t        E = E2;\n\t    }\n\t    return true;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.AddPaths = function (ppg, polyType, closed)\n\t  {\n\t    //  console.log(\"-------------------------------------------\");\n\t    //  console.log(JSON.stringify(ppg));\n\t    var result = false;\n\t    for (var i = 0, ilen = ppg.length; i < ilen; ++i)\n\t      if (this.AddPath(ppg[i], polyType, closed))\n\t        result = true;\n\t    return result;\n\t  };\n\t  //------------------------------------------------------------------------------\n\t  ClipperLib.ClipperBase.prototype.Pt2IsBetweenPt1AndPt3 = function (pt1, pt2, pt3)\n\t  {\n\t    if ((ClipperLib.IntPoint.op_Equality(pt1, pt3)) || (ClipperLib.IntPoint.op_Equality(pt1, pt2)) ||       (ClipperLib.IntPoint.op_Equality(pt3, pt2)))\n\t\n\t   //if ((pt1 == pt3) || (pt1 == pt2) || (pt3 == pt2))\n\t   return false;\n\t\n\t    else if (pt1.X != pt3.X)\n\t      return (pt2.X > pt1.X) == (pt2.X < pt3.X);\n\t    else\n\t      return (pt2.Y > pt1.Y) == (pt2.Y < pt3.Y);\n\t  };\n\t  ClipperLib.ClipperBase.prototype.RemoveEdge = function (e)\n\t  {\n\t    //removes e from double_linked_list (but without removing from memory)\n\t    e.Prev.Next = e.Next;\n\t    e.Next.Prev = e.Prev;\n\t    var result = e.Next;\n\t    e.Prev = null; //flag as removed (see ClipperBase.Clear)\n\t    return result;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.SetDx = function (e)\n\t  {\n\t    e.Delta.X = (e.Top.X - e.Bot.X);\n\t    e.Delta.Y = (e.Top.Y - e.Bot.Y);\n\t    if (e.Delta.Y === 0) e.Dx = ClipperLib.ClipperBase.horizontal;\n\t    else e.Dx = (e.Delta.X) / (e.Delta.Y);\n\t  };\n\t  ClipperLib.ClipperBase.prototype.InsertLocalMinima = function (newLm)\n\t  {\n\t    if (this.m_MinimaList === null)\n\t    {\n\t      this.m_MinimaList = newLm;\n\t    }\n\t    else if (newLm.Y >= this.m_MinimaList.Y)\n\t    {\n\t      newLm.Next = this.m_MinimaList;\n\t      this.m_MinimaList = newLm;\n\t    }\n\t    else\n\t    {\n\t      var tmpLm = this.m_MinimaList;\n\t      while (tmpLm.Next !== null && (newLm.Y < tmpLm.Next.Y))\n\t        tmpLm = tmpLm.Next;\n\t      newLm.Next = tmpLm.Next;\n\t      tmpLm.Next = newLm;\n\t    }\n\t  };\n\t  ClipperLib.ClipperBase.prototype.PopLocalMinima = function ()\n\t  {\n\t    if (this.m_CurrentLM === null)\n\t      return;\n\t    this.m_CurrentLM = this.m_CurrentLM.Next;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.ReverseHorizontal = function (e)\n\t  {\n\t    //swap horizontal edges' top and bottom x's so they follow the natural\n\t    //progression of the bounds - ie so their xbots will align with the\n\t    //adjoining lower edge. [Helpful in the ProcessHorizontal() method.]\n\t    var tmp = e.Top.X;\n\t    e.Top.X = e.Bot.X;\n\t    e.Bot.X = tmp;\n\t    if (use_xyz)\n\t    {\n\t      tmp = e.Top.Z;\n\t      e.Top.Z = e.Bot.Z;\n\t      e.Bot.Z = tmp;\n\t    }\n\t  };\n\t  ClipperLib.ClipperBase.prototype.Reset = function ()\n\t  {\n\t    this.m_CurrentLM = this.m_MinimaList;\n\t    if (this.m_CurrentLM == null)\n\t      return;\n\t    //ie nothing to process\n\t    //reset all edges ...\n\t    var lm = this.m_MinimaList;\n\t    while (lm != null)\n\t    {\n\t      var e = lm.LeftBound;\n\t      if (e != null)\n\t      {\n\t        //e.Curr = e.Bot;\n\t        e.Curr.X = e.Bot.X;\n\t        e.Curr.Y = e.Bot.Y;\n\t        e.Side = ClipperLib.EdgeSide.esLeft;\n\t        e.OutIdx = ClipperLib.ClipperBase.Unassigned;\n\t      }\n\t      e = lm.RightBound;\n\t      if (e != null)\n\t      {\n\t        //e.Curr = e.Bot;\n\t        e.Curr.X = e.Bot.X;\n\t        e.Curr.Y = e.Bot.Y;\n\t        e.Side = ClipperLib.EdgeSide.esRight;\n\t        e.OutIdx = ClipperLib.ClipperBase.Unassigned;\n\t      }\n\t      lm = lm.Next;\n\t    }\n\t  };\n\t  ClipperLib.Clipper = function (InitOptions) // public Clipper(int InitOptions = 0)\n\t  {\n\t    if (typeof (InitOptions) == \"undefined\") InitOptions = 0;\n\t    this.m_PolyOuts = null;\n\t    this.m_ClipType = ClipperLib.ClipType.ctIntersection;\n\t    this.m_Scanbeam = null;\n\t    this.m_ActiveEdges = null;\n\t    this.m_SortedEdges = null;\n\t    this.m_IntersectList = null;\n\t    this.m_IntersectNodeComparer = null;\n\t    this.m_ExecuteLocked = false;\n\t    this.m_ClipFillType = ClipperLib.PolyFillType.pftEvenOdd;\n\t    this.m_SubjFillType = ClipperLib.PolyFillType.pftEvenOdd;\n\t    this.m_Joins = null;\n\t    this.m_GhostJoins = null;\n\t    this.m_UsingPolyTree = false;\n\t    this.ReverseSolution = false;\n\t    this.StrictlySimple = false;\n\t    ClipperLib.ClipperBase.call(this);\n\t    this.m_Scanbeam = null;\n\t    this.m_ActiveEdges = null;\n\t    this.m_SortedEdges = null;\n\t    this.m_IntersectList = new Array();\n\t    this.m_IntersectNodeComparer = ClipperLib.MyIntersectNodeSort.Compare;\n\t    this.m_ExecuteLocked = false;\n\t    this.m_UsingPolyTree = false;\n\t    this.m_PolyOuts = new Array();\n\t    this.m_Joins = new Array();\n\t    this.m_GhostJoins = new Array();\n\t    this.ReverseSolution = (1 & InitOptions) !== 0;\n\t    this.StrictlySimple = (2 & InitOptions) !== 0;\n\t    this.PreserveCollinear = (4 & InitOptions) !== 0;\n\t    if (use_xyz)\n\t    {\n\t      this.ZFillFunction = null; // function (IntPoint vert1, IntPoint vert2, ref IntPoint intersectPt);\n\t    }\n\t  };\n\t  ClipperLib.Clipper.ioReverseSolution = 1;\n\t  ClipperLib.Clipper.ioStrictlySimple = 2;\n\t  ClipperLib.Clipper.ioPreserveCollinear = 4;\n\t\n\t  ClipperLib.Clipper.prototype.Clear = function ()\n\t  {\n\t    if (this.m_edges.length === 0)\n\t      return;\n\t    //avoids problems with ClipperBase destructor\n\t    this.DisposeAllPolyPts();\n\t    ClipperLib.ClipperBase.prototype.Clear.call(this);\n\t  };\n\t\n\t  ClipperLib.Clipper.prototype.DisposeScanbeamList = function ()\n\t  {\n\t    while (this.m_Scanbeam !== null)\n\t    {\n\t      var sb2 = this.m_Scanbeam.Next;\n\t      this.m_Scanbeam = null;\n\t      this.m_Scanbeam = sb2;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.Reset = function ()\n\t  {\n\t    ClipperLib.ClipperBase.prototype.Reset.call(this);\n\t    this.m_Scanbeam = null;\n\t    this.m_ActiveEdges = null;\n\t    this.m_SortedEdges = null;\n\t\n\t    var lm = this.m_MinimaList;\n\t    while (lm !== null)\n\t    {\n\t      this.InsertScanbeam(lm.Y);\n\t      lm = lm.Next;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.InsertScanbeam = function (Y)\n\t  {\n\t    if (this.m_Scanbeam === null)\n\t    {\n\t      this.m_Scanbeam = new ClipperLib.Scanbeam();\n\t      this.m_Scanbeam.Next = null;\n\t      this.m_Scanbeam.Y = Y;\n\t    }\n\t    else if (Y > this.m_Scanbeam.Y)\n\t    {\n\t      var newSb = new ClipperLib.Scanbeam();\n\t      newSb.Y = Y;\n\t      newSb.Next = this.m_Scanbeam;\n\t      this.m_Scanbeam = newSb;\n\t    }\n\t    else\n\t    {\n\t      var sb2 = this.m_Scanbeam;\n\t      while (sb2.Next !== null && (Y <= sb2.Next.Y))\n\t        sb2 = sb2.Next;\n\t      if (Y == sb2.Y)\n\t        return;\n\t      //ie ignores duplicates\n\t      var newSb = new ClipperLib.Scanbeam();\n\t      newSb.Y = Y;\n\t      newSb.Next = sb2.Next;\n\t      sb2.Next = newSb;\n\t    }\n\t  };\n\t  // ************************************\n\t  ClipperLib.Clipper.prototype.Execute = function ()\n\t  {\n\t    var a = arguments,\n\t      alen = a.length,\n\t      ispolytree = a[1] instanceof ClipperLib.PolyTree;\n\t    if (alen == 4 && !ispolytree) // function (clipType, solution, subjFillType, clipFillType)\n\t    {\n\t      var clipType = a[0],\n\t        solution = a[1],\n\t        subjFillType = a[2],\n\t        clipFillType = a[3];\n\t      if (this.m_ExecuteLocked)\n\t        return false;\n\t      if (this.m_HasOpenPaths)\n\t        ClipperLib.Error(\"Error: PolyTree struct is need for open path clipping.\");\n\t      this.m_ExecuteLocked = true;\n\t      ClipperLib.Clear(solution);\n\t      this.m_SubjFillType = subjFillType;\n\t      this.m_ClipFillType = clipFillType;\n\t      this.m_ClipType = clipType;\n\t      this.m_UsingPolyTree = false;\n\t      try\n\t      {\n\t        var succeeded = this.ExecuteInternal();\n\t        //build the return polygons ...\n\t        if (succeeded) this.BuildResult(solution);\n\t      }\n\t      finally\n\t      {\n\t        this.DisposeAllPolyPts();\n\t        this.m_ExecuteLocked = false;\n\t      }\n\t      return succeeded;\n\t    }\n\t    else if (alen == 4 && ispolytree) // function (clipType, polytree, subjFillType, clipFillType)\n\t    {\n\t      var clipType = a[0],\n\t        polytree = a[1],\n\t        subjFillType = a[2],\n\t        clipFillType = a[3];\n\t      if (this.m_ExecuteLocked)\n\t        return false;\n\t      this.m_ExecuteLocked = true;\n\t      this.m_SubjFillType = subjFillType;\n\t      this.m_ClipFillType = clipFillType;\n\t      this.m_ClipType = clipType;\n\t      this.m_UsingPolyTree = true;\n\t      try\n\t      {\n\t        var succeeded = this.ExecuteInternal();\n\t        //build the return polygons ...\n\t        if (succeeded) this.BuildResult2(polytree);\n\t      }\n\t      finally\n\t      {\n\t        this.DisposeAllPolyPts();\n\t        this.m_ExecuteLocked = false;\n\t      }\n\t      return succeeded;\n\t    }\n\t    else if (alen == 2 && !ispolytree) // function (clipType, solution)\n\t    {\n\t      var clipType = a[0],\n\t        solution = a[1];\n\t      return this.Execute(clipType, solution, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n\t    }\n\t    else if (alen == 2 && ispolytree) // function (clipType, polytree)\n\t    {\n\t      var clipType = a[0],\n\t        polytree = a[1];\n\t      return this.Execute(clipType, polytree, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.FixHoleLinkage = function (outRec)\n\t  {\n\t    //skip if an outermost polygon or\n\t    //already already points to the correct FirstLeft ...\n\t    if (outRec.FirstLeft === null || (outRec.IsHole != outRec.FirstLeft.IsHole && outRec.FirstLeft.Pts !== null))\n\t      return;\n\t    var orfl = outRec.FirstLeft;\n\t    while (orfl !== null && ((orfl.IsHole == outRec.IsHole) || orfl.Pts === null))\n\t      orfl = orfl.FirstLeft;\n\t    outRec.FirstLeft = orfl;\n\t  };\n\t  ClipperLib.Clipper.prototype.ExecuteInternal = function ()\n\t  {\n\t    try\n\t    {\n\t      this.Reset();\n\t      if (this.m_CurrentLM === null)\n\t        return false;\n\t      var botY = this.PopScanbeam();\n\t      do {\n\t        this.InsertLocalMinimaIntoAEL(botY);\n\t        ClipperLib.Clear(this.m_GhostJoins);\n\t        this.ProcessHorizontals(false);\n\t        if (this.m_Scanbeam === null)\n\t          break;\n\t        var topY = this.PopScanbeam();\n\t        if (!this.ProcessIntersections(topY)) return false;\n\t\n\t        this.ProcessEdgesAtTopOfScanbeam(topY);\n\t        botY = topY;\n\t      }\n\t      while (this.m_Scanbeam !== null || this.m_CurrentLM !== null)\n\t      //fix orientations ...\n\t      for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t      {\n\t        var outRec = this.m_PolyOuts[i];\n\t        if (outRec.Pts === null || outRec.IsOpen)\n\t          continue;\n\t        if ((outRec.IsHole ^ this.ReverseSolution) == (this.Area(outRec) > 0))\n\t          this.ReversePolyPtLinks(outRec.Pts);\n\t      }\n\t      this.JoinCommonEdges();\n\t      for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t      {\n\t        var outRec = this.m_PolyOuts[i];\n\t        if (outRec.Pts !== null && !outRec.IsOpen)\n\t          this.FixupOutPolygon(outRec);\n\t      }\n\t      if (this.StrictlySimple)\n\t        this.DoSimplePolygons();\n\t      return true;\n\t    }\n\t    finally\n\t    {\n\t      ClipperLib.Clear(this.m_Joins);\n\t      ClipperLib.Clear(this.m_GhostJoins);\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.PopScanbeam = function ()\n\t  {\n\t    var Y = this.m_Scanbeam.Y;\n\t    this.m_Scanbeam = this.m_Scanbeam.Next;\n\t    return Y;\n\t  };\n\t\n\t  ClipperLib.Clipper.prototype.DisposeAllPolyPts = function ()\n\t  {\n\t    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; ++i)\n\t      this.DisposeOutRec(i);\n\t    ClipperLib.Clear(this.m_PolyOuts);\n\t  };\n\t  ClipperLib.Clipper.prototype.DisposeOutRec = function (index)\n\t  {\n\t    var outRec = this.m_PolyOuts[index];\n\t    outRec.Pts = null;\n\t    outRec = null;\n\t    this.m_PolyOuts[index] = null;\n\t  };\n\t\n\t  ClipperLib.Clipper.prototype.AddJoin = function (Op1, Op2, OffPt)\n\t  {\n\t    var j = new ClipperLib.Join();\n\t    j.OutPt1 = Op1;\n\t    j.OutPt2 = Op2;\n\t    //j.OffPt = OffPt;\n\t    j.OffPt.X = OffPt.X;\n\t    j.OffPt.Y = OffPt.Y;\n\t    this.m_Joins.push(j);\n\t  };\n\t  ClipperLib.Clipper.prototype.AddGhostJoin = function (Op, OffPt)\n\t  {\n\t    var j = new ClipperLib.Join();\n\t    j.OutPt1 = Op;\n\t    //j.OffPt = OffPt;\n\t    j.OffPt.X = OffPt.X;\n\t    j.OffPt.Y = OffPt.Y;\n\t    this.m_GhostJoins.push(j);\n\t  };\n\t  if (use_xyz)\n\t  {\n\t    ClipperLib.Clipper.prototype.SetZ = function (pt, e1, e2)\n\t    {\n\t      if (this.ZFillFunction !== null)\n\t      {\n\t        if (pt.Z != 0 || this.ZFillFunction === null) return;\n\t        else if (ClipperLib.IntPoint.op_Equality(pt, e1.Bot)) pt.Z = e1.Bot.Z;\n\t        else if (ClipperLib.IntPoint.op_Equality(pt, e1.Top)) pt.Z = e1.Top.Z;\n\t        else if (ClipperLib.IntPoint.op_Equality(pt, e2.Bot)) pt.Z = e2.Bot.Z;\n\t        else if (ClipperLib.IntPoint.op_Equality(pt, e2.Top)) pt.Z = e2.Top.Z;\n\t        else ZFillFunction(e1.Bot, e1.Top, e2.Bot, e2.Top, pt);\n\t      }\n\t    };\n\t\n\t    //------------------------------------------------------------------------------\n\t  }\n\t\n\t  ClipperLib.Clipper.prototype.InsertLocalMinimaIntoAEL = function (botY)\n\t  {\n\t    while (this.m_CurrentLM !== null && (this.m_CurrentLM.Y == botY))\n\t    {\n\t      var lb = this.m_CurrentLM.LeftBound;\n\t      var rb = this.m_CurrentLM.RightBound;\n\t      this.PopLocalMinima();\n\t      var Op1 = null;\n\t      if (lb === null)\n\t      {\n\t        this.InsertEdgeIntoAEL(rb, null);\n\t        this.SetWindingCount(rb);\n\t        if (this.IsContributing(rb))\n\t          Op1 = this.AddOutPt(rb, rb.Bot);\n\t      }\n\t      else if (rb == null)\n\t      {\n\t        this.InsertEdgeIntoAEL(lb, null);\n\t        this.SetWindingCount(lb);\n\t        if (this.IsContributing(lb))\n\t          Op1 = this.AddOutPt(lb, lb.Bot);\n\t        this.InsertScanbeam(lb.Top.Y);\n\t      }\n\t      else\n\t      {\n\t        this.InsertEdgeIntoAEL(lb, null);\n\t        this.InsertEdgeIntoAEL(rb, lb);\n\t        this.SetWindingCount(lb);\n\t        rb.WindCnt = lb.WindCnt;\n\t        rb.WindCnt2 = lb.WindCnt2;\n\t        if (this.IsContributing(lb))\n\t          Op1 = this.AddLocalMinPoly(lb, rb, lb.Bot);\n\t        this.InsertScanbeam(lb.Top.Y);\n\t      }\n\t      if (rb != null)\n\t      {\n\t        if (ClipperLib.ClipperBase.IsHorizontal(rb))\n\t          this.AddEdgeToSEL(rb);\n\t        else\n\t          this.InsertScanbeam(rb.Top.Y);\n\t      }\n\t      if (lb == null || rb == null) continue;\n\t      //if output polygons share an Edge with a horizontal rb, they'll need joining later ...\n\t      if (Op1 !== null && ClipperLib.ClipperBase.IsHorizontal(rb) && this.m_GhostJoins.length > 0 && rb.WindDelta !== 0)\n\t      {\n\t        for (var i = 0, ilen = this.m_GhostJoins.length; i < ilen; i++)\n\t        {\n\t          //if the horizontal Rb and a 'ghost' horizontal overlap, then convert\n\t          //the 'ghost' join to a real join ready for later ...\n\t          var j = this.m_GhostJoins[i];\n\t\n\t\t\t\t\t\tif (this.HorzSegmentsOverlap(j.OutPt1.Pt.X, j.OffPt.X, rb.Bot.X, rb.Top.X))\n\t            this.AddJoin(j.OutPt1, Op1, j.OffPt);\n\t        }\n\t      }\n\t      if (lb.OutIdx >= 0 && lb.PrevInAEL !== null &&\n\t        lb.PrevInAEL.Curr.X == lb.Bot.X &&\n\t        lb.PrevInAEL.OutIdx >= 0 &&\n\t        ClipperLib.ClipperBase.SlopesEqual(lb.PrevInAEL, lb, this.m_UseFullRange) &&\n\t        lb.WindDelta !== 0 && lb.PrevInAEL.WindDelta !== 0)\n\t      {\n\t        var Op2 = this.AddOutPt(lb.PrevInAEL, lb.Bot);\n\t        this.AddJoin(Op1, Op2, lb.Top);\n\t      }\n\t      if (lb.NextInAEL != rb)\n\t      {\n\t        if (rb.OutIdx >= 0 && rb.PrevInAEL.OutIdx >= 0 &&\n\t          ClipperLib.ClipperBase.SlopesEqual(rb.PrevInAEL, rb, this.m_UseFullRange) &&\n\t          rb.WindDelta !== 0 && rb.PrevInAEL.WindDelta !== 0)\n\t        {\n\t          var Op2 = this.AddOutPt(rb.PrevInAEL, rb.Bot);\n\t          this.AddJoin(Op1, Op2, rb.Top);\n\t        }\n\t        var e = lb.NextInAEL;\n\t        if (e !== null)\n\t          while (e != rb)\n\t          {\n\t            //nb: For calculating winding counts etc, IntersectEdges() assumes\n\t            //that param1 will be to the right of param2 ABOVE the intersection ...\n\t            this.IntersectEdges(rb, e, lb.Curr, false);\n\t            //order important here\n\t            e = e.NextInAEL;\n\t          }\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.InsertEdgeIntoAEL = function (edge, startEdge)\n\t  {\n\t    if (this.m_ActiveEdges === null)\n\t    {\n\t      edge.PrevInAEL = null;\n\t      edge.NextInAEL = null;\n\t      this.m_ActiveEdges = edge;\n\t    }\n\t    else if (startEdge === null && this.E2InsertsBeforeE1(this.m_ActiveEdges, edge))\n\t    {\n\t      edge.PrevInAEL = null;\n\t      edge.NextInAEL = this.m_ActiveEdges;\n\t      this.m_ActiveEdges.PrevInAEL = edge;\n\t      this.m_ActiveEdges = edge;\n\t    }\n\t    else\n\t    {\n\t      if (startEdge === null)\n\t        startEdge = this.m_ActiveEdges;\n\t      while (startEdge.NextInAEL !== null && !this.E2InsertsBeforeE1(startEdge.NextInAEL, edge))\n\t        startEdge = startEdge.NextInAEL;\n\t      edge.NextInAEL = startEdge.NextInAEL;\n\t      if (startEdge.NextInAEL !== null)\n\t        startEdge.NextInAEL.PrevInAEL = edge;\n\t      edge.PrevInAEL = startEdge;\n\t      startEdge.NextInAEL = edge;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.E2InsertsBeforeE1 = function (e1, e2)\n\t  {\n\t    if (e2.Curr.X == e1.Curr.X)\n\t    {\n\t      if (e2.Top.Y > e1.Top.Y)\n\t        return e2.Top.X < ClipperLib.Clipper.TopX(e1, e2.Top.Y);\n\t      else\n\t        return e1.Top.X > ClipperLib.Clipper.TopX(e2, e1.Top.Y);\n\t    }\n\t    else\n\t      return e2.Curr.X < e1.Curr.X;\n\t  };\n\t  ClipperLib.Clipper.prototype.IsEvenOddFillType = function (edge)\n\t  {\n\t    if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n\t      return this.m_SubjFillType == ClipperLib.PolyFillType.pftEvenOdd;\n\t    else\n\t      return this.m_ClipFillType == ClipperLib.PolyFillType.pftEvenOdd;\n\t  };\n\t  ClipperLib.Clipper.prototype.IsEvenOddAltFillType = function (edge)\n\t  {\n\t    if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n\t      return this.m_ClipFillType == ClipperLib.PolyFillType.pftEvenOdd;\n\t    else\n\t      return this.m_SubjFillType == ClipperLib.PolyFillType.pftEvenOdd;\n\t  };\n\t  ClipperLib.Clipper.prototype.IsContributing = function (edge)\n\t  {\n\t    var pft, pft2;\n\t    if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n\t    {\n\t      pft = this.m_SubjFillType;\n\t      pft2 = this.m_ClipFillType;\n\t    }\n\t    else\n\t    {\n\t      pft = this.m_ClipFillType;\n\t      pft2 = this.m_SubjFillType;\n\t    }\n\t    switch (pft)\n\t    {\n\t    case ClipperLib.PolyFillType.pftEvenOdd:\n\t      if (edge.WindDelta === 0 && edge.WindCnt != 1)\n\t        return false;\n\t      break;\n\t    case ClipperLib.PolyFillType.pftNonZero:\n\t      if (Math.abs(edge.WindCnt) != 1)\n\t        return false;\n\t      break;\n\t    case ClipperLib.PolyFillType.pftPositive:\n\t      if (edge.WindCnt != 1)\n\t        return false;\n\t      break;\n\t    default:\n\t      if (edge.WindCnt != -1)\n\t        return false;\n\t      break;\n\t    }\n\t    switch (this.m_ClipType)\n\t    {\n\t    case ClipperLib.ClipType.ctIntersection:\n\t      switch (pft2)\n\t      {\n\t      case ClipperLib.PolyFillType.pftEvenOdd:\n\t      case ClipperLib.PolyFillType.pftNonZero:\n\t        return (edge.WindCnt2 !== 0);\n\t      case ClipperLib.PolyFillType.pftPositive:\n\t        return (edge.WindCnt2 > 0);\n\t      default:\n\t        return (edge.WindCnt2 < 0);\n\t      }\n\t    case ClipperLib.ClipType.ctUnion:\n\t      switch (pft2)\n\t      {\n\t      case ClipperLib.PolyFillType.pftEvenOdd:\n\t      case ClipperLib.PolyFillType.pftNonZero:\n\t        return (edge.WindCnt2 === 0);\n\t      case ClipperLib.PolyFillType.pftPositive:\n\t        return (edge.WindCnt2 <= 0);\n\t      default:\n\t        return (edge.WindCnt2 >= 0);\n\t      }\n\t    case ClipperLib.ClipType.ctDifference:\n\t      if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n\t        switch (pft2)\n\t        {\n\t        case ClipperLib.PolyFillType.pftEvenOdd:\n\t        case ClipperLib.PolyFillType.pftNonZero:\n\t          return (edge.WindCnt2 === 0);\n\t        case ClipperLib.PolyFillType.pftPositive:\n\t          return (edge.WindCnt2 <= 0);\n\t        default:\n\t          return (edge.WindCnt2 >= 0);\n\t        }\n\t      else\n\t        switch (pft2)\n\t        {\n\t        case ClipperLib.PolyFillType.pftEvenOdd:\n\t        case ClipperLib.PolyFillType.pftNonZero:\n\t          return (edge.WindCnt2 !== 0);\n\t        case ClipperLib.PolyFillType.pftPositive:\n\t          return (edge.WindCnt2 > 0);\n\t        default:\n\t          return (edge.WindCnt2 < 0);\n\t        }\n\t    case ClipperLib.ClipType.ctXor:\n\t      if (edge.WindDelta === 0)\n\t        switch (pft2)\n\t        {\n\t        case ClipperLib.PolyFillType.pftEvenOdd:\n\t        case ClipperLib.PolyFillType.pftNonZero:\n\t          return (edge.WindCnt2 === 0);\n\t        case ClipperLib.PolyFillType.pftPositive:\n\t          return (edge.WindCnt2 <= 0);\n\t        default:\n\t          return (edge.WindCnt2 >= 0);\n\t        }\n\t      else\n\t        return true;\n\t    }\n\t    return true;\n\t  };\n\t  ClipperLib.Clipper.prototype.SetWindingCount = function (edge)\n\t  {\n\t    var e = edge.PrevInAEL;\n\t    //find the edge of the same polytype that immediately preceeds 'edge' in AEL\n\t    while (e !== null && ((e.PolyTyp != edge.PolyTyp) || (e.WindDelta === 0)))\n\t      e = e.PrevInAEL;\n\t    if (e === null)\n\t    {\n\t      edge.WindCnt = (edge.WindDelta === 0 ? 1 : edge.WindDelta);\n\t      edge.WindCnt2 = 0;\n\t      e = this.m_ActiveEdges;\n\t      //ie get ready to calc WindCnt2\n\t    }\n\t    else if (edge.WindDelta === 0 && this.m_ClipType != ClipperLib.ClipType.ctUnion)\n\t    {\n\t      edge.WindCnt = 1;\n\t      edge.WindCnt2 = e.WindCnt2;\n\t      e = e.NextInAEL;\n\t      //ie get ready to calc WindCnt2\n\t    }\n\t    else if (this.IsEvenOddFillType(edge))\n\t    {\n\t      //EvenOdd filling ...\n\t      if (edge.WindDelta === 0)\n\t      {\n\t        //are we inside a subj polygon ...\n\t        var Inside = true;\n\t        var e2 = e.PrevInAEL;\n\t        while (e2 !== null)\n\t        {\n\t          if (e2.PolyTyp == e.PolyTyp && e2.WindDelta !== 0)\n\t            Inside = !Inside;\n\t          e2 = e2.PrevInAEL;\n\t        }\n\t        edge.WindCnt = (Inside ? 0 : 1);\n\t      }\n\t      else\n\t      {\n\t        edge.WindCnt = edge.WindDelta;\n\t      }\n\t      edge.WindCnt2 = e.WindCnt2;\n\t      e = e.NextInAEL;\n\t      //ie get ready to calc WindCnt2\n\t    }\n\t    else\n\t    {\n\t      //nonZero, Positive or Negative filling ...\n\t      if (e.WindCnt * e.WindDelta < 0)\n\t      {\n\t        //prev edge is 'decreasing' WindCount (WC) toward zero\n\t        //so we're outside the previous polygon ...\n\t        if (Math.abs(e.WindCnt) > 1)\n\t        {\n\t          //outside prev poly but still inside another.\n\t          //when reversing direction of prev poly use the same WC\n\t          if (e.WindDelta * edge.WindDelta < 0)\n\t            edge.WindCnt = e.WindCnt;\n\t          else\n\t            edge.WindCnt = e.WindCnt + edge.WindDelta;\n\t        }\n\t        else\n\t          edge.WindCnt = (edge.WindDelta === 0 ? 1 : edge.WindDelta);\n\t      }\n\t      else\n\t      {\n\t        //prev edge is 'increasing' WindCount (WC) away from zero\n\t        //so we're inside the previous polygon ...\n\t        if (edge.WindDelta === 0)\n\t          edge.WindCnt = (e.WindCnt < 0 ? e.WindCnt - 1 : e.WindCnt + 1);\n\t        else if (e.WindDelta * edge.WindDelta < 0)\n\t          edge.WindCnt = e.WindCnt;\n\t        else\n\t          edge.WindCnt = e.WindCnt + edge.WindDelta;\n\t      }\n\t      edge.WindCnt2 = e.WindCnt2;\n\t      e = e.NextInAEL;\n\t      //ie get ready to calc WindCnt2\n\t    }\n\t    //update WindCnt2 ...\n\t    if (this.IsEvenOddAltFillType(edge))\n\t    {\n\t      //EvenOdd filling ...\n\t      while (e != edge)\n\t      {\n\t        if (e.WindDelta !== 0)\n\t          edge.WindCnt2 = (edge.WindCnt2 === 0 ? 1 : 0);\n\t        e = e.NextInAEL;\n\t      }\n\t    }\n\t    else\n\t    {\n\t      //nonZero, Positive or Negative filling ...\n\t      while (e != edge)\n\t      {\n\t        edge.WindCnt2 += e.WindDelta;\n\t        e = e.NextInAEL;\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.AddEdgeToSEL = function (edge)\n\t  {\n\t    //SEL pointers in PEdge are reused to build a list of horizontal edges.\n\t    //However, we don't need to worry about order with horizontal edge processing.\n\t    if (this.m_SortedEdges === null)\n\t    {\n\t      this.m_SortedEdges = edge;\n\t      edge.PrevInSEL = null;\n\t      edge.NextInSEL = null;\n\t    }\n\t    else\n\t    {\n\t      edge.NextInSEL = this.m_SortedEdges;\n\t      edge.PrevInSEL = null;\n\t      this.m_SortedEdges.PrevInSEL = edge;\n\t      this.m_SortedEdges = edge;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.CopyAELToSEL = function ()\n\t  {\n\t    var e = this.m_ActiveEdges;\n\t    this.m_SortedEdges = e;\n\t    while (e !== null)\n\t    {\n\t      e.PrevInSEL = e.PrevInAEL;\n\t      e.NextInSEL = e.NextInAEL;\n\t      e = e.NextInAEL;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.SwapPositionsInAEL = function (edge1, edge2)\n\t  {\n\t    //check that one or other edge hasn't already been removed from AEL ...\n\t    if (edge1.NextInAEL == edge1.PrevInAEL || edge2.NextInAEL == edge2.PrevInAEL)\n\t      return;\n\t    if (edge1.NextInAEL == edge2)\n\t    {\n\t      var next = edge2.NextInAEL;\n\t      if (next !== null)\n\t        next.PrevInAEL = edge1;\n\t      var prev = edge1.PrevInAEL;\n\t      if (prev !== null)\n\t        prev.NextInAEL = edge2;\n\t      edge2.PrevInAEL = prev;\n\t      edge2.NextInAEL = edge1;\n\t      edge1.PrevInAEL = edge2;\n\t      edge1.NextInAEL = next;\n\t    }\n\t    else if (edge2.NextInAEL == edge1)\n\t    {\n\t      var next = edge1.NextInAEL;\n\t      if (next !== null)\n\t        next.PrevInAEL = edge2;\n\t      var prev = edge2.PrevInAEL;\n\t      if (prev !== null)\n\t        prev.NextInAEL = edge1;\n\t      edge1.PrevInAEL = prev;\n\t      edge1.NextInAEL = edge2;\n\t      edge2.PrevInAEL = edge1;\n\t      edge2.NextInAEL = next;\n\t    }\n\t    else\n\t    {\n\t      var next = edge1.NextInAEL;\n\t      var prev = edge1.PrevInAEL;\n\t      edge1.NextInAEL = edge2.NextInAEL;\n\t      if (edge1.NextInAEL !== null)\n\t        edge1.NextInAEL.PrevInAEL = edge1;\n\t      edge1.PrevInAEL = edge2.PrevInAEL;\n\t      if (edge1.PrevInAEL !== null)\n\t        edge1.PrevInAEL.NextInAEL = edge1;\n\t      edge2.NextInAEL = next;\n\t      if (edge2.NextInAEL !== null)\n\t        edge2.NextInAEL.PrevInAEL = edge2;\n\t      edge2.PrevInAEL = prev;\n\t      if (edge2.PrevInAEL !== null)\n\t        edge2.PrevInAEL.NextInAEL = edge2;\n\t    }\n\t    if (edge1.PrevInAEL === null)\n\t      this.m_ActiveEdges = edge1;\n\t    else if (edge2.PrevInAEL === null)\n\t      this.m_ActiveEdges = edge2;\n\t  };\n\t  ClipperLib.Clipper.prototype.SwapPositionsInSEL = function (edge1, edge2)\n\t  {\n\t    if (edge1.NextInSEL === null && edge1.PrevInSEL === null)\n\t      return;\n\t    if (edge2.NextInSEL === null && edge2.PrevInSEL === null)\n\t      return;\n\t    if (edge1.NextInSEL == edge2)\n\t    {\n\t      var next = edge2.NextInSEL;\n\t      if (next !== null)\n\t        next.PrevInSEL = edge1;\n\t      var prev = edge1.PrevInSEL;\n\t      if (prev !== null)\n\t        prev.NextInSEL = edge2;\n\t      edge2.PrevInSEL = prev;\n\t      edge2.NextInSEL = edge1;\n\t      edge1.PrevInSEL = edge2;\n\t      edge1.NextInSEL = next;\n\t    }\n\t    else if (edge2.NextInSEL == edge1)\n\t    {\n\t      var next = edge1.NextInSEL;\n\t      if (next !== null)\n\t        next.PrevInSEL = edge2;\n\t      var prev = edge2.PrevInSEL;\n\t      if (prev !== null)\n\t        prev.NextInSEL = edge1;\n\t      edge1.PrevInSEL = prev;\n\t      edge1.NextInSEL = edge2;\n\t      edge2.PrevInSEL = edge1;\n\t      edge2.NextInSEL = next;\n\t    }\n\t    else\n\t    {\n\t      var next = edge1.NextInSEL;\n\t      var prev = edge1.PrevInSEL;\n\t      edge1.NextInSEL = edge2.NextInSEL;\n\t      if (edge1.NextInSEL !== null)\n\t        edge1.NextInSEL.PrevInSEL = edge1;\n\t      edge1.PrevInSEL = edge2.PrevInSEL;\n\t      if (edge1.PrevInSEL !== null)\n\t        edge1.PrevInSEL.NextInSEL = edge1;\n\t      edge2.NextInSEL = next;\n\t      if (edge2.NextInSEL !== null)\n\t        edge2.NextInSEL.PrevInSEL = edge2;\n\t      edge2.PrevInSEL = prev;\n\t      if (edge2.PrevInSEL !== null)\n\t        edge2.PrevInSEL.NextInSEL = edge2;\n\t    }\n\t    if (edge1.PrevInSEL === null)\n\t      this.m_SortedEdges = edge1;\n\t    else if (edge2.PrevInSEL === null)\n\t      this.m_SortedEdges = edge2;\n\t  };\n\t  ClipperLib.Clipper.prototype.AddLocalMaxPoly = function (e1, e2, pt)\n\t  {\n\t    this.AddOutPt(e1, pt);\n\t    if (e2.WindDelta == 0) this.AddOutPt(e2, pt);\n\t    if (e1.OutIdx == e2.OutIdx)\n\t    {\n\t      e1.OutIdx = -1;\n\t      e2.OutIdx = -1;\n\t    }\n\t    else if (e1.OutIdx < e2.OutIdx)\n\t      this.AppendPolygon(e1, e2);\n\t    else\n\t      this.AppendPolygon(e2, e1);\n\t  };\n\t  ClipperLib.Clipper.prototype.AddLocalMinPoly = function (e1, e2, pt)\n\t  {\n\t    var result;\n\t    var e, prevE;\n\t    if (ClipperLib.ClipperBase.IsHorizontal(e2) || (e1.Dx > e2.Dx))\n\t    {\n\t      result = this.AddOutPt(e1, pt);\n\t      e2.OutIdx = e1.OutIdx;\n\t      e1.Side = ClipperLib.EdgeSide.esLeft;\n\t      e2.Side = ClipperLib.EdgeSide.esRight;\n\t      e = e1;\n\t      if (e.PrevInAEL == e2)\n\t        prevE = e2.PrevInAEL;\n\t      else\n\t        prevE = e.PrevInAEL;\n\t    }\n\t    else\n\t    {\n\t      result = this.AddOutPt(e2, pt);\n\t      e1.OutIdx = e2.OutIdx;\n\t      e1.Side = ClipperLib.EdgeSide.esRight;\n\t      e2.Side = ClipperLib.EdgeSide.esLeft;\n\t      e = e2;\n\t      if (e.PrevInAEL == e1)\n\t        prevE = e1.PrevInAEL;\n\t      else\n\t        prevE = e.PrevInAEL;\n\t    }\n\t    if (prevE !== null && prevE.OutIdx >= 0 && (ClipperLib.Clipper.TopX(prevE, pt.Y) == ClipperLib.Clipper.TopX(e, pt.Y)) && ClipperLib.ClipperBase.SlopesEqual(e, prevE, this.m_UseFullRange) && (e.WindDelta !== 0) && (prevE.WindDelta !== 0))\n\t    {\n\t      var outPt = this.AddOutPt(prevE, pt);\n\t      this.AddJoin(result, outPt, e.Top);\n\t    }\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.prototype.CreateOutRec = function ()\n\t  {\n\t    var result = new ClipperLib.OutRec();\n\t    result.Idx = -1;\n\t    result.IsHole = false;\n\t    result.IsOpen = false;\n\t    result.FirstLeft = null;\n\t    result.Pts = null;\n\t    result.BottomPt = null;\n\t    result.PolyNode = null;\n\t    this.m_PolyOuts.push(result);\n\t    result.Idx = this.m_PolyOuts.length - 1;\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.prototype.AddOutPt = function (e, pt)\n\t  {\n\t    var ToFront = (e.Side == ClipperLib.EdgeSide.esLeft);\n\t    if (e.OutIdx < 0)\n\t    {\n\t      var outRec = this.CreateOutRec();\n\t      outRec.IsOpen = (e.WindDelta === 0);\n\t      var newOp = new ClipperLib.OutPt();\n\t      outRec.Pts = newOp;\n\t      newOp.Idx = outRec.Idx;\n\t      //newOp.Pt = pt;\n\t      newOp.Pt.X = pt.X;\n\t      newOp.Pt.Y = pt.Y;\n\t      newOp.Next = newOp;\n\t      newOp.Prev = newOp;\n\t      if (!outRec.IsOpen)\n\t        this.SetHoleState(e, outRec);\n\t      e.OutIdx = outRec.Idx;\n\t      //nb: do this after SetZ !\n\t      return newOp;\n\t    }\n\t    else\n\t    {\n\t      var outRec = this.m_PolyOuts[e.OutIdx];\n\t      //OutRec.Pts is the 'Left-most' point & OutRec.Pts.Prev is the 'Right-most'\n\t      var op = outRec.Pts;\n\t      if (ToFront && ClipperLib.IntPoint.op_Equality(pt, op.Pt))\n\t        return op;\n\t      else if (!ToFront && ClipperLib.IntPoint.op_Equality(pt, op.Prev.Pt))\n\t        return op.Prev;\n\t      var newOp = new ClipperLib.OutPt();\n\t      newOp.Idx = outRec.Idx;\n\t      //newOp.Pt = pt;\n\t      newOp.Pt.X = pt.X;\n\t      newOp.Pt.Y = pt.Y;\n\t      newOp.Next = op;\n\t      newOp.Prev = op.Prev;\n\t      newOp.Prev.Next = newOp;\n\t      op.Prev = newOp;\n\t      if (ToFront)\n\t        outRec.Pts = newOp;\n\t      return newOp;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.SwapPoints = function (pt1, pt2)\n\t  {\n\t    var tmp = new ClipperLib.IntPoint(pt1.Value);\n\t    //pt1.Value = pt2.Value;\n\t    pt1.Value.X = pt2.Value.X;\n\t    pt1.Value.Y = pt2.Value.Y;\n\t    //pt2.Value = tmp;\n\t    pt2.Value.X = tmp.X;\n\t    pt2.Value.Y = tmp.Y;\n\t  };\n\t  ClipperLib.Clipper.prototype.HorzSegmentsOverlap = function (seg1a, seg1b, seg2a, seg2b)\n\t\t{\n\t\t\tvar tmp;\n\t\t\tif (seg1a > seg1b)\n\t\t\t{\n\t\t\t\ttmp = seg1a;\n\t\t\t\tseg1a = seg1b;\n\t\t\t\tseg1b = tmp;\n\t\t\t}\n\t\t\tif (seg2a > seg2b)\n\t\t\t{\n\t\t\t\ttmp = seg2a;\n\t\t\t\tseg2a = seg2b;\n\t\t\t\tseg2b = tmp;\n\t\t\t}\n\t\t\treturn (seg1a < seg2b) && (seg2a < seg1b);\n\t\t}\n\t\n\t  ClipperLib.Clipper.prototype.SetHoleState = function (e, outRec)\n\t  {\n\t    var isHole = false;\n\t    var e2 = e.PrevInAEL;\n\t    while (e2 !== null)\n\t    {\n\t      if (e2.OutIdx >= 0 && e2.WindDelta != 0)\n\t      {\n\t        isHole = !isHole;\n\t        if (outRec.FirstLeft === null)\n\t          outRec.FirstLeft = this.m_PolyOuts[e2.OutIdx];\n\t      }\n\t      e2 = e2.PrevInAEL;\n\t    }\n\t    if (isHole)\n\t      outRec.IsHole = true;\n\t  };\n\t  ClipperLib.Clipper.prototype.GetDx = function (pt1, pt2)\n\t  {\n\t    if (pt1.Y == pt2.Y)\n\t      return ClipperLib.ClipperBase.horizontal;\n\t    else\n\t      return (pt2.X - pt1.X) / (pt2.Y - pt1.Y);\n\t  };\n\t  ClipperLib.Clipper.prototype.FirstIsBottomPt = function (btmPt1, btmPt2)\n\t  {\n\t    var p = btmPt1.Prev;\n\t    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt1.Pt)) && (p != btmPt1))\n\t      p = p.Prev;\n\t    var dx1p = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n\t    p = btmPt1.Next;\n\t    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt1.Pt)) && (p != btmPt1))\n\t      p = p.Next;\n\t    var dx1n = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n\t    p = btmPt2.Prev;\n\t    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt2.Pt)) && (p != btmPt2))\n\t      p = p.Prev;\n\t    var dx2p = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n\t    p = btmPt2.Next;\n\t    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt2.Pt)) && (p != btmPt2))\n\t      p = p.Next;\n\t    var dx2n = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n\t    return (dx1p >= dx2p && dx1p >= dx2n) || (dx1n >= dx2p && dx1n >= dx2n);\n\t  };\n\t  ClipperLib.Clipper.prototype.GetBottomPt = function (pp)\n\t  {\n\t    var dups = null;\n\t    var p = pp.Next;\n\t    while (p != pp)\n\t    {\n\t      if (p.Pt.Y > pp.Pt.Y)\n\t      {\n\t        pp = p;\n\t        dups = null;\n\t      }\n\t      else if (p.Pt.Y == pp.Pt.Y && p.Pt.X <= pp.Pt.X)\n\t      {\n\t        if (p.Pt.X < pp.Pt.X)\n\t        {\n\t          dups = null;\n\t          pp = p;\n\t        }\n\t        else\n\t        {\n\t          if (p.Next != pp && p.Prev != pp)\n\t            dups = p;\n\t        }\n\t      }\n\t      p = p.Next;\n\t    }\n\t    if (dups !== null)\n\t    {\n\t      //there appears to be at least 2 vertices at bottomPt so ...\n\t      while (dups != p)\n\t      {\n\t        if (!this.FirstIsBottomPt(p, dups))\n\t          pp = dups;\n\t        dups = dups.Next;\n\t        while (ClipperLib.IntPoint.op_Inequality(dups.Pt, pp.Pt))\n\t          dups = dups.Next;\n\t      }\n\t    }\n\t    return pp;\n\t  };\n\t  ClipperLib.Clipper.prototype.GetLowermostRec = function (outRec1, outRec2)\n\t  {\n\t    //work out which polygon fragment has the correct hole state ...\n\t    if (outRec1.BottomPt === null)\n\t      outRec1.BottomPt = this.GetBottomPt(outRec1.Pts);\n\t    if (outRec2.BottomPt === null)\n\t      outRec2.BottomPt = this.GetBottomPt(outRec2.Pts);\n\t    var bPt1 = outRec1.BottomPt;\n\t    var bPt2 = outRec2.BottomPt;\n\t    if (bPt1.Pt.Y > bPt2.Pt.Y)\n\t      return outRec1;\n\t    else if (bPt1.Pt.Y < bPt2.Pt.Y)\n\t      return outRec2;\n\t    else if (bPt1.Pt.X < bPt2.Pt.X)\n\t      return outRec1;\n\t    else if (bPt1.Pt.X > bPt2.Pt.X)\n\t      return outRec2;\n\t    else if (bPt1.Next == bPt1)\n\t      return outRec2;\n\t    else if (bPt2.Next == bPt2)\n\t      return outRec1;\n\t    else if (this.FirstIsBottomPt(bPt1, bPt2))\n\t      return outRec1;\n\t    else\n\t      return outRec2;\n\t  };\n\t  ClipperLib.Clipper.prototype.Param1RightOfParam2 = function (outRec1, outRec2)\n\t  {\n\t    do {\n\t      outRec1 = outRec1.FirstLeft;\n\t      if (outRec1 == outRec2)\n\t        return true;\n\t    }\n\t    while (outRec1 !== null)\n\t    return false;\n\t  };\n\t  ClipperLib.Clipper.prototype.GetOutRec = function (idx)\n\t  {\n\t    var outrec = this.m_PolyOuts[idx];\n\t    while (outrec != this.m_PolyOuts[outrec.Idx])\n\t      outrec = this.m_PolyOuts[outrec.Idx];\n\t    return outrec;\n\t  };\n\t  ClipperLib.Clipper.prototype.AppendPolygon = function (e1, e2)\n\t  {\n\t    //get the start and ends of both output polygons ...\n\t    var outRec1 = this.m_PolyOuts[e1.OutIdx];\n\t    var outRec2 = this.m_PolyOuts[e2.OutIdx];\n\t    var holeStateRec;\n\t    if (this.Param1RightOfParam2(outRec1, outRec2))\n\t      holeStateRec = outRec2;\n\t    else if (this.Param1RightOfParam2(outRec2, outRec1))\n\t      holeStateRec = outRec1;\n\t    else\n\t      holeStateRec = this.GetLowermostRec(outRec1, outRec2);\n\t    var p1_lft = outRec1.Pts;\n\t    var p1_rt = p1_lft.Prev;\n\t    var p2_lft = outRec2.Pts;\n\t    var p2_rt = p2_lft.Prev;\n\t    var side;\n\t    //join e2 poly onto e1 poly and delete pointers to e2 ...\n\t    if (e1.Side == ClipperLib.EdgeSide.esLeft)\n\t    {\n\t      if (e2.Side == ClipperLib.EdgeSide.esLeft)\n\t      {\n\t        //z y x a b c\n\t        this.ReversePolyPtLinks(p2_lft);\n\t        p2_lft.Next = p1_lft;\n\t        p1_lft.Prev = p2_lft;\n\t        p1_rt.Next = p2_rt;\n\t        p2_rt.Prev = p1_rt;\n\t        outRec1.Pts = p2_rt;\n\t      }\n\t      else\n\t      {\n\t        //x y z a b c\n\t        p2_rt.Next = p1_lft;\n\t        p1_lft.Prev = p2_rt;\n\t        p2_lft.Prev = p1_rt;\n\t        p1_rt.Next = p2_lft;\n\t        outRec1.Pts = p2_lft;\n\t      }\n\t      side = ClipperLib.EdgeSide.esLeft;\n\t    }\n\t    else\n\t    {\n\t      if (e2.Side == ClipperLib.EdgeSide.esRight)\n\t      {\n\t        //a b c z y x\n\t        this.ReversePolyPtLinks(p2_lft);\n\t        p1_rt.Next = p2_rt;\n\t        p2_rt.Prev = p1_rt;\n\t        p2_lft.Next = p1_lft;\n\t        p1_lft.Prev = p2_lft;\n\t      }\n\t      else\n\t      {\n\t        //a b c x y z\n\t        p1_rt.Next = p2_lft;\n\t        p2_lft.Prev = p1_rt;\n\t        p1_lft.Prev = p2_rt;\n\t        p2_rt.Next = p1_lft;\n\t      }\n\t      side = ClipperLib.EdgeSide.esRight;\n\t    }\n\t    outRec1.BottomPt = null;\n\t    if (holeStateRec == outRec2)\n\t    {\n\t      if (outRec2.FirstLeft != outRec1)\n\t        outRec1.FirstLeft = outRec2.FirstLeft;\n\t      outRec1.IsHole = outRec2.IsHole;\n\t    }\n\t    outRec2.Pts = null;\n\t    outRec2.BottomPt = null;\n\t    outRec2.FirstLeft = outRec1;\n\t    var OKIdx = e1.OutIdx;\n\t    var ObsoleteIdx = e2.OutIdx;\n\t    e1.OutIdx = -1;\n\t    //nb: safe because we only get here via AddLocalMaxPoly\n\t    e2.OutIdx = -1;\n\t    var e = this.m_ActiveEdges;\n\t    while (e !== null)\n\t    {\n\t      if (e.OutIdx == ObsoleteIdx)\n\t      {\n\t        e.OutIdx = OKIdx;\n\t        e.Side = side;\n\t        break;\n\t      }\n\t      e = e.NextInAEL;\n\t    }\n\t    outRec2.Idx = outRec1.Idx;\n\t  };\n\t  ClipperLib.Clipper.prototype.ReversePolyPtLinks = function (pp)\n\t  {\n\t    if (pp === null)\n\t      return;\n\t    var pp1;\n\t    var pp2;\n\t    pp1 = pp;\n\t    do {\n\t      pp2 = pp1.Next;\n\t      pp1.Next = pp1.Prev;\n\t      pp1.Prev = pp2;\n\t      pp1 = pp2;\n\t    }\n\t    while (pp1 != pp)\n\t  };\n\t  ClipperLib.Clipper.SwapSides = function (edge1, edge2)\n\t  {\n\t    var side = edge1.Side;\n\t    edge1.Side = edge2.Side;\n\t    edge2.Side = side;\n\t  };\n\t  ClipperLib.Clipper.SwapPolyIndexes = function (edge1, edge2)\n\t  {\n\t    var outIdx = edge1.OutIdx;\n\t    edge1.OutIdx = edge2.OutIdx;\n\t    edge2.OutIdx = outIdx;\n\t  };\n\t  ClipperLib.Clipper.prototype.IntersectEdges = function (e1, e2, pt)\n\t  {\n\t    //e1 will be to the left of e2 BELOW the intersection. Therefore e1 is before\n\t    //e2 in AEL except when e1 is being inserted at the intersection point ...\n\t    var e1Contributing = (e1.OutIdx >= 0);\n\t    var e2Contributing = (e2.OutIdx >= 0);\n\t\n\t    if (use_xyz)\n\t    \tthis.SetZ(pt, e1, e2);\n\t\n\t    if (use_lines)\n\t    {\n\t      //if either edge is on an OPEN path ...\n\t      if (e1.WindDelta === 0 || e2.WindDelta === 0)\n\t      {\n\t        //ignore subject-subject open path intersections UNLESS they\n\t        //are both open paths, AND they are both 'contributing maximas' ...\n\t\t\t\t\tif (e1.WindDelta == 0 && e2.WindDelta == 0) return;\n\t        //if intersecting a subj line with a subj poly ...\n\t        else if (e1.PolyTyp == e2.PolyTyp &&\n\t          e1.WindDelta != e2.WindDelta && this.m_ClipType == ClipperLib.ClipType.ctUnion)\n\t        {\n\t          if (e1.WindDelta === 0)\n\t          {\n\t            if (e2Contributing)\n\t            {\n\t              this.AddOutPt(e1, pt);\n\t              if (e1Contributing)\n\t                e1.OutIdx = -1;\n\t            }\n\t          }\n\t          else\n\t          {\n\t            if (e1Contributing)\n\t            {\n\t              this.AddOutPt(e2, pt);\n\t              if (e2Contributing)\n\t                e2.OutIdx = -1;\n\t            }\n\t          }\n\t        }\n\t        else if (e1.PolyTyp != e2.PolyTyp)\n\t        {\n\t          if ((e1.WindDelta === 0) && Math.abs(e2.WindCnt) == 1 &&\n\t            (this.m_ClipType != ClipperLib.ClipType.ctUnion || e2.WindCnt2 === 0))\n\t          {\n\t            this.AddOutPt(e1, pt);\n\t            if (e1Contributing)\n\t              e1.OutIdx = -1;\n\t          }\n\t          else if ((e2.WindDelta === 0) && (Math.abs(e1.WindCnt) == 1) &&\n\t            (this.m_ClipType != ClipperLib.ClipType.ctUnion || e1.WindCnt2 === 0))\n\t          {\n\t            this.AddOutPt(e2, pt);\n\t            if (e2Contributing)\n\t              e2.OutIdx = -1;\n\t          }\n\t        }\n\t        return;\n\t      }\n\t    }\n\t    //update winding counts...\n\t    //assumes that e1 will be to the Right of e2 ABOVE the intersection\n\t    if (e1.PolyTyp == e2.PolyTyp)\n\t    {\n\t      if (this.IsEvenOddFillType(e1))\n\t      {\n\t        var oldE1WindCnt = e1.WindCnt;\n\t        e1.WindCnt = e2.WindCnt;\n\t        e2.WindCnt = oldE1WindCnt;\n\t      }\n\t      else\n\t      {\n\t        if (e1.WindCnt + e2.WindDelta === 0)\n\t          e1.WindCnt = -e1.WindCnt;\n\t        else\n\t          e1.WindCnt += e2.WindDelta;\n\t        if (e2.WindCnt - e1.WindDelta === 0)\n\t          e2.WindCnt = -e2.WindCnt;\n\t        else\n\t          e2.WindCnt -= e1.WindDelta;\n\t      }\n\t    }\n\t    else\n\t    {\n\t      if (!this.IsEvenOddFillType(e2))\n\t        e1.WindCnt2 += e2.WindDelta;\n\t      else\n\t        e1.WindCnt2 = (e1.WindCnt2 === 0) ? 1 : 0;\n\t      if (!this.IsEvenOddFillType(e1))\n\t        e2.WindCnt2 -= e1.WindDelta;\n\t      else\n\t        e2.WindCnt2 = (e2.WindCnt2 === 0) ? 1 : 0;\n\t    }\n\t    var e1FillType, e2FillType, e1FillType2, e2FillType2;\n\t    if (e1.PolyTyp == ClipperLib.PolyType.ptSubject)\n\t    {\n\t      e1FillType = this.m_SubjFillType;\n\t      e1FillType2 = this.m_ClipFillType;\n\t    }\n\t    else\n\t    {\n\t      e1FillType = this.m_ClipFillType;\n\t      e1FillType2 = this.m_SubjFillType;\n\t    }\n\t    if (e2.PolyTyp == ClipperLib.PolyType.ptSubject)\n\t    {\n\t      e2FillType = this.m_SubjFillType;\n\t      e2FillType2 = this.m_ClipFillType;\n\t    }\n\t    else\n\t    {\n\t      e2FillType = this.m_ClipFillType;\n\t      e2FillType2 = this.m_SubjFillType;\n\t    }\n\t    var e1Wc, e2Wc;\n\t    switch (e1FillType)\n\t    {\n\t    case ClipperLib.PolyFillType.pftPositive:\n\t      e1Wc = e1.WindCnt;\n\t      break;\n\t    case ClipperLib.PolyFillType.pftNegative:\n\t      e1Wc = -e1.WindCnt;\n\t      break;\n\t    default:\n\t      e1Wc = Math.abs(e1.WindCnt);\n\t      break;\n\t    }\n\t    switch (e2FillType)\n\t    {\n\t    case ClipperLib.PolyFillType.pftPositive:\n\t      e2Wc = e2.WindCnt;\n\t      break;\n\t    case ClipperLib.PolyFillType.pftNegative:\n\t      e2Wc = -e2.WindCnt;\n\t      break;\n\t    default:\n\t      e2Wc = Math.abs(e2.WindCnt);\n\t      break;\n\t    }\n\t    if (e1Contributing && e2Contributing)\n\t    {\n\t\t\t\tif ((e1Wc != 0 && e1Wc != 1) || (e2Wc != 0 && e2Wc != 1) ||\n\t\t\t\t(e1.PolyTyp != e2.PolyTyp && this.m_ClipType != ClipperLib.ClipType.ctXor))\n\t\t\t\t{\n\t\t\t\t\tthis.AddLocalMaxPoly(e1, e2, pt);\n\t\t\t\t}\n\t      else\n\t      {\n\t        this.AddOutPt(e1, pt);\n\t        this.AddOutPt(e2, pt);\n\t        ClipperLib.Clipper.SwapSides(e1, e2);\n\t        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n\t      }\n\t    }\n\t    else if (e1Contributing)\n\t    {\n\t      if (e2Wc === 0 || e2Wc == 1)\n\t      {\n\t        this.AddOutPt(e1, pt);\n\t        ClipperLib.Clipper.SwapSides(e1, e2);\n\t        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n\t      }\n\t    }\n\t    else if (e2Contributing)\n\t    {\n\t      if (e1Wc === 0 || e1Wc == 1)\n\t      {\n\t        this.AddOutPt(e2, pt);\n\t        ClipperLib.Clipper.SwapSides(e1, e2);\n\t        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n\t      }\n\t    }\n\t\t\telse if ( (e1Wc == 0 || e1Wc == 1) && (e2Wc == 0 || e2Wc == 1))\n\t    {\n\t      //neither edge is currently contributing ...\n\t      var e1Wc2, e2Wc2;\n\t      switch (e1FillType2)\n\t      {\n\t      case ClipperLib.PolyFillType.pftPositive:\n\t        e1Wc2 = e1.WindCnt2;\n\t        break;\n\t      case ClipperLib.PolyFillType.pftNegative:\n\t        e1Wc2 = -e1.WindCnt2;\n\t        break;\n\t      default:\n\t        e1Wc2 = Math.abs(e1.WindCnt2);\n\t        break;\n\t      }\n\t      switch (e2FillType2)\n\t      {\n\t      case ClipperLib.PolyFillType.pftPositive:\n\t        e2Wc2 = e2.WindCnt2;\n\t        break;\n\t      case ClipperLib.PolyFillType.pftNegative:\n\t        e2Wc2 = -e2.WindCnt2;\n\t        break;\n\t      default:\n\t        e2Wc2 = Math.abs(e2.WindCnt2);\n\t        break;\n\t      }\n\t      if (e1.PolyTyp != e2.PolyTyp)\n\t      {\n\t        this.AddLocalMinPoly(e1, e2, pt);\n\t      }\n\t      else if (e1Wc == 1 && e2Wc == 1)\n\t        switch (this.m_ClipType)\n\t        {\n\t        case ClipperLib.ClipType.ctIntersection:\n\t          if (e1Wc2 > 0 && e2Wc2 > 0)\n\t            this.AddLocalMinPoly(e1, e2, pt);\n\t          break;\n\t        case ClipperLib.ClipType.ctUnion:\n\t          if (e1Wc2 <= 0 && e2Wc2 <= 0)\n\t            this.AddLocalMinPoly(e1, e2, pt);\n\t          break;\n\t        case ClipperLib.ClipType.ctDifference:\n\t          if (((e1.PolyTyp == ClipperLib.PolyType.ptClip) && (e1Wc2 > 0) && (e2Wc2 > 0)) ||\n\t            ((e1.PolyTyp == ClipperLib.PolyType.ptSubject) && (e1Wc2 <= 0) && (e2Wc2 <= 0)))\n\t            this.AddLocalMinPoly(e1, e2, pt);\n\t          break;\n\t        case ClipperLib.ClipType.ctXor:\n\t          this.AddLocalMinPoly(e1, e2, pt);\n\t          break;\n\t        }\n\t      else\n\t        ClipperLib.Clipper.SwapSides(e1, e2);\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.DeleteFromAEL = function (e)\n\t  {\n\t    var AelPrev = e.PrevInAEL;\n\t    var AelNext = e.NextInAEL;\n\t    if (AelPrev === null && AelNext === null && (e != this.m_ActiveEdges))\n\t      return;\n\t    //already deleted\n\t    if (AelPrev !== null)\n\t      AelPrev.NextInAEL = AelNext;\n\t    else\n\t      this.m_ActiveEdges = AelNext;\n\t    if (AelNext !== null)\n\t      AelNext.PrevInAEL = AelPrev;\n\t    e.NextInAEL = null;\n\t    e.PrevInAEL = null;\n\t  };\n\t  ClipperLib.Clipper.prototype.DeleteFromSEL = function (e)\n\t  {\n\t    var SelPrev = e.PrevInSEL;\n\t    var SelNext = e.NextInSEL;\n\t    if (SelPrev === null && SelNext === null && (e != this.m_SortedEdges))\n\t      return;\n\t    //already deleted\n\t    if (SelPrev !== null)\n\t      SelPrev.NextInSEL = SelNext;\n\t    else\n\t      this.m_SortedEdges = SelNext;\n\t    if (SelNext !== null)\n\t      SelNext.PrevInSEL = SelPrev;\n\t    e.NextInSEL = null;\n\t    e.PrevInSEL = null;\n\t  };\n\t  ClipperLib.Clipper.prototype.UpdateEdgeIntoAEL = function (e)\n\t  {\n\t    if (e.NextInLML === null)\n\t      ClipperLib.Error(\"UpdateEdgeIntoAEL: invalid call\");\n\t    var AelPrev = e.PrevInAEL;\n\t    var AelNext = e.NextInAEL;\n\t    e.NextInLML.OutIdx = e.OutIdx;\n\t    if (AelPrev !== null)\n\t      AelPrev.NextInAEL = e.NextInLML;\n\t    else\n\t      this.m_ActiveEdges = e.NextInLML;\n\t    if (AelNext !== null)\n\t      AelNext.PrevInAEL = e.NextInLML;\n\t    e.NextInLML.Side = e.Side;\n\t    e.NextInLML.WindDelta = e.WindDelta;\n\t    e.NextInLML.WindCnt = e.WindCnt;\n\t    e.NextInLML.WindCnt2 = e.WindCnt2;\n\t    e = e.NextInLML;\n\t    //    e.Curr = e.Bot;\n\t    e.Curr.X = e.Bot.X;\n\t    e.Curr.Y = e.Bot.Y;\n\t    e.PrevInAEL = AelPrev;\n\t    e.NextInAEL = AelNext;\n\t    if (!ClipperLib.ClipperBase.IsHorizontal(e))\n\t      this.InsertScanbeam(e.Top.Y);\n\t    return e;\n\t  };\n\t  ClipperLib.Clipper.prototype.ProcessHorizontals = function (isTopOfScanbeam)\n\t  {\n\t    var horzEdge = this.m_SortedEdges;\n\t    while (horzEdge !== null)\n\t    {\n\t      this.DeleteFromSEL(horzEdge);\n\t      this.ProcessHorizontal(horzEdge, isTopOfScanbeam);\n\t      horzEdge = this.m_SortedEdges;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.GetHorzDirection = function (HorzEdge, $var)\n\t  {\n\t    if (HorzEdge.Bot.X < HorzEdge.Top.X)\n\t    {\n\t        $var.Left = HorzEdge.Bot.X;\n\t        $var.Right = HorzEdge.Top.X;\n\t        $var.Dir = ClipperLib.Direction.dLeftToRight;\n\t    }\n\t    else\n\t    {\n\t        $var.Left = HorzEdge.Top.X;\n\t        $var.Right = HorzEdge.Bot.X;\n\t        $var.Dir = ClipperLib.Direction.dRightToLeft;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.ProcessHorizontal = function (horzEdge, isTopOfScanbeam)\n\t  {\n\t    var $var = {Dir: null, Left: null, Right: null};\n\t    this.GetHorzDirection(horzEdge, $var);\n\t    var dir = $var.Dir;\n\t    var horzLeft = $var.Left;\n\t    var horzRight = $var.Right;\n\t\n\t    var eLastHorz = horzEdge,\n\t      eMaxPair = null;\n\t    while (eLastHorz.NextInLML !== null && ClipperLib.ClipperBase.IsHorizontal(eLastHorz.NextInLML))\n\t      eLastHorz = eLastHorz.NextInLML;\n\t    if (eLastHorz.NextInLML === null)\n\t      eMaxPair = this.GetMaximaPair(eLastHorz);\n\t    for (;;)\n\t    {\n\t      var IsLastHorz = (horzEdge == eLastHorz);\n\t      var e = this.GetNextInAEL(horzEdge, dir);\n\t      while (e !== null)\n\t      {\n\t        //Break if we've got to the end of an intermediate horizontal edge ...\n\t        //nb: Smaller Dx's are to the right of larger Dx's ABOVE the horizontal.\n\t        if (e.Curr.X == horzEdge.Top.X && horzEdge.NextInLML !== null && e.Dx < horzEdge.NextInLML.Dx)\n\t          break;\n\t        var eNext = this.GetNextInAEL(e, dir);\n\t        //saves eNext for later\n\t        if ((dir == ClipperLib.Direction.dLeftToRight && e.Curr.X <= horzRight) || (dir == ClipperLib.Direction.dRightToLeft && e.Curr.X >= horzLeft))\n\t        {\n\t          //so far we're still in range of the horizontal Edge  but make sure\n\t          //we're at the last of consec. horizontals when matching with eMaxPair\n\t          if (e == eMaxPair && IsLastHorz)\n\t          {\n\t\t\t\t\t\t\tif (horzEdge.OutIdx >= 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar op1 = this.AddOutPt(horzEdge, horzEdge.Top);\n\t\t\t\t\t\t\t\tvar eNextHorz = this.m_SortedEdges;\n\t\t\t\t\t\t\t\twhile (eNextHorz !== null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (eNextHorz.OutIdx >= 0 &&\n\t\t\t\t\t\t\t\t\t\tthis.HorzSegmentsOverlap(horzEdge.Bot.X,\n\t\t\t\t\t\t\t\t\t\thorzEdge.Top.X, eNextHorz.Bot.X, eNextHorz.Top.X))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar op2 = this.AddOutPt(eNextHorz, eNextHorz.Bot);\n\t\t\t\t\t\t\t\t\t\tthis.AddJoin(op2, op1, eNextHorz.Top);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\teNextHorz = eNextHorz.NextInSEL;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis.AddGhostJoin(op1, horzEdge.Bot);\n\t\t\t\t\t\t\t\tthis.AddLocalMaxPoly(horzEdge, eMaxPair, horzEdge.Top);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.DeleteFromAEL(horzEdge);\n\t\t\t\t\t\t\tthis.DeleteFromAEL(eMaxPair);\n\t            return;\n\t          }\n\t          else if (dir == ClipperLib.Direction.dLeftToRight)\n\t          {\n\t            var Pt = new ClipperLib.IntPoint(e.Curr.X, horzEdge.Curr.Y);\n\t            this.IntersectEdges(horzEdge, e, Pt);\n\t          }\n\t          else\n\t          {\n\t            var Pt = new ClipperLib.IntPoint(e.Curr.X, horzEdge.Curr.Y);\n\t            this.IntersectEdges(e, horzEdge, Pt);\n\t          }\n\t          this.SwapPositionsInAEL(horzEdge, e);\n\t        }\n\t        else if ((dir == ClipperLib.Direction.dLeftToRight && e.Curr.X >= horzRight) || (dir == ClipperLib.Direction.dRightToLeft && e.Curr.X <= horzLeft))\n\t          break;\n\t        e = eNext;\n\t      }\n\t      //end while\n\t      if (horzEdge.NextInLML !== null && ClipperLib.ClipperBase.IsHorizontal(horzEdge.NextInLML))\n\t      {\n\t        horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n\t        if (horzEdge.OutIdx >= 0)\n\t          this.AddOutPt(horzEdge, horzEdge.Bot);\n\t\n\t          var $var = {Dir: dir, Left: horzLeft, Right: horzRight};\n\t          this.GetHorzDirection(horzEdge, $var);\n\t          dir = $var.Dir;\n\t          horzLeft = $var.Left;\n\t          horzRight = $var.Right;\n\t      }\n\t      else\n\t        break;\n\t    }\n\t    //end for (;;)\n\t    if (horzEdge.NextInLML !== null)\n\t    {\n\t      if (horzEdge.OutIdx >= 0)\n\t      {\n\t        var op1 = this.AddOutPt(horzEdge, horzEdge.Top);\n\t\t\t\t\tif (isTopOfScanbeam) this.AddGhostJoin(op1, horzEdge.Bot);\n\t        horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n\t        if (horzEdge.WindDelta === 0)\n\t          return;\n\t        //nb: HorzEdge is no longer horizontal here\n\t        var ePrev = horzEdge.PrevInAEL;\n\t        var eNext = horzEdge.NextInAEL;\n\t        if (ePrev !== null && ePrev.Curr.X == horzEdge.Bot.X &&\n\t          ePrev.Curr.Y == horzEdge.Bot.Y && ePrev.WindDelta !== 0 &&\n\t          (ePrev.OutIdx >= 0 && ePrev.Curr.Y > ePrev.Top.Y &&\n\t            ClipperLib.ClipperBase.SlopesEqual(horzEdge, ePrev, this.m_UseFullRange)))\n\t        {\n\t          var op2 = this.AddOutPt(ePrev, horzEdge.Bot);\n\t          this.AddJoin(op1, op2, horzEdge.Top);\n\t        }\n\t        else if (eNext !== null && eNext.Curr.X == horzEdge.Bot.X &&\n\t          eNext.Curr.Y == horzEdge.Bot.Y && eNext.WindDelta !== 0 &&\n\t          eNext.OutIdx >= 0 && eNext.Curr.Y > eNext.Top.Y &&\n\t          ClipperLib.ClipperBase.SlopesEqual(horzEdge, eNext, this.m_UseFullRange))\n\t        {\n\t          var op2 = this.AddOutPt(eNext, horzEdge.Bot);\n\t          this.AddJoin(op1, op2, horzEdge.Top);\n\t        }\n\t      }\n\t      else horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n\t    }\n\t  \telse\n\t    {\n\t      if (horzEdge.OutIdx >= 0)\n\t        this.AddOutPt(horzEdge, horzEdge.Top);\n\t      this.DeleteFromAEL(horzEdge);\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.GetNextInAEL = function (e, Direction)\n\t  {\n\t    return Direction == ClipperLib.Direction.dLeftToRight ? e.NextInAEL : e.PrevInAEL;\n\t  };\n\t  ClipperLib.Clipper.prototype.IsMinima = function (e)\n\t  {\n\t    return e !== null && (e.Prev.NextInLML != e) && (e.Next.NextInLML != e);\n\t  };\n\t  ClipperLib.Clipper.prototype.IsMaxima = function (e, Y)\n\t  {\n\t    return (e !== null && e.Top.Y == Y && e.NextInLML === null);\n\t  };\n\t  ClipperLib.Clipper.prototype.IsIntermediate = function (e, Y)\n\t  {\n\t    return (e.Top.Y == Y && e.NextInLML !== null);\n\t  };\n\t  ClipperLib.Clipper.prototype.GetMaximaPair = function (e)\n\t  {\n\t    var result = null;\n\t    if ((ClipperLib.IntPoint.op_Equality(e.Next.Top, e.Top)) && e.Next.NextInLML === null)\n\t      result = e.Next;\n\t    else if ((ClipperLib.IntPoint.op_Equality(e.Prev.Top, e.Top)) && e.Prev.NextInLML === null)\n\t      result = e.Prev;\n\t    if (result !== null && (result.OutIdx == -2 || (result.NextInAEL == result.PrevInAEL && !ClipperLib.ClipperBase.IsHorizontal(result))))\n\t      return null;\n\t    return result;\n\t  };\n\t\n\t  ClipperLib.Clipper.prototype.ProcessIntersections = function (topY)\n\t  {\n\t    if (this.m_ActiveEdges == null)\n\t      return true;\n\t    try\n\t    {\n\t      this.BuildIntersectList(topY);\n\t      if (this.m_IntersectList.length == 0)\n\t        return true;\n\t      if (this.m_IntersectList.length == 1 || this.FixupIntersectionOrder())\n\t        this.ProcessIntersectList();\n\t      else\n\t        return false;\n\t    }\n\t    catch ($$e2)\n\t    {\n\t      this.m_SortedEdges = null;\n\t      this.m_IntersectList.length = 0;\n\t      ClipperLib.Error(\"ProcessIntersections error\");\n\t    }\n\t    this.m_SortedEdges = null;\n\t    return true;\n\t  };\n\t  ClipperLib.Clipper.prototype.BuildIntersectList = function (topY)\n\t  {\n\t    if (this.m_ActiveEdges === null)\n\t      return;\n\t    //prepare for sorting ...\n\t    var e = this.m_ActiveEdges;\n\t    //console.log(JSON.stringify(JSON.decycle( e )));\n\t    this.m_SortedEdges = e;\n\t    while (e !== null)\n\t    {\n\t      e.PrevInSEL = e.PrevInAEL;\n\t      e.NextInSEL = e.NextInAEL;\n\t      e.Curr.X = ClipperLib.Clipper.TopX(e, topY);\n\t      e = e.NextInAEL;\n\t    }\n\t    //bubblesort ...\n\t    var isModified = true;\n\t    while (isModified && this.m_SortedEdges !== null)\n\t    {\n\t      isModified = false;\n\t      e = this.m_SortedEdges;\n\t      while (e.NextInSEL !== null)\n\t      {\n\t        var eNext = e.NextInSEL;\n\t        var pt = new ClipperLib.IntPoint();\n\t        //console.log(\"e.Curr.X: \" + e.Curr.X + \" eNext.Curr.X\" + eNext.Curr.X);\n\t        if (e.Curr.X > eNext.Curr.X)\n\t        {\n\t\t\t\t\t\tthis.IntersectPoint(e, eNext, pt);\n\t          var newNode = new ClipperLib.IntersectNode();\n\t          newNode.Edge1 = e;\n\t          newNode.Edge2 = eNext;\n\t          //newNode.Pt = pt;\n\t          newNode.Pt.X = pt.X;\n\t          newNode.Pt.Y = pt.Y;\n\t          this.m_IntersectList.push(newNode);\n\t          this.SwapPositionsInSEL(e, eNext);\n\t          isModified = true;\n\t        }\n\t        else\n\t          e = eNext;\n\t      }\n\t      if (e.PrevInSEL !== null)\n\t        e.PrevInSEL.NextInSEL = null;\n\t      else\n\t        break;\n\t    }\n\t    this.m_SortedEdges = null;\n\t  };\n\t  ClipperLib.Clipper.prototype.EdgesAdjacent = function (inode)\n\t  {\n\t    return (inode.Edge1.NextInSEL == inode.Edge2) || (inode.Edge1.PrevInSEL == inode.Edge2);\n\t  };\n\t  ClipperLib.Clipper.IntersectNodeSort = function (node1, node2)\n\t  {\n\t    //the following typecast is safe because the differences in Pt.Y will\n\t    //be limited to the height of the scanbeam.\n\t    return (node2.Pt.Y - node1.Pt.Y);\n\t  };\n\t  ClipperLib.Clipper.prototype.FixupIntersectionOrder = function ()\n\t  {\n\t    //pre-condition: intersections are sorted bottom-most first.\n\t    //Now it's crucial that intersections are made only between adjacent edges,\n\t    //so to ensure this the order of intersections may need adjusting ...\n\t    this.m_IntersectList.sort(this.m_IntersectNodeComparer);\n\t    this.CopyAELToSEL();\n\t    var cnt = this.m_IntersectList.length;\n\t    for (var i = 0; i < cnt; i++)\n\t    {\n\t      if (!this.EdgesAdjacent(this.m_IntersectList[i]))\n\t      {\n\t        var j = i + 1;\n\t        while (j < cnt && !this.EdgesAdjacent(this.m_IntersectList[j]))\n\t          j++;\n\t        if (j == cnt)\n\t          return false;\n\t        var tmp = this.m_IntersectList[i];\n\t        this.m_IntersectList[i] = this.m_IntersectList[j];\n\t        this.m_IntersectList[j] = tmp;\n\t      }\n\t      this.SwapPositionsInSEL(this.m_IntersectList[i].Edge1, this.m_IntersectList[i].Edge2);\n\t    }\n\t    return true;\n\t  };\n\t  ClipperLib.Clipper.prototype.ProcessIntersectList = function ()\n\t  {\n\t    for (var i = 0, ilen = this.m_IntersectList.length; i < ilen; i++)\n\t    {\n\t      var iNode = this.m_IntersectList[i];\n\t      this.IntersectEdges(iNode.Edge1, iNode.Edge2, iNode.Pt);\n\t      this.SwapPositionsInAEL(iNode.Edge1, iNode.Edge2);\n\t    }\n\t    this.m_IntersectList.length = 0;\n\t  };\n\t  /*\n\t  --------------------------------\n\t  Round speedtest: http://jsperf.com/fastest-round\n\t  --------------------------------\n\t  */\n\t  var R1 = function (a)\n\t  {\n\t    return a < 0 ? Math.ceil(a - 0.5) : Math.round(a)\n\t  };\n\t  var R2 = function (a)\n\t  {\n\t    return a < 0 ? Math.ceil(a - 0.5) : Math.floor(a + 0.5)\n\t  };\n\t  var R3 = function (a)\n\t  {\n\t    return a < 0 ? -Math.round(Math.abs(a)) : Math.round(a)\n\t  };\n\t  var R4 = function (a)\n\t  {\n\t    if (a < 0)\n\t    {\n\t      a -= 0.5;\n\t      return a < -2147483648 ? Math.ceil(a) : a | 0;\n\t    }\n\t    else\n\t    {\n\t      a += 0.5;\n\t      return a > 2147483647 ? Math.floor(a) : a | 0;\n\t    }\n\t  };\n\t  if (browser.msie) ClipperLib.Clipper.Round = R1;\n\t  else if (browser.chromium) ClipperLib.Clipper.Round = R3;\n\t  else if (browser.safari) ClipperLib.Clipper.Round = R4;\n\t  else ClipperLib.Clipper.Round = R2; // eg. browser.chrome || browser.firefox || browser.opera\n\t  ClipperLib.Clipper.TopX = function (edge, currentY)\n\t  {\n\t    //if (edge.Bot == edge.Curr) alert (\"edge.Bot = edge.Curr\");\n\t    //if (edge.Bot == edge.Top) alert (\"edge.Bot = edge.Top\");\n\t    if (currentY == edge.Top.Y)\n\t      return edge.Top.X;\n\t    return edge.Bot.X + ClipperLib.Clipper.Round(edge.Dx * (currentY - edge.Bot.Y));\n\t  };\n\t  ClipperLib.Clipper.prototype.IntersectPoint = function (edge1, edge2, ip)\n\t  {\n\t    ip.X = 0;\n\t    ip.Y = 0;\n\t    var b1, b2;\n\t    //nb: with very large coordinate values, it's possible for SlopesEqual() to\n\t    //return false but for the edge.Dx value be equal due to double precision rounding.\n\t    if (edge1.Dx == edge2.Dx)\n\t\t\t{\n\t\t\t\tip.Y = edge1.Curr.Y;\n\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n\t\t\t\treturn;\n\t    }\n\t    if (edge1.Delta.X === 0)\n\t    {\n\t      ip.X = edge1.Bot.X;\n\t      if (ClipperLib.ClipperBase.IsHorizontal(edge2))\n\t      {\n\t        ip.Y = edge2.Bot.Y;\n\t      }\n\t      else\n\t      {\n\t        b2 = edge2.Bot.Y - (edge2.Bot.X / edge2.Dx);\n\t        ip.Y = ClipperLib.Clipper.Round(ip.X / edge2.Dx + b2);\n\t      }\n\t    }\n\t    else if (edge2.Delta.X === 0)\n\t    {\n\t      ip.X = edge2.Bot.X;\n\t      if (ClipperLib.ClipperBase.IsHorizontal(edge1))\n\t      {\n\t        ip.Y = edge1.Bot.Y;\n\t      }\n\t      else\n\t      {\n\t        b1 = edge1.Bot.Y - (edge1.Bot.X / edge1.Dx);\n\t        ip.Y = ClipperLib.Clipper.Round(ip.X / edge1.Dx + b1);\n\t      }\n\t    }\n\t    else\n\t    {\n\t      b1 = edge1.Bot.X - edge1.Bot.Y * edge1.Dx;\n\t      b2 = edge2.Bot.X - edge2.Bot.Y * edge2.Dx;\n\t      var q = (b2 - b1) / (edge1.Dx - edge2.Dx);\n\t      ip.Y = ClipperLib.Clipper.Round(q);\n\t      if (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n\t        ip.X = ClipperLib.Clipper.Round(edge1.Dx * q + b1);\n\t      else\n\t        ip.X = ClipperLib.Clipper.Round(edge2.Dx * q + b2);\n\t    }\n\t    if (ip.Y < edge1.Top.Y || ip.Y < edge2.Top.Y)\n\t    {\n\t      if (edge1.Top.Y > edge2.Top.Y)\n\t      {\n\t        ip.Y = edge1.Top.Y;\n\t        ip.X = ClipperLib.Clipper.TopX(edge2, edge1.Top.Y);\n\t        return ip.X < edge1.Top.X;\n\t      }\n\t      else\n\t        ip.Y = edge2.Top.Y;\n\t      if (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n\t        ip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n\t      else\n\t        ip.X = ClipperLib.Clipper.TopX(edge2, ip.Y);\n\t    }\n\t\t\t//finally, don't allow 'ip' to be BELOW curr.Y (ie bottom of scanbeam) ...\n\t\t\tif (ip.Y > edge1.Curr.Y)\n\t\t\t{\n\t\t\t\tip.Y = edge1.Curr.Y;\n\t\t\t\t//better to use the more vertical edge to derive X ...\n\t\t\t\tif (Math.abs(edge1.Dx) > Math.abs(edge2.Dx))\n\t\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge2, ip.Y);\n\t\t\t\telse\n\t\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n\t\t\t}\n\t  };\n\t\n\t  ClipperLib.Clipper.prototype.ProcessEdgesAtTopOfScanbeam = function (topY)\n\t  {\n\t    var e = this.m_ActiveEdges;\n\t    while (e !== null)\n\t    {\n\t      //1. process maxima, treating them as if they're 'bent' horizontal edges,\n\t      //   but exclude maxima with horizontal edges. nb: e can't be a horizontal.\n\t      var IsMaximaEdge = this.IsMaxima(e, topY);\n\t      if (IsMaximaEdge)\n\t      {\n\t        var eMaxPair = this.GetMaximaPair(e);\n\t        IsMaximaEdge = (eMaxPair === null || !ClipperLib.ClipperBase.IsHorizontal(eMaxPair));\n\t      }\n\t      if (IsMaximaEdge)\n\t      {\n\t        var ePrev = e.PrevInAEL;\n\t        this.DoMaxima(e);\n\t        if (ePrev === null)\n\t          e = this.m_ActiveEdges;\n\t        else\n\t          e = ePrev.NextInAEL;\n\t      }\n\t      else\n\t      {\n\t        //2. promote horizontal edges, otherwise update Curr.X and Curr.Y ...\n\t        if (this.IsIntermediate(e, topY) && ClipperLib.ClipperBase.IsHorizontal(e.NextInLML))\n\t        {\n\t          e = this.UpdateEdgeIntoAEL(e);\n\t          if (e.OutIdx >= 0)\n\t            this.AddOutPt(e, e.Bot);\n\t          this.AddEdgeToSEL(e);\n\t        }\n\t        else\n\t        {\n\t          e.Curr.X = ClipperLib.Clipper.TopX(e, topY);\n\t          e.Curr.Y = topY;\n\t        }\n\t        if (this.StrictlySimple)\n\t        {\n\t          var ePrev = e.PrevInAEL;\n\t          if ((e.OutIdx >= 0) && (e.WindDelta !== 0) && ePrev !== null &&\n\t            (ePrev.OutIdx >= 0) && (ePrev.Curr.X == e.Curr.X) &&\n\t            (ePrev.WindDelta !== 0))\n\t          {\n\t           \tvar ip = new ClipperLib.IntPoint(e.Curr);\n\t\n\t\t\t\t\t\t\tif(use_xyz)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.SetZ(ip, ePrev, e);\n\t\t\t\t\t\t\t}\n\t\n\t            var op = this.AddOutPt(ePrev, ip);\n\t            var op2 = this.AddOutPt(e, ip);\n\t            this.AddJoin(op, op2, ip);\n\t            //StrictlySimple (type-3) join\n\t          }\n\t        }\n\t        e = e.NextInAEL;\n\t      }\n\t    }\n\t    //3. Process horizontals at the Top of the scanbeam ...\n\t    this.ProcessHorizontals(true);\n\t    //4. Promote intermediate vertices ...\n\t    e = this.m_ActiveEdges;\n\t    while (e !== null)\n\t    {\n\t      if (this.IsIntermediate(e, topY))\n\t      {\n\t        var op = null;\n\t        if (e.OutIdx >= 0)\n\t          op = this.AddOutPt(e, e.Top);\n\t        e = this.UpdateEdgeIntoAEL(e);\n\t        //if output polygons share an edge, they'll need joining later ...\n\t        var ePrev = e.PrevInAEL;\n\t        var eNext = e.NextInAEL;\n\t        if (ePrev !== null && ePrev.Curr.X == e.Bot.X &&\n\t          ePrev.Curr.Y == e.Bot.Y && op !== null &&\n\t          ePrev.OutIdx >= 0 && ePrev.Curr.Y > ePrev.Top.Y &&\n\t          ClipperLib.ClipperBase.SlopesEqual(e, ePrev, this.m_UseFullRange) &&\n\t          (e.WindDelta !== 0) && (ePrev.WindDelta !== 0))\n\t        {\n\t          var op2 = this.AddOutPt(ePrev, e.Bot);\n\t          this.AddJoin(op, op2, e.Top);\n\t        }\n\t        else if (eNext !== null && eNext.Curr.X == e.Bot.X &&\n\t          eNext.Curr.Y == e.Bot.Y && op !== null &&\n\t          eNext.OutIdx >= 0 && eNext.Curr.Y > eNext.Top.Y &&\n\t          ClipperLib.ClipperBase.SlopesEqual(e, eNext, this.m_UseFullRange) &&\n\t          (e.WindDelta !== 0) && (eNext.WindDelta !== 0))\n\t        {\n\t          var op2 = this.AddOutPt(eNext, e.Bot);\n\t          this.AddJoin(op, op2, e.Top);\n\t        }\n\t      }\n\t      e = e.NextInAEL;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.DoMaxima = function (e)\n\t  {\n\t    var eMaxPair = this.GetMaximaPair(e);\n\t    if (eMaxPair === null)\n\t    {\n\t      if (e.OutIdx >= 0)\n\t        this.AddOutPt(e, e.Top);\n\t      this.DeleteFromAEL(e);\n\t      return;\n\t    }\n\t    var eNext = e.NextInAEL;\n\t    var use_lines = true;\n\t    while (eNext !== null && eNext != eMaxPair)\n\t    {\n\t      this.IntersectEdges(e, eNext, e.Top);\n\t      this.SwapPositionsInAEL(e, eNext);\n\t      eNext = e.NextInAEL;\n\t    }\n\t    if (e.OutIdx == -1 && eMaxPair.OutIdx == -1)\n\t    {\n\t      this.DeleteFromAEL(e);\n\t      this.DeleteFromAEL(eMaxPair);\n\t    }\n\t    else if (e.OutIdx >= 0 && eMaxPair.OutIdx >= 0)\n\t    {\n\t    \tif (e.OutIdx >= 0) this.AddLocalMaxPoly(e, eMaxPair, e.Top);\n\t      this.DeleteFromAEL(e);\n\t      this.DeleteFromAEL(eMaxPair);\n\t    }\n\t    else if (use_lines && e.WindDelta === 0)\n\t    {\n\t      if (e.OutIdx >= 0)\n\t      {\n\t        this.AddOutPt(e, e.Top);\n\t        e.OutIdx = -1;\n\t      }\n\t      this.DeleteFromAEL(e);\n\t      if (eMaxPair.OutIdx >= 0)\n\t      {\n\t        this.AddOutPt(eMaxPair, e.Top);\n\t        eMaxPair.OutIdx = -1;\n\t      }\n\t      this.DeleteFromAEL(eMaxPair);\n\t    }\n\t    else\n\t      ClipperLib.Error(\"DoMaxima error\");\n\t  };\n\t  ClipperLib.Clipper.ReversePaths = function (polys)\n\t  {\n\t    for (var i = 0, len = polys.length; i < len; i++)\n\t      polys[i].reverse();\n\t  };\n\t  ClipperLib.Clipper.Orientation = function (poly)\n\t  {\n\t    return ClipperLib.Clipper.Area(poly) >= 0;\n\t  };\n\t  ClipperLib.Clipper.prototype.PointCount = function (pts)\n\t  {\n\t    if (pts === null)\n\t      return 0;\n\t    var result = 0;\n\t    var p = pts;\n\t    do {\n\t      result++;\n\t      p = p.Next;\n\t    }\n\t    while (p != pts)\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.prototype.BuildResult = function (polyg)\n\t  {\n\t    ClipperLib.Clear(polyg);\n\t    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t    {\n\t      var outRec = this.m_PolyOuts[i];\n\t      if (outRec.Pts === null)\n\t        continue;\n\t      var p = outRec.Pts.Prev;\n\t      var cnt = this.PointCount(p);\n\t      if (cnt < 2)\n\t        continue;\n\t      var pg = new Array(cnt);\n\t      for (var j = 0; j < cnt; j++)\n\t      {\n\t        pg[j] = p.Pt;\n\t        p = p.Prev;\n\t      }\n\t      polyg.push(pg);\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.BuildResult2 = function (polytree)\n\t  {\n\t    polytree.Clear();\n\t    //add each output polygon/contour to polytree ...\n\t    //polytree.m_AllPolys.set_Capacity(this.m_PolyOuts.length);\n\t    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t    {\n\t      var outRec = this.m_PolyOuts[i];\n\t      var cnt = this.PointCount(outRec.Pts);\n\t      if ((outRec.IsOpen && cnt < 2) || (!outRec.IsOpen && cnt < 3))\n\t        continue;\n\t      this.FixHoleLinkage(outRec);\n\t      var pn = new ClipperLib.PolyNode();\n\t      polytree.m_AllPolys.push(pn);\n\t      outRec.PolyNode = pn;\n\t      pn.m_polygon.length = cnt;\n\t      var op = outRec.Pts.Prev;\n\t      for (var j = 0; j < cnt; j++)\n\t      {\n\t        pn.m_polygon[j] = op.Pt;\n\t        op = op.Prev;\n\t      }\n\t    }\n\t    //fixup PolyNode links etc ...\n\t    //polytree.m_Childs.set_Capacity(this.m_PolyOuts.length);\n\t    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t    {\n\t      var outRec = this.m_PolyOuts[i];\n\t      if (outRec.PolyNode === null)\n\t        continue;\n\t      else if (outRec.IsOpen)\n\t      {\n\t        outRec.PolyNode.IsOpen = true;\n\t        polytree.AddChild(outRec.PolyNode);\n\t      }\n\t      else if (outRec.FirstLeft !== null && outRec.FirstLeft.PolyNode != null)\n\t        outRec.FirstLeft.PolyNode.AddChild(outRec.PolyNode);\n\t      else\n\t        polytree.AddChild(outRec.PolyNode);\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.FixupOutPolygon = function (outRec)\n\t  {\n\t    //FixupOutPolygon() - removes duplicate points and simplifies consecutive\n\t    //parallel edges by removing the middle vertex.\n\t    var lastOK = null;\n\t    outRec.BottomPt = null;\n\t    var pp = outRec.Pts;\n\t    for (;;)\n\t    {\n\t      if (pp.Prev == pp || pp.Prev == pp.Next)\n\t      {\n\t        outRec.Pts = null;\n\t        return;\n\t      }\n\t      //test for duplicate points and collinear edges ...\n\t      if ((ClipperLib.IntPoint.op_Equality(pp.Pt, pp.Next.Pt)) || (ClipperLib.IntPoint.op_Equality(pp.Pt, pp.Prev.Pt)) ||\n\t        (ClipperLib.ClipperBase.SlopesEqual(pp.Prev.Pt, pp.Pt, pp.Next.Pt, this.m_UseFullRange) &&\n\t          (!this.PreserveCollinear || !this.Pt2IsBetweenPt1AndPt3(pp.Prev.Pt, pp.Pt, pp.Next.Pt))))\n\t      {\n\t        lastOK = null;\n\t        pp.Prev.Next = pp.Next;\n\t        pp.Next.Prev = pp.Prev;\n\t        pp = pp.Prev;\n\t      }\n\t      else if (pp == lastOK)\n\t        break;\n\t      else\n\t      {\n\t        if (lastOK === null)\n\t          lastOK = pp;\n\t        pp = pp.Next;\n\t      }\n\t    }\n\t    outRec.Pts = pp;\n\t  };\n\t  ClipperLib.Clipper.prototype.DupOutPt = function (outPt, InsertAfter)\n\t  {\n\t    var result = new ClipperLib.OutPt();\n\t    //result.Pt = outPt.Pt;\n\t    result.Pt.X = outPt.Pt.X;\n\t    result.Pt.Y = outPt.Pt.Y;\n\t    result.Idx = outPt.Idx;\n\t    if (InsertAfter)\n\t    {\n\t      result.Next = outPt.Next;\n\t      result.Prev = outPt;\n\t      outPt.Next.Prev = result;\n\t      outPt.Next = result;\n\t    }\n\t    else\n\t    {\n\t      result.Prev = outPt.Prev;\n\t      result.Next = outPt;\n\t      outPt.Prev.Next = result;\n\t      outPt.Prev = result;\n\t    }\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.prototype.GetOverlap = function (a1, a2, b1, b2, $val)\n\t  {\n\t    if (a1 < a2)\n\t    {\n\t      if (b1 < b2)\n\t      {\n\t        $val.Left = Math.max(a1, b1);\n\t        $val.Right = Math.min(a2, b2);\n\t      }\n\t      else\n\t      {\n\t        $val.Left = Math.max(a1, b2);\n\t        $val.Right = Math.min(a2, b1);\n\t      }\n\t    }\n\t    else\n\t    {\n\t      if (b1 < b2)\n\t      {\n\t        $val.Left = Math.max(a2, b1);\n\t        $val.Right = Math.min(a1, b2);\n\t      }\n\t      else\n\t      {\n\t        $val.Left = Math.max(a2, b2);\n\t        $val.Right = Math.min(a1, b1);\n\t      }\n\t    }\n\t    return $val.Left < $val.Right;\n\t  };\n\t  ClipperLib.Clipper.prototype.JoinHorz = function (op1, op1b, op2, op2b, Pt, DiscardLeft)\n\t  {\n\t    var Dir1 = (op1.Pt.X > op1b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight);\n\t    var Dir2 = (op2.Pt.X > op2b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight);\n\t    if (Dir1 == Dir2)\n\t      return false;\n\t    //When DiscardLeft, we want Op1b to be on the Left of Op1, otherwise we\n\t    //want Op1b to be on the Right. (And likewise with Op2 and Op2b.)\n\t    //So, to facilitate this while inserting Op1b and Op2b ...\n\t    //when DiscardLeft, make sure we're AT or RIGHT of Pt before adding Op1b,\n\t    //otherwise make sure we're AT or LEFT of Pt. (Likewise with Op2b.)\n\t    if (Dir1 == ClipperLib.Direction.dLeftToRight)\n\t    {\n\t      while (op1.Next.Pt.X <= Pt.X &&\n\t        op1.Next.Pt.X >= op1.Pt.X && op1.Next.Pt.Y == Pt.Y)\n\t        op1 = op1.Next;\n\t      if (DiscardLeft && (op1.Pt.X != Pt.X))\n\t        op1 = op1.Next;\n\t      op1b = this.DupOutPt(op1, !DiscardLeft);\n\t      if (ClipperLib.IntPoint.op_Inequality(op1b.Pt, Pt))\n\t      {\n\t        op1 = op1b;\n\t        //op1.Pt = Pt;\n\t        op1.Pt.X = Pt.X;\n\t        op1.Pt.Y = Pt.Y;\n\t        op1b = this.DupOutPt(op1, !DiscardLeft);\n\t      }\n\t    }\n\t    else\n\t    {\n\t      while (op1.Next.Pt.X >= Pt.X &&\n\t        op1.Next.Pt.X <= op1.Pt.X && op1.Next.Pt.Y == Pt.Y)\n\t        op1 = op1.Next;\n\t      if (!DiscardLeft && (op1.Pt.X != Pt.X))\n\t        op1 = op1.Next;\n\t      op1b = this.DupOutPt(op1, DiscardLeft);\n\t      if (ClipperLib.IntPoint.op_Inequality(op1b.Pt, Pt))\n\t      {\n\t        op1 = op1b;\n\t        //op1.Pt = Pt;\n\t        op1.Pt.X = Pt.X;\n\t        op1.Pt.Y = Pt.Y;\n\t        op1b = this.DupOutPt(op1, DiscardLeft);\n\t      }\n\t    }\n\t    if (Dir2 == ClipperLib.Direction.dLeftToRight)\n\t    {\n\t      while (op2.Next.Pt.X <= Pt.X &&\n\t        op2.Next.Pt.X >= op2.Pt.X && op2.Next.Pt.Y == Pt.Y)\n\t        op2 = op2.Next;\n\t      if (DiscardLeft && (op2.Pt.X != Pt.X))\n\t        op2 = op2.Next;\n\t      op2b = this.DupOutPt(op2, !DiscardLeft);\n\t      if (ClipperLib.IntPoint.op_Inequality(op2b.Pt, Pt))\n\t      {\n\t        op2 = op2b;\n\t        //op2.Pt = Pt;\n\t        op2.Pt.X = Pt.X;\n\t        op2.Pt.Y = Pt.Y;\n\t        op2b = this.DupOutPt(op2, !DiscardLeft);\n\t      }\n\t    }\n\t    else\n\t    {\n\t      while (op2.Next.Pt.X >= Pt.X &&\n\t        op2.Next.Pt.X <= op2.Pt.X && op2.Next.Pt.Y == Pt.Y)\n\t        op2 = op2.Next;\n\t      if (!DiscardLeft && (op2.Pt.X != Pt.X))\n\t        op2 = op2.Next;\n\t      op2b = this.DupOutPt(op2, DiscardLeft);\n\t      if (ClipperLib.IntPoint.op_Inequality(op2b.Pt, Pt))\n\t      {\n\t        op2 = op2b;\n\t        //op2.Pt = Pt;\n\t        op2.Pt.X = Pt.X;\n\t        op2.Pt.Y = Pt.Y;\n\t        op2b = this.DupOutPt(op2, DiscardLeft);\n\t      }\n\t    }\n\t    if ((Dir1 == ClipperLib.Direction.dLeftToRight) == DiscardLeft)\n\t    {\n\t      op1.Prev = op2;\n\t      op2.Next = op1;\n\t      op1b.Next = op2b;\n\t      op2b.Prev = op1b;\n\t    }\n\t    else\n\t    {\n\t      op1.Next = op2;\n\t      op2.Prev = op1;\n\t      op1b.Prev = op2b;\n\t      op2b.Next = op1b;\n\t    }\n\t    return true;\n\t  };\n\t  ClipperLib.Clipper.prototype.JoinPoints = function (j, outRec1, outRec2)\n\t  {\n\t    var op1 = j.OutPt1,\n\t      op1b = new ClipperLib.OutPt();\n\t    var op2 = j.OutPt2,\n\t      op2b = new ClipperLib.OutPt();\n\t    //There are 3 kinds of joins for output polygons ...\n\t    //1. Horizontal joins where Join.OutPt1 & Join.OutPt2 are a vertices anywhere\n\t    //along (horizontal) collinear edges (& Join.OffPt is on the same horizontal).\n\t    //2. Non-horizontal joins where Join.OutPt1 & Join.OutPt2 are at the same\n\t    //location at the Bottom of the overlapping segment (& Join.OffPt is above).\n\t    //3. StrictlySimple joins where edges touch but are not collinear and where\n\t    //Join.OutPt1, Join.OutPt2 & Join.OffPt all share the same point.\n\t    var isHorizontal = (j.OutPt1.Pt.Y == j.OffPt.Y);\n\t    if (isHorizontal && (ClipperLib.IntPoint.op_Equality(j.OffPt, j.OutPt1.Pt)) && (ClipperLib.IntPoint.op_Equality(j.OffPt, j.OutPt2.Pt)))\n\t    {\n\t      //Strictly Simple join ...\n\t\t\t\tif (outRec1 != outRec2) return false;\n\t\n\t      op1b = j.OutPt1.Next;\n\t      while (op1b != op1 && (ClipperLib.IntPoint.op_Equality(op1b.Pt, j.OffPt)))\n\t        op1b = op1b.Next;\n\t      var reverse1 = (op1b.Pt.Y > j.OffPt.Y);\n\t      op2b = j.OutPt2.Next;\n\t      while (op2b != op2 && (ClipperLib.IntPoint.op_Equality(op2b.Pt, j.OffPt)))\n\t        op2b = op2b.Next;\n\t      var reverse2 = (op2b.Pt.Y > j.OffPt.Y);\n\t      if (reverse1 == reverse2)\n\t        return false;\n\t      if (reverse1)\n\t      {\n\t        op1b = this.DupOutPt(op1, false);\n\t        op2b = this.DupOutPt(op2, true);\n\t        op1.Prev = op2;\n\t        op2.Next = op1;\n\t        op1b.Next = op2b;\n\t        op2b.Prev = op1b;\n\t        j.OutPt1 = op1;\n\t        j.OutPt2 = op1b;\n\t        return true;\n\t      }\n\t      else\n\t      {\n\t        op1b = this.DupOutPt(op1, true);\n\t        op2b = this.DupOutPt(op2, false);\n\t        op1.Next = op2;\n\t        op2.Prev = op1;\n\t        op1b.Prev = op2b;\n\t        op2b.Next = op1b;\n\t        j.OutPt1 = op1;\n\t        j.OutPt2 = op1b;\n\t        return true;\n\t      }\n\t    }\n\t    else if (isHorizontal)\n\t    {\n\t      //treat horizontal joins differently to non-horizontal joins since with\n\t      //them we're not yet sure where the overlapping is. OutPt1.Pt & OutPt2.Pt\n\t      //may be anywhere along the horizontal edge.\n\t      op1b = op1;\n\t      while (op1.Prev.Pt.Y == op1.Pt.Y && op1.Prev != op1b && op1.Prev != op2)\n\t        op1 = op1.Prev;\n\t      while (op1b.Next.Pt.Y == op1b.Pt.Y && op1b.Next != op1 && op1b.Next != op2)\n\t        op1b = op1b.Next;\n\t      if (op1b.Next == op1 || op1b.Next == op2)\n\t        return false;\n\t      //a flat 'polygon'\n\t      op2b = op2;\n\t      while (op2.Prev.Pt.Y == op2.Pt.Y && op2.Prev != op2b && op2.Prev != op1b)\n\t        op2 = op2.Prev;\n\t      while (op2b.Next.Pt.Y == op2b.Pt.Y && op2b.Next != op2 && op2b.Next != op1)\n\t        op2b = op2b.Next;\n\t      if (op2b.Next == op2 || op2b.Next == op1)\n\t        return false;\n\t      //a flat 'polygon'\n\t      //Op1 -. Op1b & Op2 -. Op2b are the extremites of the horizontal edges\n\t\n\t      var $val = {Left: null, Right: null};\n\t      if (!this.GetOverlap(op1.Pt.X, op1b.Pt.X, op2.Pt.X, op2b.Pt.X, $val))\n\t        return false;\n\t      var Left = $val.Left;\n\t      var Right = $val.Right;\n\t\n\t      //DiscardLeftSide: when overlapping edges are joined, a spike will created\n\t      //which needs to be cleaned up. However, we don't want Op1 or Op2 caught up\n\t      //on the discard Side as either may still be needed for other joins ...\n\t      var Pt = new ClipperLib.IntPoint();\n\t      var DiscardLeftSide;\n\t      if (op1.Pt.X >= Left && op1.Pt.X <= Right)\n\t      {\n\t        //Pt = op1.Pt;\n\t        Pt.X = op1.Pt.X;\n\t        Pt.Y = op1.Pt.Y;\n\t        DiscardLeftSide = (op1.Pt.X > op1b.Pt.X);\n\t      }\n\t      else if (op2.Pt.X >= Left && op2.Pt.X <= Right)\n\t      {\n\t        //Pt = op2.Pt;\n\t        Pt.X = op2.Pt.X;\n\t        Pt.Y = op2.Pt.Y;\n\t        DiscardLeftSide = (op2.Pt.X > op2b.Pt.X);\n\t      }\n\t      else if (op1b.Pt.X >= Left && op1b.Pt.X <= Right)\n\t      {\n\t        //Pt = op1b.Pt;\n\t        Pt.X = op1b.Pt.X;\n\t        Pt.Y = op1b.Pt.Y;\n\t        DiscardLeftSide = op1b.Pt.X > op1.Pt.X;\n\t      }\n\t      else\n\t      {\n\t        //Pt = op2b.Pt;\n\t        Pt.X = op2b.Pt.X;\n\t        Pt.Y = op2b.Pt.Y;\n\t        DiscardLeftSide = (op2b.Pt.X > op2.Pt.X);\n\t      }\n\t      j.OutPt1 = op1;\n\t      j.OutPt2 = op2;\n\t      return this.JoinHorz(op1, op1b, op2, op2b, Pt, DiscardLeftSide);\n\t    }\n\t    else\n\t    {\n\t      //nb: For non-horizontal joins ...\n\t      //    1. Jr.OutPt1.Pt.Y == Jr.OutPt2.Pt.Y\n\t      //    2. Jr.OutPt1.Pt > Jr.OffPt.Y\n\t      //make sure the polygons are correctly oriented ...\n\t      op1b = op1.Next;\n\t      while ((ClipperLib.IntPoint.op_Equality(op1b.Pt, op1.Pt)) && (op1b != op1))\n\t        op1b = op1b.Next;\n\t      var Reverse1 = ((op1b.Pt.Y > op1.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op1.Pt, op1b.Pt, j.OffPt, this.m_UseFullRange));\n\t      if (Reverse1)\n\t      {\n\t        op1b = op1.Prev;\n\t        while ((ClipperLib.IntPoint.op_Equality(op1b.Pt, op1.Pt)) && (op1b != op1))\n\t          op1b = op1b.Prev;\n\t        if ((op1b.Pt.Y > op1.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op1.Pt, op1b.Pt, j.OffPt, this.m_UseFullRange))\n\t          return false;\n\t      }\n\t      op2b = op2.Next;\n\t      while ((ClipperLib.IntPoint.op_Equality(op2b.Pt, op2.Pt)) && (op2b != op2))\n\t        op2b = op2b.Next;\n\t      var Reverse2 = ((op2b.Pt.Y > op2.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op2.Pt, op2b.Pt, j.OffPt, this.m_UseFullRange));\n\t      if (Reverse2)\n\t      {\n\t        op2b = op2.Prev;\n\t        while ((ClipperLib.IntPoint.op_Equality(op2b.Pt, op2.Pt)) && (op2b != op2))\n\t          op2b = op2b.Prev;\n\t        if ((op2b.Pt.Y > op2.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op2.Pt, op2b.Pt, j.OffPt, this.m_UseFullRange))\n\t          return false;\n\t      }\n\t      if ((op1b == op1) || (op2b == op2) || (op1b == op2b) ||\n\t        ((outRec1 == outRec2) && (Reverse1 == Reverse2)))\n\t        return false;\n\t      if (Reverse1)\n\t      {\n\t        op1b = this.DupOutPt(op1, false);\n\t        op2b = this.DupOutPt(op2, true);\n\t        op1.Prev = op2;\n\t        op2.Next = op1;\n\t        op1b.Next = op2b;\n\t        op2b.Prev = op1b;\n\t        j.OutPt1 = op1;\n\t        j.OutPt2 = op1b;\n\t        return true;\n\t      }\n\t      else\n\t      {\n\t        op1b = this.DupOutPt(op1, true);\n\t        op2b = this.DupOutPt(op2, false);\n\t        op1.Next = op2;\n\t        op2.Prev = op1;\n\t        op1b.Prev = op2b;\n\t        op2b.Next = op1b;\n\t        j.OutPt1 = op1;\n\t        j.OutPt2 = op1b;\n\t        return true;\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.Clipper.GetBounds = function (paths)\n\t  {\n\t    var i = 0,\n\t      cnt = paths.length;\n\t    while (i < cnt && paths[i].length == 0) i++;\n\t    if (i == cnt) return new ClipperLib.IntRect(0, 0, 0, 0);\n\t    var result = new ClipperLib.IntRect();\n\t    result.left = paths[i][0].X;\n\t    result.right = result.left;\n\t    result.top = paths[i][0].Y;\n\t    result.bottom = result.top;\n\t    for (; i < cnt; i++)\n\t      for (var j = 0, jlen = paths[i].length; j < jlen; j++)\n\t      {\n\t        if (paths[i][j].X < result.left) result.left = paths[i][j].X;\n\t        else if (paths[i][j].X > result.right) result.right = paths[i][j].X;\n\t        if (paths[i][j].Y < result.top) result.top = paths[i][j].Y;\n\t        else if (paths[i][j].Y > result.bottom) result.bottom = paths[i][j].Y;\n\t      }\n\t    return result;\n\t  }\n\t  ClipperLib.Clipper.prototype.GetBounds2 = function (ops)\n\t  {\n\t    var opStart = ops;\n\t    var result = new ClipperLib.IntRect();\n\t    result.left = ops.Pt.X;\n\t    result.right = ops.Pt.X;\n\t    result.top = ops.Pt.Y;\n\t    result.bottom = ops.Pt.Y;\n\t    ops = ops.Next;\n\t    while (ops != opStart)\n\t    {\n\t      if (ops.Pt.X < result.left)\n\t        result.left = ops.Pt.X;\n\t      if (ops.Pt.X > result.right)\n\t        result.right = ops.Pt.X;\n\t      if (ops.Pt.Y < result.top)\n\t        result.top = ops.Pt.Y;\n\t      if (ops.Pt.Y > result.bottom)\n\t        result.bottom = ops.Pt.Y;\n\t      ops = ops.Next;\n\t    }\n\t    return result;\n\t  };\n\t\n\t  ClipperLib.Clipper.PointInPolygon = function (pt, path)\n\t  {\n\t    //returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n\t\t\t//See \"The Point in Polygon Problem for Arbitrary Polygons\" by Hormann & Agathos\n\t    //http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.5498&rep=rep1&type=pdf\n\t    var result = 0,\n\t      cnt = path.length;\n\t    if (cnt < 3)\n\t      return 0;\n\t    var ip = path[0];\n\t    for (var i = 1; i <= cnt; ++i)\n\t    {\n\t      var ipNext = (i == cnt ? path[0] : path[i]);\n\t      if (ipNext.Y == pt.Y)\n\t      {\n\t        if ((ipNext.X == pt.X) || (ip.Y == pt.Y && ((ipNext.X > pt.X) == (ip.X < pt.X))))\n\t          return -1;\n\t      }\n\t      if ((ip.Y < pt.Y) != (ipNext.Y < pt.Y))\n\t      {\n\t        if (ip.X >= pt.X)\n\t        {\n\t          if (ipNext.X > pt.X)\n\t            result = 1 - result;\n\t          else\n\t          {\n\t            var d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);\n\t            if (d == 0)\n\t              return -1;\n\t            else if ((d > 0) == (ipNext.Y > ip.Y))\n\t              result = 1 - result;\n\t          }\n\t        }\n\t        else\n\t        {\n\t          if (ipNext.X > pt.X)\n\t          {\n\t            var d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);\n\t            if (d == 0)\n\t              return -1;\n\t            else if ((d > 0) == (ipNext.Y > ip.Y))\n\t              result = 1 - result;\n\t          }\n\t        }\n\t      }\n\t      ip = ipNext;\n\t    }\n\t    return result;\n\t  };\n\t\n\t  ClipperLib.Clipper.prototype.PointInPolygon = function (pt, op)\n\t  {\n\t    //returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n\t\t\t//See \"The Point in Polygon Problem for Arbitrary Polygons\" by Hormann & Agathos\n\t    //http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.5498&rep=rep1&type=pdf\n\t    var result = 0;\n\t    var startOp = op;\n\t\t\tvar ptx = pt.X, pty = pt.Y;\n\t    var poly0x = op.Pt.X, poly0y = op.Pt.Y;\n\t    do\n\t    {\n\t\t\t\top = op.Next;\n\t\t\t\tvar poly1x = op.Pt.X, poly1y = op.Pt.Y;\n\t      if (poly1y == pty)\n\t      {\n\t        if ((poly1x == ptx) || (poly0y == pty && ((poly1x > ptx) == (poly0x < ptx))))\n\t          return -1;\n\t      }\n\t      if ((poly0y < pty) != (poly1y < pty))\n\t      {\n\t        if (poly0x >= ptx)\n\t        {\n\t          if (poly1x > ptx)\n\t            result = 1 - result;\n\t          else\n\t          {\n\t            var d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);\n\t            if (d == 0)\n\t              return -1;\n\t            if ((d > 0) == (poly1y > poly0y))\n\t              result = 1 - result;\n\t          }\n\t        }\n\t        else\n\t        {\n\t          if (poly1x > ptx)\n\t          {\n\t            var d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);\n\t            if (d == 0)\n\t              return -1;\n\t            if ((d > 0) == (poly1y > poly0y))\n\t              result = 1 - result;\n\t          }\n\t        }\n\t      }\n\t      poly0x = poly1x;\n\t      poly0y = poly1y;\n\t    } while (startOp != op);\n\t\n\t    return result;\n\t  };\n\t\n\t  ClipperLib.Clipper.prototype.Poly2ContainsPoly1 = function (outPt1, outPt2)\n\t  {\n\t    var op = outPt1;\n\t    do\n\t    {\n\t\t\t\t//nb: PointInPolygon returns 0 if false, +1 if true, -1 if pt on polygon\n\t      var res = this.PointInPolygon(op.Pt, outPt2);\n\t      if (res >= 0)\n\t        return res > 0;\n\t      op = op.Next;\n\t    }\n\t    while (op != outPt1)\n\t    return true;\n\t  };\n\t  ClipperLib.Clipper.prototype.FixupFirstLefts1 = function (OldOutRec, NewOutRec)\n\t  {\n\t    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t    {\n\t\t\t\tvar outRec = this.m_PolyOuts[i];\n\t\t\t\tif (outRec.Pts == null || outRec.FirstLeft == null)\n\t\t\t\t\tcontinue;\n\t\t\t\tvar firstLeft = this.ParseFirstLeft(outRec.FirstLeft);\n\t\t\t\tif (firstLeft == OldOutRec)\n\t\t\t\t{\n\t        if (this.Poly2ContainsPoly1(outRec.Pts, NewOutRec.Pts))\n\t          outRec.FirstLeft = NewOutRec;\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.FixupFirstLefts2 = function (OldOutRec, NewOutRec)\n\t  {\n\t    for (var $i2 = 0, $t2 = this.m_PolyOuts, $l2 = $t2.length, outRec = $t2[$i2]; $i2 < $l2; $i2++, outRec = $t2[$i2])\n\t      if (outRec.FirstLeft == OldOutRec)\n\t        outRec.FirstLeft = NewOutRec;\n\t  };\n\t  ClipperLib.Clipper.ParseFirstLeft = function (FirstLeft)\n\t  {\n\t    while (FirstLeft != null && FirstLeft.Pts == null)\n\t      FirstLeft = FirstLeft.FirstLeft;\n\t    return FirstLeft;\n\t  };\n\t  ClipperLib.Clipper.prototype.JoinCommonEdges = function ()\n\t  {\n\t    for (var i = 0, ilen = this.m_Joins.length; i < ilen; i++)\n\t    {\n\t      var join = this.m_Joins[i];\n\t      var outRec1 = this.GetOutRec(join.OutPt1.Idx);\n\t      var outRec2 = this.GetOutRec(join.OutPt2.Idx);\n\t      if (outRec1.Pts == null || outRec2.Pts == null)\n\t        continue;\n\t      //get the polygon fragment with the correct hole state (FirstLeft)\n\t      //before calling JoinPoints() ...\n\t      var holeStateRec;\n\t      if (outRec1 == outRec2)\n\t        holeStateRec = outRec1;\n\t      else if (this.Param1RightOfParam2(outRec1, outRec2))\n\t        holeStateRec = outRec2;\n\t      else if (this.Param1RightOfParam2(outRec2, outRec1))\n\t        holeStateRec = outRec1;\n\t      else\n\t        holeStateRec = this.GetLowermostRec(outRec1, outRec2);\n\t\n\t      if (!this.JoinPoints(join, outRec1, outRec2)) continue;\n\t\n\t      if (outRec1 == outRec2)\n\t      {\n\t        //instead of joining two polygons, we've just created a new one by\n\t        //splitting one polygon into two.\n\t        outRec1.Pts = join.OutPt1;\n\t        outRec1.BottomPt = null;\n\t        outRec2 = this.CreateOutRec();\n\t        outRec2.Pts = join.OutPt2;\n\t        //update all OutRec2.Pts Idx's ...\n\t        this.UpdateOutPtIdxs(outRec2);\n\t        //We now need to check every OutRec.FirstLeft pointer. If it points\n\t        //to OutRec1 it may need to point to OutRec2 instead ...\n\t        if (this.m_UsingPolyTree)\n\t          for (var j = 0, jlen = this.m_PolyOuts.length; j < jlen - 1; j++)\n\t          {\n\t            var oRec = this.m_PolyOuts[j];\n\t            if (oRec.Pts == null || ClipperLib.Clipper.ParseFirstLeft(oRec.FirstLeft) != outRec1 || oRec.IsHole == outRec1.IsHole)\n\t              continue;\n\t            if (this.Poly2ContainsPoly1(oRec.Pts, join.OutPt2))\n\t              oRec.FirstLeft = outRec2;\n\t          }\n\t        if (this.Poly2ContainsPoly1(outRec2.Pts, outRec1.Pts))\n\t        {\n\t          //outRec2 is contained by outRec1 ...\n\t          outRec2.IsHole = !outRec1.IsHole;\n\t          outRec2.FirstLeft = outRec1;\n\t          //fixup FirstLeft pointers that may need reassigning to OutRec1\n\t          if (this.m_UsingPolyTree)\n\t            this.FixupFirstLefts2(outRec2, outRec1);\n\t          if ((outRec2.IsHole ^ this.ReverseSolution) == (this.Area(outRec2) > 0))\n\t            this.ReversePolyPtLinks(outRec2.Pts);\n\t        }\n\t        else if (this.Poly2ContainsPoly1(outRec1.Pts, outRec2.Pts))\n\t        {\n\t          //outRec1 is contained by outRec2 ...\n\t          outRec2.IsHole = outRec1.IsHole;\n\t          outRec1.IsHole = !outRec2.IsHole;\n\t          outRec2.FirstLeft = outRec1.FirstLeft;\n\t          outRec1.FirstLeft = outRec2;\n\t          //fixup FirstLeft pointers that may need reassigning to OutRec1\n\t          if (this.m_UsingPolyTree)\n\t            this.FixupFirstLefts2(outRec1, outRec2);\n\t          if ((outRec1.IsHole ^ this.ReverseSolution) == (this.Area(outRec1) > 0))\n\t            this.ReversePolyPtLinks(outRec1.Pts);\n\t        }\n\t        else\n\t        {\n\t          //the 2 polygons are completely separate ...\n\t          outRec2.IsHole = outRec1.IsHole;\n\t          outRec2.FirstLeft = outRec1.FirstLeft;\n\t          //fixup FirstLeft pointers that may need reassigning to OutRec2\n\t          if (this.m_UsingPolyTree)\n\t            this.FixupFirstLefts1(outRec1, outRec2);\n\t        }\n\t      }\n\t      else\n\t      {\n\t        //joined 2 polygons together ...\n\t        outRec2.Pts = null;\n\t        outRec2.BottomPt = null;\n\t        outRec2.Idx = outRec1.Idx;\n\t        outRec1.IsHole = holeStateRec.IsHole;\n\t        if (holeStateRec == outRec2)\n\t          outRec1.FirstLeft = outRec2.FirstLeft;\n\t        outRec2.FirstLeft = outRec1;\n\t        //fixup FirstLeft pointers that may need reassigning to OutRec1\n\t        if (this.m_UsingPolyTree)\n\t          this.FixupFirstLefts2(outRec2, outRec1);\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.UpdateOutPtIdxs = function (outrec)\n\t  {\n\t    var op = outrec.Pts;\n\t    do {\n\t      op.Idx = outrec.Idx;\n\t      op = op.Prev;\n\t    }\n\t    while (op != outrec.Pts)\n\t  };\n\t  ClipperLib.Clipper.prototype.DoSimplePolygons = function ()\n\t  {\n\t    var i = 0;\n\t    while (i < this.m_PolyOuts.length)\n\t    {\n\t      var outrec = this.m_PolyOuts[i++];\n\t      var op = outrec.Pts;\n\t\t\t\tif (op == null || outrec.IsOpen)\n\t\t\t\t\tcontinue;\n\t      do //for each Pt in Polygon until duplicate found do ...\n\t      {\n\t        var op2 = op.Next;\n\t        while (op2 != outrec.Pts)\n\t        {\n\t          if ((ClipperLib.IntPoint.op_Equality(op.Pt, op2.Pt)) && op2.Next != op && op2.Prev != op)\n\t          {\n\t            //split the polygon into two ...\n\t            var op3 = op.Prev;\n\t            var op4 = op2.Prev;\n\t            op.Prev = op4;\n\t            op4.Next = op;\n\t            op2.Prev = op3;\n\t            op3.Next = op2;\n\t            outrec.Pts = op;\n\t            var outrec2 = this.CreateOutRec();\n\t            outrec2.Pts = op2;\n\t            this.UpdateOutPtIdxs(outrec2);\n\t            if (this.Poly2ContainsPoly1(outrec2.Pts, outrec.Pts))\n\t            {\n\t              //OutRec2 is contained by OutRec1 ...\n\t              outrec2.IsHole = !outrec.IsHole;\n\t              outrec2.FirstLeft = outrec;\n\t\t\t\t\t\t\t\tif (this.m_UsingPolyTree) this.FixupFirstLefts2(outrec2, outrec);\n\t\n\t            }\n\t            else if (this.Poly2ContainsPoly1(outrec.Pts, outrec2.Pts))\n\t            {\n\t              //OutRec1 is contained by OutRec2 ...\n\t              outrec2.IsHole = outrec.IsHole;\n\t              outrec.IsHole = !outrec2.IsHole;\n\t              outrec2.FirstLeft = outrec.FirstLeft;\n\t              outrec.FirstLeft = outrec2;\n\t              if (this.m_UsingPolyTree) this.FixupFirstLefts2(outrec, outrec2);\n\t            }\n\t            else\n\t            {\n\t              //the 2 polygons are separate ...\n\t              outrec2.IsHole = outrec.IsHole;\n\t              outrec2.FirstLeft = outrec.FirstLeft;\n\t\t\t\t\t\t\t\tif (this.m_UsingPolyTree) this.FixupFirstLefts1(outrec, outrec2);\n\t            }\n\t            op2 = op;\n\t            //ie get ready for the next iteration\n\t          }\n\t          op2 = op2.Next;\n\t        }\n\t        op = op.Next;\n\t      }\n\t      while (op != outrec.Pts)\n\t    }\n\t  };\n\t  ClipperLib.Clipper.Area = function (poly)\n\t  {\n\t    var cnt = poly.length;\n\t    if (cnt < 3)\n\t      return 0;\n\t    var a = 0;\n\t    for (var i = 0, j = cnt - 1; i < cnt; ++i)\n\t    {\n\t      a += (poly[j].X + poly[i].X) * (poly[j].Y - poly[i].Y);\n\t      j = i;\n\t    }\n\t    return -a * 0.5;\n\t  };\n\t  ClipperLib.Clipper.prototype.Area = function (outRec)\n\t  {\n\t    var op = outRec.Pts;\n\t    if (op == null)\n\t      return 0;\n\t    var a = 0;\n\t    do {\n\t      a = a + (op.Prev.Pt.X + op.Pt.X) * (op.Prev.Pt.Y - op.Pt.Y);\n\t      op = op.Next;\n\t    }\n\t    while (op != outRec.Pts)\n\t    return a * 0.5;\n\t  };\n\t  ClipperLib.Clipper.SimplifyPolygon = function (poly, fillType)\n\t  {\n\t    var result = new Array();\n\t    var c = new ClipperLib.Clipper(0);\n\t    c.StrictlySimple = true;\n\t    c.AddPath(poly, ClipperLib.PolyType.ptSubject, true);\n\t    c.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.SimplifyPolygons = function (polys, fillType)\n\t  {\n\t    if (typeof (fillType) == \"undefined\") fillType = ClipperLib.PolyFillType.pftEvenOdd;\n\t    var result = new Array();\n\t    var c = new ClipperLib.Clipper(0);\n\t    c.StrictlySimple = true;\n\t    c.AddPaths(polys, ClipperLib.PolyType.ptSubject, true);\n\t    c.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.DistanceSqrd = function (pt1, pt2)\n\t  {\n\t    var dx = (pt1.X - pt2.X);\n\t    var dy = (pt1.Y - pt2.Y);\n\t    return (dx * dx + dy * dy);\n\t  };\n\t  ClipperLib.Clipper.DistanceFromLineSqrd = function (pt, ln1, ln2)\n\t  {\n\t    //The equation of a line in general form (Ax + By + C = 0)\n\t    //given 2 points (x¹,y¹) & (x²,y²) is ...\n\t    //(y¹ - y²)x + (x² - x¹)y + (y² - y¹)x¹ - (x² - x¹)y¹ = 0\n\t    //A = (y¹ - y²); B = (x² - x¹); C = (y² - y¹)x¹ - (x² - x¹)y¹\n\t    //perpendicular distance of point (x³,y³) = (Ax³ + By³ + C)/Sqrt(A² + B²)\n\t    //see http://en.wikipedia.org/wiki/Perpendicular_distance\n\t    var A = ln1.Y - ln2.Y;\n\t    var B = ln2.X - ln1.X;\n\t    var C = A * ln1.X + B * ln1.Y;\n\t    C = A * pt.X + B * pt.Y - C;\n\t    return (C * C) / (A * A + B * B);\n\t  };\n\t\n\t\tClipperLib.Clipper.SlopesNearCollinear = function(pt1, pt2, pt3, distSqrd)\n\t\t{\n\t\t\t//this function is more accurate when the point that's GEOMETRICALLY\n\t\t\t//between the other 2 points is the one that's tested for distance.\n\t\t\t//nb: with 'spikes', either pt1 or pt3 is geometrically between the other pts\n\t\t\tif (Math.abs(pt1.X - pt2.X) > Math.abs(pt1.Y - pt2.Y))\n\t\t\t{\n\t\t\tif ((pt1.X > pt2.X) == (pt1.X < pt3.X))\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt1, pt2, pt3) < distSqrd;\n\t\t\telse if ((pt2.X > pt1.X) == (pt2.X < pt3.X))\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;\n\t\t\t\t\telse\n\t\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt3, pt1, pt2) < distSqrd;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tif ((pt1.Y > pt2.Y) == (pt1.Y < pt3.Y))\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt1, pt2, pt3) < distSqrd;\n\t\t\telse if ((pt2.Y > pt1.Y) == (pt2.Y < pt3.Y))\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;\n\t\t\t\t\telse\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt3, pt1, pt2) < distSqrd;\n\t\t\t}\n\t\t}\n\t\n\t  ClipperLib.Clipper.PointsAreClose = function (pt1, pt2, distSqrd)\n\t  {\n\t    var dx = pt1.X - pt2.X;\n\t    var dy = pt1.Y - pt2.Y;\n\t    return ((dx * dx) + (dy * dy) <= distSqrd);\n\t  };\n\t  //------------------------------------------------------------------------------\n\t  ClipperLib.Clipper.ExcludeOp = function (op)\n\t  {\n\t    var result = op.Prev;\n\t    result.Next = op.Next;\n\t    op.Next.Prev = result;\n\t    result.Idx = 0;\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.CleanPolygon = function (path, distance)\n\t  {\n\t    if (typeof (distance) == \"undefined\") distance = 1.415;\n\t    //distance = proximity in units/pixels below which vertices will be stripped.\n\t    //Default ~= sqrt(2) so when adjacent vertices or semi-adjacent vertices have\n\t    //both x & y coords within 1 unit, then the second vertex will be stripped.\n\t    var cnt = path.length;\n\t    if (cnt == 0)\n\t      return new Array();\n\t    var outPts = new Array(cnt);\n\t    for (var i = 0; i < cnt; ++i)\n\t      outPts[i] = new ClipperLib.OutPt();\n\t    for (var i = 0; i < cnt; ++i)\n\t    {\n\t      outPts[i].Pt = path[i];\n\t      outPts[i].Next = outPts[(i + 1) % cnt];\n\t      outPts[i].Next.Prev = outPts[i];\n\t      outPts[i].Idx = 0;\n\t    }\n\t    var distSqrd = distance * distance;\n\t    var op = outPts[0];\n\t    while (op.Idx == 0 && op.Next != op.Prev)\n\t    {\n\t      if (ClipperLib.Clipper.PointsAreClose(op.Pt, op.Prev.Pt, distSqrd))\n\t      {\n\t        op = ClipperLib.Clipper.ExcludeOp(op);\n\t        cnt--;\n\t      }\n\t      else if (ClipperLib.Clipper.PointsAreClose(op.Prev.Pt, op.Next.Pt, distSqrd))\n\t      {\n\t        ClipperLib.Clipper.ExcludeOp(op.Next);\n\t        op = ClipperLib.Clipper.ExcludeOp(op);\n\t        cnt -= 2;\n\t      }\n\t      else if (ClipperLib.Clipper.SlopesNearCollinear(op.Prev.Pt, op.Pt, op.Next.Pt, distSqrd))\n\t      {\n\t        op = ClipperLib.Clipper.ExcludeOp(op);\n\t        cnt--;\n\t      }\n\t      else\n\t      {\n\t        op.Idx = 1;\n\t        op = op.Next;\n\t      }\n\t    }\n\t    if (cnt < 3)\n\t      cnt = 0;\n\t    var result = new Array(cnt);\n\t    for (var i = 0; i < cnt; ++i)\n\t    {\n\t      result[i] = new ClipperLib.IntPoint(op.Pt);\n\t      op = op.Next;\n\t    }\n\t    outPts = null;\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.CleanPolygons = function (polys, distance)\n\t  {\n\t    var result = new Array(polys.length);\n\t    for (var i = 0, ilen = polys.length; i < ilen; i++)\n\t      result[i] = ClipperLib.Clipper.CleanPolygon(polys[i], distance);\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.Minkowski = function (pattern, path, IsSum, IsClosed)\n\t  {\n\t    var delta = (IsClosed ? 1 : 0);\n\t    var polyCnt = pattern.length;\n\t    var pathCnt = path.length;\n\t    var result = new Array();\n\t    if (IsSum)\n\t      for (var i = 0; i < pathCnt; i++)\n\t      {\n\t        var p = new Array(polyCnt);\n\t        for (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n\t          p[j] = new ClipperLib.IntPoint(path[i].X + ip.X, path[i].Y + ip.Y);\n\t        result.push(p);\n\t      }\n\t    else\n\t      for (var i = 0; i < pathCnt; i++)\n\t      {\n\t        var p = new Array(polyCnt);\n\t        for (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n\t          p[j] = new ClipperLib.IntPoint(path[i].X - ip.X, path[i].Y - ip.Y);\n\t        result.push(p);\n\t      }\n\t    var quads = new Array();\n\t    for (var i = 0; i < pathCnt - 1 + delta; i++)\n\t      for (var j = 0; j < polyCnt; j++)\n\t      {\n\t        var quad = new Array();\n\t        quad.push(result[i % pathCnt][j % polyCnt]);\n\t        quad.push(result[(i + 1) % pathCnt][j % polyCnt]);\n\t        quad.push(result[(i + 1) % pathCnt][(j + 1) % polyCnt]);\n\t        quad.push(result[i % pathCnt][(j + 1) % polyCnt]);\n\t        if (!ClipperLib.Clipper.Orientation(quad))\n\t          quad.reverse();\n\t        quads.push(quad);\n\t      }\n\t\t\t\treturn quads;\n\t  };\n\t\n\t\tClipperLib.Clipper.MinkowskiSum = function(pattern, path_or_paths, pathIsClosed)\n\t\t{\n\t\t\tif(!(path_or_paths[0] instanceof Array))\n\t\t\t{\n\t\t\t\tvar path = path_or_paths;\n\t\t\t\tvar paths = ClipperLib.Clipper.Minkowski(pattern, path, true, pathIsClosed);\n\t\t\t\tvar c = new ClipperLib.Clipper();\n\t\t\t\tc.AddPaths(paths, ClipperLib.PolyType.ptSubject, true);\n\t\t\t\tc.Execute(ClipperLib.ClipType.ctUnion, paths, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\t\t\treturn paths;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t \t\t\tvar paths = path_or_paths;\n\t\t\t\tvar solution = new ClipperLib.Paths();\n\t\t\t\tvar c = new ClipperLib.Clipper();\n\t\t\t\tfor (var i = 0; i < paths.length; ++i)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = ClipperLib.Clipper.Minkowski(pattern, paths[i], true, pathIsClosed);\n\t\t\t\t\tc.AddPaths(tmp, ClipperLib.PolyType.ptSubject, true);\n\t\t\t\t\tif (pathIsClosed)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar path = ClipperLib.Clipper.TranslatePath(paths[i], pattern[0]);\n\t\t\t\t\t\tc.AddPath(path, ClipperLib.PolyType.ptClip, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tc.Execute(ClipperLib.ClipType.ctUnion, solution,\n\t\t\t\t\tClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\t\t\treturn solution;\n\t\t\t}\n\t\t}\n\t\t//------------------------------------------------------------------------------\n\t\n\t\tClipperLib.Clipper.TranslatePath = function (path, delta)\n\t\t{\n\t\t\tvar outPath = new ClipperLib.Path();\n\t\t\tfor (var i = 0; i < path.length; i++)\n\t\t\t\toutPath.push(new ClipperLib.IntPoint(path[i].X + delta.X, path[i].Y + delta.Y));\n\t\t\treturn outPath;\n\t\t}\n\t\t//------------------------------------------------------------------------------\n\t\n\t\tClipperLib.Clipper.MinkowskiDiff = function (poly1, poly2)\n\t\t{\n\t\t\tvar paths = ClipperLib.Clipper.Minkowski(poly1, poly2, false, true);\n\t\t\tvar c = new ClipperLib.Clipper();\n\t\t\tc.AddPaths(paths, ClipperLib.PolyType.ptSubject, true);\n\t\t\tc.Execute(ClipperLib.ClipType.ctUnion, paths, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\t\treturn paths;\n\t\t}\n\t\n\t  ClipperLib.Clipper.PolyTreeToPaths = function (polytree)\n\t  {\n\t    var result = new Array();\n\t    //result.set_Capacity(polytree.get_Total());\n\t    ClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntAny, result);\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.AddPolyNodeToPaths = function (polynode, nt, paths)\n\t  {\n\t    var match = true;\n\t    switch (nt)\n\t    {\n\t    case ClipperLib.Clipper.NodeType.ntOpen:\n\t      return;\n\t    case ClipperLib.Clipper.NodeType.ntClosed:\n\t      match = !polynode.IsOpen;\n\t      break;\n\t    default:\n\t      break;\n\t    }\n\t    if (polynode.m_polygon.length > 0 && match)\n\t      paths.push(polynode.m_polygon);\n\t    for (var $i3 = 0, $t3 = polynode.Childs(), $l3 = $t3.length, pn = $t3[$i3]; $i3 < $l3; $i3++, pn = $t3[$i3])\n\t      ClipperLib.Clipper.AddPolyNodeToPaths(pn, nt, paths);\n\t  };\n\t  ClipperLib.Clipper.OpenPathsFromPolyTree = function (polytree)\n\t  {\n\t    var result = new ClipperLib.Paths();\n\t    //result.set_Capacity(polytree.ChildCount());\n\t    for (var i = 0, ilen = polytree.ChildCount(); i < ilen; i++)\n\t      if (polytree.Childs()[i].IsOpen)\n\t        result.push(polytree.Childs()[i].m_polygon);\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.ClosedPathsFromPolyTree = function (polytree)\n\t  {\n\t    var result = new ClipperLib.Paths();\n\t    //result.set_Capacity(polytree.Total());\n\t    ClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntClosed, result);\n\t    return result;\n\t  };\n\t  Inherit(ClipperLib.Clipper, ClipperLib.ClipperBase);\n\t  ClipperLib.Clipper.NodeType = {\n\t    ntAny: 0,\n\t    ntOpen: 1,\n\t    ntClosed: 2\n\t  };\n\t  ClipperLib.ClipperOffset = function (miterLimit, arcTolerance)\n\t  {\n\t    if (typeof (miterLimit) == \"undefined\") miterLimit = 2;\n\t    if (typeof (arcTolerance) == \"undefined\") arcTolerance = ClipperLib.ClipperOffset.def_arc_tolerance;\n\t    this.m_destPolys = new ClipperLib.Paths();\n\t    this.m_srcPoly = new ClipperLib.Path();\n\t    this.m_destPoly = new ClipperLib.Path();\n\t    this.m_normals = new Array();\n\t    this.m_delta = 0;\n\t    this.m_sinA = 0;\n\t    this.m_sin = 0;\n\t    this.m_cos = 0;\n\t    this.m_miterLim = 0;\n\t    this.m_StepsPerRad = 0;\n\t    this.m_lowest = new ClipperLib.IntPoint();\n\t    this.m_polyNodes = new ClipperLib.PolyNode();\n\t    this.MiterLimit = miterLimit;\n\t    this.ArcTolerance = arcTolerance;\n\t    this.m_lowest.X = -1;\n\t  };\n\t  ClipperLib.ClipperOffset.two_pi = 6.28318530717959;\n\t  ClipperLib.ClipperOffset.def_arc_tolerance = 0.25;\n\t  ClipperLib.ClipperOffset.prototype.Clear = function ()\n\t  {\n\t    ClipperLib.Clear(this.m_polyNodes.Childs());\n\t    this.m_lowest.X = -1;\n\t  };\n\t  ClipperLib.ClipperOffset.Round = ClipperLib.Clipper.Round;\n\t  ClipperLib.ClipperOffset.prototype.AddPath = function (path, joinType, endType)\n\t  {\n\t    var highI = path.length - 1;\n\t    if (highI < 0)\n\t      return;\n\t    var newNode = new ClipperLib.PolyNode();\n\t    newNode.m_jointype = joinType;\n\t    newNode.m_endtype = endType;\n\t    //strip duplicate points from path and also get index to the lowest point ...\n\t    if (endType == ClipperLib.EndType.etClosedLine || endType == ClipperLib.EndType.etClosedPolygon)\n\t      while (highI > 0 && ClipperLib.IntPoint.op_Equality(path[0], path[highI]))\n\t        highI--;\n\t    //newNode.m_polygon.set_Capacity(highI + 1);\n\t    newNode.m_polygon.push(path[0]);\n\t    var j = 0,\n\t      k = 0;\n\t    for (var i = 1; i <= highI; i++)\n\t      if (ClipperLib.IntPoint.op_Inequality(newNode.m_polygon[j], path[i]))\n\t      {\n\t        j++;\n\t        newNode.m_polygon.push(path[i]);\n\t        if (path[i].Y > newNode.m_polygon[k].Y || (path[i].Y == newNode.m_polygon[k].Y && path[i].X < newNode.m_polygon[k].X))\n\t          k = j;\n\t      }\n\t    if (endType == ClipperLib.EndType.etClosedPolygon && j < 2) return;\n\t\n\t    this.m_polyNodes.AddChild(newNode);\n\t    //if this path's lowest pt is lower than all the others then update m_lowest\n\t    if (endType != ClipperLib.EndType.etClosedPolygon)\n\t      return;\n\t    if (this.m_lowest.X < 0)\n\t      this.m_lowest = new ClipperLib.IntPoint(this.m_polyNodes.ChildCount() - 1, k);\n\t    else\n\t    {\n\t      var ip = this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon[this.m_lowest.Y];\n\t      if (newNode.m_polygon[k].Y > ip.Y || (newNode.m_polygon[k].Y == ip.Y && newNode.m_polygon[k].X < ip.X))\n\t        this.m_lowest = new ClipperLib.IntPoint(this.m_polyNodes.ChildCount() - 1, k);\n\t    }\n\t  };\n\t  ClipperLib.ClipperOffset.prototype.AddPaths = function (paths, joinType, endType)\n\t  {\n\t    for (var i = 0, ilen = paths.length; i < ilen; i++)\n\t      this.AddPath(paths[i], joinType, endType);\n\t  };\n\t  ClipperLib.ClipperOffset.prototype.FixOrientations = function ()\n\t  {\n\t    //fixup orientations of all closed paths if the orientation of the\n\t    //closed path with the lowermost vertex is wrong ...\n\t    if (this.m_lowest.X >= 0 && !ClipperLib.Clipper.Orientation(this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon))\n\t    {\n\t      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n\t      {\n\t        var node = this.m_polyNodes.Childs()[i];\n\t        if (node.m_endtype == ClipperLib.EndType.etClosedPolygon || (node.m_endtype == ClipperLib.EndType.etClosedLine && ClipperLib.Clipper.Orientation(node.m_polygon)))\n\t          node.m_polygon.reverse();\n\t      }\n\t    }\n\t    else\n\t    {\n\t      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n\t      {\n\t        var node = this.m_polyNodes.Childs()[i];\n\t        if (node.m_endtype == ClipperLib.EndType.etClosedLine && !ClipperLib.Clipper.Orientation(node.m_polygon))\n\t          node.m_polygon.reverse();\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.ClipperOffset.GetUnitNormal = function (pt1, pt2)\n\t  {\n\t    var dx = (pt2.X - pt1.X);\n\t    var dy = (pt2.Y - pt1.Y);\n\t    if ((dx == 0) && (dy == 0))\n\t      return new ClipperLib.DoublePoint(0, 0);\n\t    var f = 1 / Math.sqrt(dx * dx + dy * dy);\n\t    dx *= f;\n\t    dy *= f;\n\t    return new ClipperLib.DoublePoint(dy, -dx);\n\t  };\n\t  ClipperLib.ClipperOffset.prototype.DoOffset = function (delta)\n\t  {\n\t    this.m_destPolys = new Array();\n\t    this.m_delta = delta;\n\t    //if Zero offset, just copy any CLOSED polygons to m_p and return ...\n\t    if (ClipperLib.ClipperBase.near_zero(delta))\n\t    {\n\t      //this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount);\n\t      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n\t      {\n\t        var node = this.m_polyNodes.Childs()[i];\n\t        if (node.m_endtype == ClipperLib.EndType.etClosedPolygon)\n\t          this.m_destPolys.push(node.m_polygon);\n\t      }\n\t      return;\n\t    }\n\t    //see offset_triginometry3.svg in the documentation folder ...\n\t    if (this.MiterLimit > 2)\n\t      this.m_miterLim = 2 / (this.MiterLimit * this.MiterLimit);\n\t    else\n\t      this.m_miterLim = 0.5;\n\t    var y;\n\t    if (this.ArcTolerance <= 0)\n\t      y = ClipperLib.ClipperOffset.def_arc_tolerance;\n\t    else if (this.ArcTolerance > Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance)\n\t      y = Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance;\n\t    else\n\t      y = this.ArcTolerance;\n\t    //see offset_triginometry2.svg in the documentation folder ...\n\t    var steps = 3.14159265358979 / Math.acos(1 - y / Math.abs(delta));\n\t    this.m_sin = Math.sin(ClipperLib.ClipperOffset.two_pi / steps);\n\t    this.m_cos = Math.cos(ClipperLib.ClipperOffset.two_pi / steps);\n\t    this.m_StepsPerRad = steps / ClipperLib.ClipperOffset.two_pi;\n\t    if (delta < 0)\n\t      this.m_sin = -this.m_sin;\n\t    //this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount * 2);\n\t    for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n\t    {\n\t      var node = this.m_polyNodes.Childs()[i];\n\t      this.m_srcPoly = node.m_polygon;\n\t      var len = this.m_srcPoly.length;\n\t      if (len == 0 || (delta <= 0 && (len < 3 || node.m_endtype != ClipperLib.EndType.etClosedPolygon)))\n\t        continue;\n\t      this.m_destPoly = new Array();\n\t      if (len == 1)\n\t      {\n\t        if (node.m_jointype == ClipperLib.JoinType.jtRound)\n\t        {\n\t          var X = 1,\n\t            Y = 0;\n\t          for (var j = 1; j <= steps; j++)\n\t          {\n\t            this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + Y * delta)));\n\t            var X2 = X;\n\t            X = X * this.m_cos - this.m_sin * Y;\n\t            Y = X2 * this.m_sin + Y * this.m_cos;\n\t          }\n\t        }\n\t        else\n\t        {\n\t          var X = -1,\n\t            Y = -1;\n\t          for (var j = 0; j < 4; ++j)\n\t          {\n\t            this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + Y * delta)));\n\t            if (X < 0)\n\t              X = 1;\n\t            else if (Y < 0)\n\t              Y = 1;\n\t            else\n\t              X = -1;\n\t          }\n\t        }\n\t        this.m_destPolys.push(this.m_destPoly);\n\t        continue;\n\t      }\n\t      //build m_normals ...\n\t      this.m_normals.length = 0;\n\t      //this.m_normals.set_Capacity(len);\n\t      for (var j = 0; j < len - 1; j++)\n\t        this.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[j], this.m_srcPoly[j + 1]));\n\t      if (node.m_endtype == ClipperLib.EndType.etClosedLine || node.m_endtype == ClipperLib.EndType.etClosedPolygon)\n\t        this.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[len - 1], this.m_srcPoly[0]));\n\t      else\n\t        this.m_normals.push(new ClipperLib.DoublePoint(this.m_normals[len - 2]));\n\t      if (node.m_endtype == ClipperLib.EndType.etClosedPolygon)\n\t      {\n\t        var k = len - 1;\n\t        for (var j = 0; j < len; j++)\n\t          k = this.OffsetPoint(j, k, node.m_jointype);\n\t        this.m_destPolys.push(this.m_destPoly);\n\t      }\n\t      else if (node.m_endtype == ClipperLib.EndType.etClosedLine)\n\t      {\n\t        var k = len - 1;\n\t        for (var j = 0; j < len; j++)\n\t          k = this.OffsetPoint(j, k, node.m_jointype);\n\t        this.m_destPolys.push(this.m_destPoly);\n\t        this.m_destPoly = new Array();\n\t        //re-build m_normals ...\n\t        var n = this.m_normals[len - 1];\n\t        for (var j = len - 1; j > 0; j--)\n\t          this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);\n\t        this.m_normals[0] = new ClipperLib.DoublePoint(-n.X, -n.Y);\n\t        k = 0;\n\t        for (var j = len - 1; j >= 0; j--)\n\t          k = this.OffsetPoint(j, k, node.m_jointype);\n\t        this.m_destPolys.push(this.m_destPoly);\n\t      }\n\t      else\n\t      {\n\t        var k = 0;\n\t        for (var j = 1; j < len - 1; ++j)\n\t          k = this.OffsetPoint(j, k, node.m_jointype);\n\t        var pt1;\n\t        if (node.m_endtype == ClipperLib.EndType.etOpenButt)\n\t        {\n\t          var j = len - 1;\n\t          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * delta));\n\t          this.m_destPoly.push(pt1);\n\t          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X - this.m_normals[j].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y - this.m_normals[j].Y * delta));\n\t          this.m_destPoly.push(pt1);\n\t        }\n\t        else\n\t        {\n\t          var j = len - 1;\n\t          k = len - 2;\n\t          this.m_sinA = 0;\n\t          this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j].X, -this.m_normals[j].Y);\n\t          if (node.m_endtype == ClipperLib.EndType.etOpenSquare)\n\t            this.DoSquare(j, k);\n\t          else\n\t            this.DoRound(j, k);\n\t        }\n\t        //re-build m_normals ...\n\t        for (var j = len - 1; j > 0; j--)\n\t          this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);\n\t        this.m_normals[0] = new ClipperLib.DoublePoint(-this.m_normals[1].X, -this.m_normals[1].Y);\n\t        k = len - 1;\n\t        for (var j = k - 1; j > 0; --j)\n\t          k = this.OffsetPoint(j, k, node.m_jointype);\n\t        if (node.m_endtype == ClipperLib.EndType.etOpenButt)\n\t        {\n\t          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X - this.m_normals[0].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y - this.m_normals[0].Y * delta));\n\t          this.m_destPoly.push(pt1);\n\t          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + this.m_normals[0].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + this.m_normals[0].Y * delta));\n\t          this.m_destPoly.push(pt1);\n\t        }\n\t        else\n\t        {\n\t          k = 1;\n\t          this.m_sinA = 0;\n\t          if (node.m_endtype == ClipperLib.EndType.etOpenSquare)\n\t            this.DoSquare(0, 1);\n\t          else\n\t            this.DoRound(0, 1);\n\t        }\n\t        this.m_destPolys.push(this.m_destPoly);\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.ClipperOffset.prototype.Execute = function ()\n\t  {\n\t    var a = arguments,\n\t      ispolytree = a[0] instanceof ClipperLib.PolyTree;\n\t    if (!ispolytree) // function (solution, delta)\n\t    {\n\t      var solution = a[0],\n\t        delta = a[1];\n\t      ClipperLib.Clear(solution);\n\t      this.FixOrientations();\n\t      this.DoOffset(delta);\n\t      //now clean up 'corners' ...\n\t      var clpr = new ClipperLib.Clipper(0);\n\t      clpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n\t      if (delta > 0)\n\t      {\n\t        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n\t      }\n\t      else\n\t      {\n\t        var r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n\t        var outer = new ClipperLib.Path();\n\t        outer.push(new ClipperLib.IntPoint(r.left - 10, r.bottom + 10));\n\t        outer.push(new ClipperLib.IntPoint(r.right + 10, r.bottom + 10));\n\t        outer.push(new ClipperLib.IntPoint(r.right + 10, r.top - 10));\n\t        outer.push(new ClipperLib.IntPoint(r.left - 10, r.top - 10));\n\t        clpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n\t        clpr.ReverseSolution = true;\n\t        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n\t        if (solution.length > 0)\n\t          solution.splice(0, 1);\n\t      }\n\t      //console.log(JSON.stringify(solution));\n\t    }\n\t    else // function (polytree, delta)\n\t    {\n\t      var solution = a[0],\n\t        delta = a[1];\n\t      solution.Clear();\n\t      this.FixOrientations();\n\t      this.DoOffset(delta);\n\t      //now clean up 'corners' ...\n\t      var clpr = new ClipperLib.Clipper(0);\n\t      clpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n\t      if (delta > 0)\n\t      {\n\t        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n\t      }\n\t      else\n\t      {\n\t        var r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n\t        var outer = new ClipperLib.Path();\n\t        outer.push(new ClipperLib.IntPoint(r.left - 10, r.bottom + 10));\n\t        outer.push(new ClipperLib.IntPoint(r.right + 10, r.bottom + 10));\n\t        outer.push(new ClipperLib.IntPoint(r.right + 10, r.top - 10));\n\t        outer.push(new ClipperLib.IntPoint(r.left - 10, r.top - 10));\n\t        clpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n\t        clpr.ReverseSolution = true;\n\t        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n\t        //remove the outer PolyNode rectangle ...\n\t        if (solution.ChildCount() == 1 && solution.Childs()[0].ChildCount() > 0)\n\t        {\n\t          var outerNode = solution.Childs()[0];\n\t          //solution.Childs.set_Capacity(outerNode.ChildCount);\n\t          solution.Childs()[0] = outerNode.Childs()[0];\n\t          solution.Childs()[0].m_Parent = solution;\n\t          for (var i = 1; i < outerNode.ChildCount(); i++)\n\t            solution.AddChild(outerNode.Childs()[i]);\n\t        }\n\t        else\n\t          solution.Clear();\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.ClipperOffset.prototype.OffsetPoint = function (j, k, jointype)\n\t  {\n\t\t\t//cross product ...\n\t\t\tthis.m_sinA = (this.m_normals[k].X * this.m_normals[j].Y - this.m_normals[j].X * this.m_normals[k].Y);\n\t\n\t\t\tif (Math.abs(this.m_sinA * this.m_delta) < 1.0)\n\t\t\t{\n\t\t\t\t//dot product ...\n\t\t\t\tvar cosA = (this.m_normals[k].X * this.m_normals[j].X + this.m_normals[j].Y * this.m_normals[k].Y);\n\t\t\t\tif (cosA > 0) // angle ==> 0 degrees\n\t\t\t\t{\n\t\t\t\t\tthis.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[k].X * this.m_delta),\n\t\t\t\t\t\tClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[k].Y * this.m_delta)));\n\t\t\t\t\treturn k;\n\t\t\t\t}\n\t\t\t\t//else angle ==> 180 degrees\n\t\t\t}\n\t    else if (this.m_sinA > 1)\n\t      this.m_sinA = 1.0;\n\t    else if (this.m_sinA < -1)\n\t      this.m_sinA = -1.0;\n\t    if (this.m_sinA * this.m_delta < 0)\n\t    {\n\t      this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[k].X * this.m_delta),\n\t        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[k].Y * this.m_delta)));\n\t      this.m_destPoly.push(new ClipperLib.IntPoint(this.m_srcPoly[j]));\n\t      this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta),\n\t        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta)));\n\t    }\n\t    else\n\t      switch (jointype)\n\t      {\n\t      case ClipperLib.JoinType.jtMiter:\n\t        {\n\t          var r = 1 + (this.m_normals[j].X * this.m_normals[k].X + this.m_normals[j].Y * this.m_normals[k].Y);\n\t          if (r >= this.m_miterLim)\n\t            this.DoMiter(j, k, r);\n\t          else\n\t            this.DoSquare(j, k);\n\t          break;\n\t        }\n\t      case ClipperLib.JoinType.jtSquare:\n\t        this.DoSquare(j, k);\n\t        break;\n\t      case ClipperLib.JoinType.jtRound:\n\t        this.DoRound(j, k);\n\t        break;\n\t      }\n\t    k = j;\n\t    return k;\n\t  };\n\t  ClipperLib.ClipperOffset.prototype.DoSquare = function (j, k)\n\t  {\n\t    var dx = Math.tan(Math.atan2(this.m_sinA,\n\t      this.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y) / 4);\n\t    this.m_destPoly.push(new ClipperLib.IntPoint(\n\t      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_delta * (this.m_normals[k].X - this.m_normals[k].Y * dx)),\n\t      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_delta * (this.m_normals[k].Y + this.m_normals[k].X * dx))));\n\t    this.m_destPoly.push(new ClipperLib.IntPoint(\n\t      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_delta * (this.m_normals[j].X + this.m_normals[j].Y * dx)),\n\t      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_delta * (this.m_normals[j].Y - this.m_normals[j].X * dx))));\n\t  };\n\t  ClipperLib.ClipperOffset.prototype.DoMiter = function (j, k, r)\n\t  {\n\t    var q = this.m_delta / r;\n\t    this.m_destPoly.push(new ClipperLib.IntPoint(\n\t      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + (this.m_normals[k].X + this.m_normals[j].X) * q),\n\t      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + (this.m_normals[k].Y + this.m_normals[j].Y) * q)));\n\t  };\n\t  ClipperLib.ClipperOffset.prototype.DoRound = function (j, k)\n\t  {\n\t    var a = Math.atan2(this.m_sinA,\n\t      this.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y);\n\t\n\t    \tvar steps = Math.max(ClipperLib.Cast_Int32(ClipperLib.ClipperOffset.Round(this.m_StepsPerRad * Math.abs(a))), 1);\n\t\n\t    var X = this.m_normals[k].X,\n\t      Y = this.m_normals[k].Y,\n\t      X2;\n\t    for (var i = 0; i < steps; ++i)\n\t    {\n\t      this.m_destPoly.push(new ClipperLib.IntPoint(\n\t        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + X * this.m_delta),\n\t        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + Y * this.m_delta)));\n\t      X2 = X;\n\t      X = X * this.m_cos - this.m_sin * Y;\n\t      Y = X2 * this.m_sin + Y * this.m_cos;\n\t    }\n\t    this.m_destPoly.push(new ClipperLib.IntPoint(\n\t      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta),\n\t      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta)));\n\t  };\n\t  ClipperLib.Error = function (message)\n\t  {\n\t    try\n\t    {\n\t      throw new Error(message);\n\t    }\n\t    catch (err)\n\t    {\n\t      alert(err.message);\n\t    }\n\t  };\n\t  // ---------------------------------\n\t  // JS extension by Timo 2013\n\t  ClipperLib.JS = {};\n\t  ClipperLib.JS.AreaOfPolygon = function (poly, scale)\n\t  {\n\t    if (!scale) scale = 1;\n\t    return ClipperLib.Clipper.Area(poly) / (scale * scale);\n\t  };\n\t  ClipperLib.JS.AreaOfPolygons = function (poly, scale)\n\t  {\n\t    if (!scale) scale = 1;\n\t    var area = 0;\n\t    for (var i = 0; i < poly.length; i++)\n\t    {\n\t      area += ClipperLib.Clipper.Area(poly[i]);\n\t    }\n\t    return area / (scale * scale);\n\t  };\n\t  ClipperLib.JS.BoundsOfPath = function (path, scale)\n\t  {\n\t    return ClipperLib.JS.BoundsOfPaths([path], scale);\n\t  };\n\t  ClipperLib.JS.BoundsOfPaths = function (paths, scale)\n\t  {\n\t    if (!scale) scale = 1;\n\t    var bounds = ClipperLib.Clipper.GetBounds(paths);\n\t    bounds.left /= scale;\n\t    bounds.bottom /= scale;\n\t    bounds.right /= scale;\n\t    bounds.top /= scale;\n\t    return bounds;\n\t  };\n\t  // Clean() joins vertices that are too near each other\n\t  // and causes distortion to offsetted polygons without cleaning\n\t  ClipperLib.JS.Clean = function (polygon, delta)\n\t  {\n\t    if (!(polygon instanceof Array)) return [];\n\t    var isPolygons = polygon[0] instanceof Array;\n\t    var polygon = ClipperLib.JS.Clone(polygon);\n\t    if (typeof delta != \"number\" || delta === null)\n\t    {\n\t      ClipperLib.Error(\"Delta is not a number in Clean().\");\n\t      return polygon;\n\t    }\n\t    if (polygon.length === 0 || (polygon.length == 1 && polygon[0].length === 0) || delta < 0) return polygon;\n\t    if (!isPolygons) polygon = [polygon];\n\t    var k_length = polygon.length;\n\t    var len, poly, result, d, p, j, i;\n\t    var results = [];\n\t    for (var k = 0; k < k_length; k++)\n\t    {\n\t      poly = polygon[k];\n\t      len = poly.length;\n\t      if (len === 0) continue;\n\t      else if (len < 3)\n\t      {\n\t        result = poly;\n\t        results.push(result);\n\t        continue;\n\t      }\n\t      result = poly;\n\t      d = delta * delta;\n\t      //d = Math.floor(c_delta * c_delta);\n\t      p = poly[0];\n\t      j = 1;\n\t      for (i = 1; i < len; i++)\n\t      {\n\t        if ((poly[i].X - p.X) * (poly[i].X - p.X) +\n\t          (poly[i].Y - p.Y) * (poly[i].Y - p.Y) <= d)\n\t          continue;\n\t        result[j] = poly[i];\n\t        p = poly[i];\n\t        j++;\n\t      }\n\t      p = poly[j - 1];\n\t      if ((poly[0].X - p.X) * (poly[0].X - p.X) +\n\t        (poly[0].Y - p.Y) * (poly[0].Y - p.Y) <= d)\n\t        j--;\n\t      if (j < len)\n\t        result.splice(j, len - j);\n\t      if (result.length) results.push(result);\n\t    }\n\t    if (!isPolygons && results.length) results = results[0];\n\t    else if (!isPolygons && results.length === 0) results = [];\n\t    else if (isPolygons && results.length === 0) results = [\n\t      []\n\t    ];\n\t    return results;\n\t  }\n\t  // Make deep copy of Polygons or Polygon\n\t  // so that also IntPoint objects are cloned and not only referenced\n\t  // This should be the fastest way\n\t  ClipperLib.JS.Clone = function (polygon)\n\t  {\n\t    if (!(polygon instanceof Array)) return [];\n\t    if (polygon.length === 0) return [];\n\t    else if (polygon.length == 1 && polygon[0].length === 0) return [[]];\n\t    var isPolygons = polygon[0] instanceof Array;\n\t    if (!isPolygons) polygon = [polygon];\n\t    var len = polygon.length,\n\t      plen, i, j, result;\n\t    var results = new Array(len);\n\t    for (i = 0; i < len; i++)\n\t    {\n\t      plen = polygon[i].length;\n\t      result = new Array(plen);\n\t      for (j = 0; j < plen; j++)\n\t      {\n\t        result[j] = {\n\t          X: polygon[i][j].X,\n\t          Y: polygon[i][j].Y\n\t        };\n\t      }\n\t      results[i] = result;\n\t    }\n\t    if (!isPolygons) results = results[0];\n\t    return results;\n\t  };\n\t  // Removes points that doesn't affect much to the visual appearance.\n\t  // If middle point is at or under certain distance (tolerance) of the line segment between\n\t  // start and end point, the middle point is removed.\n\t  ClipperLib.JS.Lighten = function (polygon, tolerance)\n\t  {\n\t    if (!(polygon instanceof Array)) return [];\n\t    if (typeof tolerance != \"number\" || tolerance === null)\n\t    {\n\t      ClipperLib.Error(\"Tolerance is not a number in Lighten().\")\n\t      return ClipperLib.JS.Clone(polygon);\n\t    }\n\t    if (polygon.length === 0 || (polygon.length == 1 && polygon[0].length === 0) || tolerance < 0)\n\t    {\n\t      return ClipperLib.JS.Clone(polygon);\n\t    }\n\t    if (!(polygon[0] instanceof Array)) polygon = [polygon];\n\t    var i, j, poly, k, poly2, plen, A, B, P, d, rem, addlast;\n\t    var bxax, byay, l, ax, ay;\n\t    var len = polygon.length;\n\t    var toleranceSq = tolerance * tolerance;\n\t    var results = [];\n\t    for (i = 0; i < len; i++)\n\t    {\n\t      poly = polygon[i];\n\t      plen = poly.length;\n\t      if (plen == 0) continue;\n\t      for (k = 0; k < 1000000; k++) // could be forever loop, but wiser to restrict max repeat count\n\t      {\n\t        poly2 = [];\n\t        plen = poly.length;\n\t        // the first have to added to the end, if first and last are not the same\n\t        // this way we ensure that also the actual last point can be removed if needed\n\t        if (poly[plen - 1].X != poly[0].X || poly[plen - 1].Y != poly[0].Y)\n\t        {\n\t          addlast = 1;\n\t          poly.push(\n\t          {\n\t            X: poly[0].X,\n\t            Y: poly[0].Y\n\t          });\n\t          plen = poly.length;\n\t        }\n\t        else addlast = 0;\n\t        rem = []; // Indexes of removed points\n\t        for (j = 0; j < plen - 2; j++)\n\t        {\n\t          A = poly[j]; // Start point of line segment\n\t          P = poly[j + 1]; // Middle point. This is the one to be removed.\n\t          B = poly[j + 2]; // End point of line segment\n\t          ax = A.X;\n\t          ay = A.Y;\n\t          bxax = B.X - ax;\n\t          byay = B.Y - ay;\n\t          if (bxax !== 0 || byay !== 0) // To avoid Nan, when A==P && P==B. And to avoid peaks (A==B && A!=P), which have lenght, but not area.\n\t          {\n\t            l = ((P.X - ax) * bxax + (P.Y - ay) * byay) / (bxax * bxax + byay * byay);\n\t            if (l > 1)\n\t            {\n\t              ax = B.X;\n\t              ay = B.Y;\n\t            }\n\t            else if (l > 0)\n\t            {\n\t              ax += bxax * l;\n\t              ay += byay * l;\n\t            }\n\t          }\n\t          bxax = P.X - ax;\n\t          byay = P.Y - ay;\n\t          d = bxax * bxax + byay * byay;\n\t          if (d <= toleranceSq)\n\t          {\n\t            rem[j + 1] = 1;\n\t            j++; // when removed, transfer the pointer to the next one\n\t          }\n\t        }\n\t        // add all unremoved points to poly2\n\t        poly2.push(\n\t        {\n\t          X: poly[0].X,\n\t          Y: poly[0].Y\n\t        });\n\t        for (j = 1; j < plen - 1; j++)\n\t          if (!rem[j]) poly2.push(\n\t          {\n\t            X: poly[j].X,\n\t            Y: poly[j].Y\n\t          });\n\t        poly2.push(\n\t        {\n\t          X: poly[plen - 1].X,\n\t          Y: poly[plen - 1].Y\n\t        });\n\t        // if the first point was added to the end, remove it\n\t        if (addlast) poly.pop();\n\t        // break, if there was not anymore removed points\n\t        if (!rem.length) break;\n\t        // else continue looping using poly2, to check if there are points to remove\n\t        else poly = poly2;\n\t      }\n\t      plen = poly2.length;\n\t      // remove duplicate from end, if needed\n\t      if (poly2[plen - 1].X == poly2[0].X && poly2[plen - 1].Y == poly2[0].Y)\n\t      {\n\t        poly2.pop();\n\t      }\n\t      if (poly2.length > 2) // to avoid two-point-polygons\n\t        results.push(poly2);\n\t    }\n\t    if (!(polygon[0] instanceof Array)) results = results[0];\n\t    if (typeof (results) == \"undefined\") results = [\n\t      []\n\t    ];\n\t    return results;\n\t  }\n\t  ClipperLib.JS.PerimeterOfPath = function (path, closed, scale)\n\t  {\n\t    if (typeof (path) == \"undefined\") return 0;\n\t    var sqrt = Math.sqrt;\n\t    var perimeter = 0.0;\n\t    var p1, p2, p1x = 0.0,\n\t      p1y = 0.0,\n\t      p2x = 0.0,\n\t      p2y = 0.0;\n\t    var j = path.length;\n\t    if (j < 2) return 0;\n\t    if (closed)\n\t    {\n\t      path[j] = path[0];\n\t      j++;\n\t    }\n\t    while (--j)\n\t    {\n\t      p1 = path[j];\n\t      p1x = p1.X;\n\t      p1y = p1.Y;\n\t      p2 = path[j - 1];\n\t      p2x = p2.X;\n\t      p2y = p2.Y;\n\t      perimeter += sqrt((p1x - p2x) * (p1x - p2x) + (p1y - p2y) * (p1y - p2y));\n\t    }\n\t    if (closed) path.pop();\n\t    return perimeter / scale;\n\t  };\n\t  ClipperLib.JS.PerimeterOfPaths = function (paths, closed, scale)\n\t  {\n\t    if (!scale) scale = 1;\n\t    var perimeter = 0;\n\t    for (var i = 0; i < paths.length; i++)\n\t    {\n\t      perimeter += ClipperLib.JS.PerimeterOfPath(paths[i], closed, scale);\n\t    }\n\t    return perimeter;\n\t  };\n\t  ClipperLib.JS.ScaleDownPath = function (path, scale)\n\t  {\n\t    var i, p;\n\t    if (!scale) scale = 1;\n\t    i = path.length;\n\t    while (i--)\n\t    {\n\t      p = path[i];\n\t      p.X = p.X / scale;\n\t      p.Y = p.Y / scale;\n\t    }\n\t  };\n\t  ClipperLib.JS.ScaleDownPaths = function (paths, scale)\n\t  {\n\t    var i, j, p;\n\t    if (!scale) scale = 1;\n\t    i = paths.length;\n\t    while (i--)\n\t    {\n\t      j = paths[i].length;\n\t      while (j--)\n\t      {\n\t        p = paths[i][j];\n\t        p.X = p.X / scale;\n\t        p.Y = p.Y / scale;\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.JS.ScaleUpPath = function (path, scale)\n\t  {\n\t    var i, p, round = Math.round;\n\t    if (!scale) scale = 1;\n\t    i = path.length;\n\t    while (i--)\n\t    {\n\t      p = path[i];\n\t      p.X = round(p.X * scale);\n\t      p.Y = round(p.Y * scale);\n\t    }\n\t  };\n\t  ClipperLib.JS.ScaleUpPaths = function (paths, scale)\n\t  {\n\t    var i, j, p, round = Math.round;\n\t    if (!scale) scale = 1;\n\t    i = paths.length;\n\t    while (i--)\n\t    {\n\t      j = paths[i].length;\n\t      while (j--)\n\t      {\n\t        p = paths[i][j];\n\t        p.X = round(p.X * scale);\n\t        p.Y = round(p.Y * scale);\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.ExPolygons = function ()\n\t  {\n\t    return [];\n\t  }\n\t  ClipperLib.ExPolygon = function ()\n\t  {\n\t    this.outer = null;\n\t    this.holes = null;\n\t  };\n\t  ClipperLib.JS.AddOuterPolyNodeToExPolygons = function (polynode, expolygons)\n\t  {\n\t    var ep = new ClipperLib.ExPolygon();\n\t    ep.outer = polynode.Contour();\n\t    var childs = polynode.Childs();\n\t    var ilen = childs.length;\n\t    ep.holes = new Array(ilen);\n\t    var node, n, i, j, childs2, jlen;\n\t    for (i = 0; i < ilen; i++)\n\t    {\n\t      node = childs[i];\n\t      ep.holes[i] = node.Contour();\n\t      //Add outer polygons contained by (nested within) holes ...\n\t      for (j = 0, childs2 = node.Childs(), jlen = childs2.length; j < jlen; j++)\n\t      {\n\t        n = childs2[j];\n\t        ClipperLib.JS.AddOuterPolyNodeToExPolygons(n, expolygons);\n\t      }\n\t    }\n\t    expolygons.push(ep);\n\t  };\n\t  ClipperLib.JS.ExPolygonsToPaths = function (expolygons)\n\t  {\n\t    var a, i, alen, ilen;\n\t    var paths = new ClipperLib.Paths();\n\t    for (a = 0, alen = expolygons.length; a < alen; a++)\n\t    {\n\t      paths.push(expolygons[a].outer);\n\t      for (i = 0, ilen = expolygons[a].holes.length; i < ilen; i++)\n\t      {\n\t        paths.push(expolygons[a].holes[i]);\n\t      }\n\t    }\n\t    return paths;\n\t  }\n\t  ClipperLib.JS.PolyTreeToExPolygons = function (polytree)\n\t  {\n\t    var expolygons = new ClipperLib.ExPolygons();\n\t    var node, i, childs, ilen;\n\t    for (i = 0, childs = polytree.Childs(), ilen = childs.length; i < ilen; i++)\n\t    {\n\t      node = childs[i];\n\t      ClipperLib.JS.AddOuterPolyNodeToExPolygons(node, expolygons);\n\t    }\n\t    return expolygons;\n\t  };\n\t})();\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// lw.svg-parser.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 111f4647c7c62486eb5a","class Point {\n    // Class constructor...\n    constructor(x, y) {\n        // Init properties\n        this.x = parseFloat(x)\n        this.y = parseFloat(y)\n\n        if (isNaN(this.x) || isNaN(this.y)) {\n            console.error('x:', x, 'y:', y)\n            throw new Error('Float value!!!')\n        }\n    }\n\n    isEqual(point) {\n        return this.x === point.x && this.y === point.y\n    }\n}\n\nclass Path {\n    // Class constructor...\n    constructor() {\n        // Init properties\n        this.points = []\n        this.length = 0\n    }\n\n    getPoints() {\n        return this.points\n    }\n\n    getFlattenPoints() {\n        let points = []\n        this.points.forEach(point => points.push(point.x, point.y))\n        return points\n    }\n\n    getClipperPoints(scaleUp = 1) {\n        let points = []\n        this.points.forEach(point => points.push({ X: parseInt(point.x * scaleUp), Y: parseInt(point.y * scaleUp) }))\n        return points\n    }\n\n    fromClipperPoints(points, scaleDown = 1) {\n        this.points = []\n        points.forEach(point => this.addPoint(parseFloat(point.X * scaleDown), parseFloat(point.Y * scaleDown)))\n        return this\n    }\n\n    getPoint(i) {\n        return this.points[i < 0 ? this.length + i : i] || null\n    }\n\n    addPoint(x, y) {\n        this.points.push(new Point(x, y))\n        this.length = this.points.length\n    }\n\n    addPoints(points) {\n        // For each couple of points\n        for (let i = 0, il = points.length; i < il; i += 2) {\n            this.addPoint(points[i], points[i + 1])\n        }\n    }\n\n    isClosed() {\n        let firstPoint = this.getPoint(0)\n        return firstPoint && firstPoint.isEqual(this.getPoint(-1))\n    }\n\n    close() {\n        if (! this.isClosed() && this.length > 2) {\n            let firstPoint = this.getPoint(0)\n            this.addPoint(firstPoint.x, firstPoint.y)\n            return true\n        }\n\n        return false\n    }\n\n    transform(matrix) {\n        this.points = this.points.map(point => {\n            return new Point(\n                matrix[0] * point.x + matrix[2] * point.y + matrix[4],\n                matrix[1] * point.x + matrix[3] * point.y + matrix[5]\n            )\n        })\n    }\n}\n\n// Exports\nexport { Path, Point }\nexport default Path\n\n\n\n// WEBPACK FOOTER //\n// ./path.js","// Imports\r\nimport { Tag } from './tag'\r\nimport { TagParser } from './tagparser'\r\n\r\n// SVG parser class\r\nclass Parser {\r\n    // Class constructor...\r\n    constructor(settings) {\r\n        // Defaults settings\r\n        settings = settings || {}\r\n\r\n        // Init properties\r\n        this.element  = null // XML document Element object\r\n        this.editor   = null // Editor info { name, version, fingerprint }\r\n        this.document = null // Document info { width, height, viewBox }\r\n        this.defs     = null // Defined <defs> (DOM) nodes list by id\r\n        this.tags     = null // Tag objects hierarchy\r\n\r\n        // Trace settings (Arc, Bezier)\r\n        this.traceSettings = Object.assign({\r\n            linear       : true, // Linear trace mode\r\n            step         : 0.01, // Step resolution if linear mode = false\r\n            resolution   : 100,  // Number of segments we use to approximate arc length\r\n            segmentLength: 1,    // Segment length\r\n        }, settings.traceSettings || {})\r\n\r\n        // Supported tags by this lib\r\n        this.supportedTags = [\r\n            'svg', 'g', 'defs', 'use',\r\n            'line', 'polyline', 'polygon',\r\n            'rect', 'circle', 'ellipse', 'path',\r\n            'title', 'desc'\r\n        ]\r\n\r\n        // Tags list to includes/excludes\r\n        this.parseTags = settings.includes || this.supportedTags\r\n        this.skipTags  = settings.excludes || ['#text', '#comment']  // silent (no warning)\r\n\r\n        // User onTag callback ?\r\n        settings.onTag && this.onTag(settings.onTag, settings.onTagContext)\r\n    }\r\n\r\n    // Load raw XML string, XMLDocument, Element or File object\r\n    load(input) {\r\n        // Load raw XML string\r\n        if (typeof input === 'string') {\r\n            return this.loadFromString(input)\r\n        }\r\n\r\n        // Load File object\r\n        if (input instanceof File) {\r\n            return this.loadFromFile(input)\r\n        }\r\n\r\n        // Load XMLDocument object\r\n        if (input instanceof XMLDocument) {\r\n            return this.loadFromXMLDocument(input)\r\n        }\r\n\r\n        // Load Element object\r\n        if (input instanceof Element) {\r\n            return this.loadFromElement(input)\r\n        }\r\n\r\n        // Return rejected promise with an Error object\r\n        return Promise.reject(new Error('Unsupported input format.'))\r\n    }\r\n\r\n    // Load from Element object\r\n    loadFromElement(input) {\r\n        return new Promise((resolve, reject) => {\r\n            // Bad input type\r\n            if (! (input instanceof Element)) {\r\n                reject(new Error('Input param must be a Element object.'))\r\n            }\r\n\r\n            // Parser error\r\n            if (input.nodeName === 'parsererror') { // FF\r\n                reject(new Error(input.textContent))\r\n            }\r\n\r\n            if (input.nodeName === 'html' && input.getElementsByTagName('parsererror')) { // Chrome\r\n                reject(new Error(input.getElementsByTagName('parsererror')[0].textContent))\r\n            }\r\n\r\n            // Set document element\r\n            this.element = input\r\n\r\n            // Resolve promise\r\n            resolve(input)\r\n        })\r\n    }\r\n\r\n    // Load from XMLDocument object\r\n    loadFromXMLDocument(input) {\r\n        return new Promise((resolve, reject) => {\r\n            // Bad input type\r\n            if (! (input instanceof XMLDocument)) {\r\n                reject(new Error('Input param must be a XMLDocument object.'))\r\n            }\r\n\r\n            // Load from Element...\r\n            this.loadFromElement(input.documentElement).then(resolve).catch(reject)\r\n        })\r\n    }\r\n\r\n    // Load raw XML string\r\n    loadFromString(input) {\r\n        return new Promise((resolve, reject) => {\r\n            // Bad input type\r\n            if (typeof input !== 'string') {\r\n                reject(new Error('Input param must be a string.'))\r\n            }\r\n\r\n            // Parse svg editor\r\n            this._parseEditor(input)\r\n\r\n            // Parse string as DOM object\r\n            let parser = new DOMParser()\r\n            let XMLDoc = parser.parseFromString(input, 'text/xml')\r\n\r\n            // Load from XMLDocument...\r\n            this.loadFromXMLDocument(XMLDoc).then(resolve).catch(reject)\r\n        })\r\n    }\r\n\r\n    // Try to get the svg editor from input string\r\n    _parseEditor(input) {\r\n        // Reset editor\r\n        this.editor = {\r\n            name       : 'unknown',\r\n            version    : null,\r\n            fingerprint: null\r\n        }\r\n\r\n        // Fingerprint matches\r\n        let fingerprint\r\n\r\n        // Inkscape\r\n        fingerprint = input.match(/<!-- Created with Inkscape .*-->/i)\r\n\r\n        if (fingerprint) {\r\n            this.editor.name        = 'inkscape'\r\n            this.editor.fingerprint = fingerprint[0]\r\n\r\n            return this.editor\r\n        }\r\n\r\n        // Illustrator\r\n        fingerprint = input.match(/<!-- Generator: Adobe Illustrator ([0-9\\.]+), .*-->/i)\r\n\r\n        if (fingerprint) {\r\n            this.editor.name        = 'illustrator'\r\n            this.editor.version     = fingerprint[1]\r\n            this.editor.fingerprint = fingerprint[0]\r\n\r\n            return this.editor\r\n        }\r\n\r\n        // Return default\r\n        return this.editor\r\n    }\r\n\r\n    // Load from File object\r\n    loadFromFile(input) {\r\n        return new Promise((resolve, reject) => {\r\n            // Bad input type\r\n            if (! (input instanceof File)) {\r\n                reject(new Error('Input param must be a File object.'))\r\n            }\r\n\r\n            // Create file reader\r\n            let reader = new FileReader()\r\n\r\n            // Register reader events handlers\r\n            reader.onload = event => {\r\n                this.loadFromString(event.target.result).then(resolve).catch(reject)\r\n            }\r\n\r\n            reader.onerror = event => {\r\n                reject(new Error('Error reading file : ' + input.name))\r\n            }\r\n\r\n            // Finally read input file as text\r\n            reader.readAsText(input)\r\n        })\r\n    }\r\n\r\n    // Parse the (loaded) element\r\n    parse(input) {\r\n        // Reset properties\r\n        this.document = null\r\n        this.defs     = {}\r\n        this.tags     = null\r\n\r\n        // Load input if provided\r\n        if (input) {\r\n            return new Promise((resolve, reject) => {\r\n                this.load(input).then(() => {\r\n                    resolve(this.parse())\r\n                }).catch(reject)\r\n            })\r\n        }\r\n\r\n        // Start parsing element\r\n        return new Promise((resolve, reject) => {\r\n            // If no element is loaded\r\n            if (! this.element) {\r\n                reject(new Error('No element is loaded, call the load method before.'))\r\n            }\r\n\r\n            // Parse the main Element (recursive)\r\n            this.tags = this._parseElement(this.element)\r\n\r\n            if (! this.tags) {\r\n                reject(new Error('No supported tags found.'))\r\n            }\r\n\r\n            // Apply matrix (recursive)\r\n            this.tags.applyMatrix()\r\n\r\n            // Resolve the promise\r\n            resolve(this.tags)\r\n        })\r\n    }\r\n\r\n    // On tag callback\r\n    _onTag(tag) {\r\n        console.info('onTag:', tag)\r\n    }\r\n\r\n    // Register on tag callback\r\n    onTag(callback, context) {\r\n        this._onTag = tag => callback.call(context || this, tag)\r\n    }\r\n\r\n    // Parse the provided Element and return an Tag collection (recursive)\r\n    _parseElement(element, parent) {\r\n        // Create base tag object\r\n        let tag = new Tag(element, parent)\r\n\r\n        // Exluded tag ?\r\n        if (this.skipTags.indexOf(tag.name) !== -1) {\r\n            return null // silent\r\n        }\r\n\r\n        // Supported tag ?\r\n        if (this.parseTags.indexOf(tag.name) === -1) {\r\n            return this._skipTag(tag, 'unsupported')\r\n        }\r\n\r\n        // Parse the tag\r\n        let tagParser = new TagParser(tag, this)\r\n\r\n        if (! tagParser.parse()) {\r\n            return false\r\n        }\r\n\r\n        // Call the on tag callback\r\n        this._onTag(tag)\r\n\r\n        // Parse child nodes\r\n        let childTag\r\n\r\n        element.childNodes.forEach(childNode => {\r\n            // Parse child element\r\n            if (childTag = this._parseElement(childNode, tag)) {\r\n                tag.addChild(childTag)\r\n            }\r\n        })\r\n\r\n        // Empty group\r\n        if (['svg', 'g'].indexOf(tag.name) !== -1 && ! tag.children.length) {\r\n            return this._skipTag(tag, 'empty')\r\n        }\r\n\r\n        // Return tag object\r\n        return tag\r\n    }\r\n\r\n    // Log skip tag warning message\r\n    _skipTag(tag, message) {\r\n        console.warn('Skip tag :', message + ':', tag)\r\n        return false\r\n    }\r\n\r\n    // Log skip tag attribute warning message\r\n    _skipTagAttr(tag, attr, message) {\r\n        console.warn('Skip tag attribute :', message + ':', attr, tag)\r\n        return false\r\n    }\r\n\r\n}\r\n\r\n// Exports\r\nexport { Parser }\r\nexport default Parser\r\n\n\n\n// WEBPACK FOOTER //\n// ./parser.js","import { Path, Point } from './path'\nimport clipper from 'clipper-lib'\n\nconst DEG_TO_RAD = Math.PI / 180\n\n// SVG tag class\nclass Tag {\n    // Class constructor...\n    constructor(element, parent) {\n        // Init properties\n        this.element  = element\n        this.name     = element.nodeName.toLowerCase()\n        this.parent   = parent || null\n        this.layer    = null\n        this.attrs    = {}\n        this.children = []\n        this.paths    = []\n        this.matrix   = null\n        this.path     = new Path()\n        this.point    = new Point(0, 0)\n        this.shapes   = []\n\n        // Add first path\n        this.paths.push(this.path)\n\n        // Set the matrix\n        this.setMatrix(this.parent && this.parent.matrix)\n\n        // Clone parent attributes\n        if (this.parent && (this.parent.name === 'g' || this.parent.name === 'svg')) {\n            // Inherit layer name\n            this.layer = this.parent.layer\n\n            // Inherit parent attributes\n            let excludes = ['transform', 'width', 'height']\n\n            Object.keys(this.parent.attrs).forEach(key => {\n                if (excludes.indexOf(key) === -1) {\n                    this.setAttr(key, this.parent.attrs[key])\n                }\n            })\n        }\n    }\n\n    setAttr(name, value) {\n        this.attrs[name] = value\n    }\n\n    getAttr(name, defaultValue) {\n        return this.attrs[name] !== undefined ? this.attrs[name]\n            : (defaultValue !== undefined ? defaultValue : null)\n    }\n\n    getLayerName() {\n        if (this.name === 'g') {\n            return this.getAttr('inkscape:label', this.getAttr('id', null))\n        }\n    }\n\n    setLayerName(name) {\n        if (this.name === 'g') {\n            this.layer = name || this.getLayerName()\n        }\n    }\n\n    addChild(childTag) {\n        this.children.push(childTag)\n    }\n\n    clearPath() {\n        this.path = new Path()\n    }\n\n    newPath() {\n        if (this.path.length > 0) {\n            this.clearPath()\n            this.paths.push(this.path)\n        }\n    }\n\n    closePath() {\n        return this.path.close()\n    }\n\n    addPoint(x, y, relative) {\n        // Relative from the last point\n        if (relative) {\n            x += this.point.x\n            y += this.point.y\n        }\n\n        // Add current point\n        this.path.addPoint(x, y)\n\n        // Update current point\n        this.point = this.path.getPoint(-1)\n    }\n\n    addPoints(points, relative) {\n        // For each couple of points\n        for (let i = 0, il = points.length; i < il; i += 2) {\n            this.addPoint(points[i], points[i + 1], relative)\n        }\n    }\n\n    setMatrix(matrix) {\n        this.matrix = matrix || [1, 0, 0, 1, 0, 0]\n    }\n\n    addMatrix(matrix) {\n        this.matrix = [\n            this.matrix[0] * matrix[0] + this.matrix[2] * matrix[1],\n            this.matrix[1] * matrix[0] + this.matrix[3] * matrix[1],\n            this.matrix[0] * matrix[2] + this.matrix[2] * matrix[3],\n            this.matrix[1] * matrix[2] + this.matrix[3] * matrix[3],\n            this.matrix[0] * matrix[4] + this.matrix[2] * matrix[5] + this.matrix[4],\n            this.matrix[1] * matrix[4] + this.matrix[3] * matrix[5] + this.matrix[5]\n        ]\n    }\n\n    translate(x, y) {\n        y = y === undefined ? 0 : y\n        this.addMatrix([1, 0, 0, 1, x, y])\n    }\n\n    rotate(angle, x, y) {\n        angle = angle * DEG_TO_RAD\n\n        if (arguments.length == 2) {\n            this.addMatrix([1, 0, 0, 1, x, y])\n        }\n\n        this.addMatrix([Math.cos(angle), Math.sin(angle), -Math.sin(angle), Math.cos(angle), 0, 0])\n\n        if (arguments.length == 2) {\n            this.addMatrix([1, 0, 0, 1, -x, -y])\n        }\n    }\n\n    scale(x, y) {\n        y = y === undefined ? x : y\n        this.addMatrix([x, 0, 0, y, 0, 0])\n    }\n\n    skewX(angle) {\n        this.addMatrix([1, 0, Math.tan(angle * DEG_TO_RAD), 1, 0, 0])\n    }\n\n    skewY(angle) {\n        this.addMatrix([1, Math.tan(angle * DEG_TO_RAD), 0, 1, 0, 0])\n    }\n\n    applyMatrix(matrix) {\n        matrix && this.addMatrix(matrix)\n\n        this.paths.forEach(path => {\n            path.transform(this.matrix)\n        })\n\n        this.shapes.forEach(shape => {\n            shape.outer.transform(this.matrix)\n            shape.holes.forEach(hole => {\n                hole.transform(this.matrix)\n            })\n        })\n\n        this.setMatrix(null)\n\n        this.children.forEach(tag => {\n            tag.applyMatrix(matrix)\n        })\n    }\n\n    getPaths() {\n        return this.paths\n    }\n\n    getShapes() {\n        // No shapes...\n        if (this.getAttr('fill', 'none') === 'none' || ! this.paths[0].length) {\n            return this.shapes\n        }\n\n        // Get fill rule\n        let fillRule = this.getAttr('fill-rule', 'nonzero')\n            fillRule = fillRule === 'nonzero' ? clipper.PolyFillType.pftNonZero : clipper.PolyFillType.pftEvenOdd\n\n        // Create clipper path\n        let cPolyTree    = new clipper.PolyTree()\n        let cClipper     = new clipper.Clipper()\n        let clipperScale = 10000000\n        let clipperPaths = []\n\n        this.paths.forEach(path => {\n            clipperPaths.push(path.getClipperPoints(clipperScale))\n        })\n\n        cClipper.AddPaths(clipperPaths, clipper.PolyType.ptSubject, true)\n        cClipper.Execute(clipper.ClipType.ctUnion, cPolyTree, fillRule, fillRule)\n\n        let paths     = clipper.Clipper.PolyTreeToPaths(cPolyTree)\n        let polygones = clipper.Clipper.SimplifyPolygons(paths, fillRule)\n\n        // Single path (no hole)\n        if (this.paths.length > 1) {\n            cClipper.Clear()\n            cClipper.StrictlySimple = true\n            cPolyTree = new clipper.PolyTree()\n            cClipper.AddPaths(polygones, clipper.PolyType.ptSubject, true)\n            cClipper.Execute(clipper.ClipType.ctUnion, cPolyTree, fillRule, fillRule)\n        }\n\n        // PolyTree to ExPolygons\n        let toPath     = path => new Path().fromClipperPoints(path, 1 / clipperScale)\n        let exPolygons = clipper.JS.PolyTreeToExPolygons(cPolyTree)\n        this.shapes    = exPolygons.map(exPolygon => {\n            return {\n                outer: toPath(exPolygon.outer),\n                holes: exPolygon.holes.map(toPath)\n            }\n        })\n\n        // Return shapes...\n        return this.shapes\n    }\n}\n\n// Exports\nexport { Tag }\nexport default Tag\n\n\n\n// WEBPACK FOOTER //\n// ./tag.js","import { Arc, CubicBezier, QuadricBezier } from './trace'\nimport { Point, Path } from './path'\n\n// SVG tag parser\nclass TagParser {\n    // Class constructor...\n    constructor(tag, parser) {\n        // Init properties\n        this.tag            = tag\n        this.parser         = parser\n        this.currentCommand = null\n        this.lastCommand    = null\n        this.pathData       = null\n        this.traceSettings  = parser.traceSettings\n    }\n\n    parse() {\n        // Get internal parser from node name\n        let handler = this['_' + this.tag.name]\n\n        // Implemented tag handler?\n        if (! handler || typeof handler !== 'function') {\n            return this.parser._skipTag(this.tag, 'not yet implemented')\n        }\n\n        // Parse tag attributes\n        this._parseTagAttrs()\n\n        // Parse tag\n        return handler.call(this)\n    }\n\n    // Parse the tag attributes\n    _parseTagAttrs() {\n        // Get tag attributes\n        let attrs = this.tag.element.attributes\n\n        if (! attrs) {\n            return null\n        }\n\n        // For each attribute\n        let attr, value, style\n\n        Object.keys(attrs).some(key => {\n            // Current attribute\n            attr = attrs[key]\n\n            // Normalize attribute value\n            value = this._normalizeTagAttr(attr)\n\n            if (value === false) {\n                return false // continue\n            }\n\n            // Special case\n            if (attr.nodeName === 'style') {\n                style = value\n            }\n            else {\n                // Set new attribute name/value\n                this.tag.setAttr(attr.nodeName, value)\n            }\n        })\n\n        // If style attribute (override tag attributes)\n        // TODO get/parse global style and override this one...\n        style && style.split(';').some(attr => {\n            // Current style\n            attr = attr.split(':')\n            attr = { nodeName: attr[0], nodeValue: attr[1] }\n\n            // Normalize attribute value\n            value = this._normalizeTagAttr(attr)\n\n            if (value === false) {\n                return false // continue\n            }\n\n            // Set new attribute name/value\n            this.tag.setAttr(attr.nodeName, value)\n        })\n\n        // Set inherited color\n        let colorsAttrs = ['fill', 'stroke', 'color']\n\n        colorsAttrs.forEach(attrName => {\n            if (this.tag.getAttr(attrName) === 'inherit') {\n                this.tag.setAttr(attrName, this.tag.parent.getAttr(attrName, 'none'))\n            }\n        })\n\n        // Parse viewBox attribute\n        this._parseViewBoxAttr()\n\n        // Parse transform attribute\n        this._parseTransformAttr()\n    }\n\n    // Normalize tag attribute\n    _normalizeTagAttr(attr) {\n        // Normalize whitespaces\n        let value = attr.nodeValue\n            .replace(/(\\r?\\n|\\r)+/gm, ' ') // Remove all new line chars\n            .replace(/\\s+/gm, ' ')         // Reduce multiple whitespaces\n            .trim()                        // Remove trailing whitespaces\n\n        if (! value.length) {\n            return this.parser._skipTagAttr(this.tag, attr, 'empty')\n        }\n\n        // Filters\n        switch (attr.nodeName) {\n            // Normalize size unit -> to px\n            case 'x':\n            case 'y':\n            case 'x1':\n            case 'y1':\n            case 'x2':\n            case 'y2':\n            case 'r':\n            case 'rx':\n            case 'ry':\n            case 'cx':\n            case 'cy':\n            case 'width':\n            case 'height':\n            case 'fontSize':\n            case 'strokeWidth':\n                value = this._normalizeTagAttrUnit(attr)\n            break\n\n            // Normalize points attribute\n            case 'points':\n            case 'viewBox':\n                value = this._normalizeTagAttrPoints(attr)\n            break\n\n            // Range limit to [0 - 1]\n            case 'opacity':\n            case 'fillOpacity':\n            case 'strokeOpacity':\n                value = this._normalizeTagAttrRange(attr, 0, 1)\n            break\n\n            case 'preserveAspectRatio':\n                value = this._normalizeTagAttrPreserveAspectRatio(attr)\n            break\n        }\n\n        // Return normalized value\n        return value\n    }\n\n    // Normalize attribute unit to px\n    _normalizeTagAttrUnit(attr) {\n        let stringValue = attr.nodeValue.toLowerCase()\n        let floatValue  = parseFloat(stringValue)\n\n        if (isNaN(floatValue)) {\n            return this.parser._skipTagAttr(this.tag, attr, 'only numeric value allowed')\n        }\n\n        if (stringValue.indexOf('mm') !== -1) {\n            return floatValue * 3.5433070869\n        }\n\n        if (stringValue.indexOf('cm') !== -1) {\n            return floatValue * 35.433070869\n        }\n\n        if (stringValue.indexOf('in') !== -1) {\n            return floatValue * 90.0\n        }\n\n        if (stringValue.indexOf('pt') !== -1) {\n            return floatValue * 1.25\n        }\n\n        if (stringValue.indexOf('pc') !== -1) {\n            return floatValue * 15.0\n        }\n\n        return floatValue\n    }\n\n    // Normalize points attribute\n    _normalizeTagAttrPoints(attr) {\n        let points = this._parseNumbers(attr.nodeValue)\n\n        if (points === false) {\n            return this.parser._skipTagAttr(this.tag, attr, 'only numeric values are allowed')\n        }\n\n        if (! points.length) {\n            return this.parser._skipTagAttr(this.tag, attr, 'empty points list')\n        }\n\n        if (points.length % 0) {\n            return this.parser._skipTagAttr(this.tag, attr, 'the number of points must be even')\n        }\n\n        return points\n    }\n\n    // Normalize range attribute like \"opacity\"\n    _normalizeTagAttrRange(attr, min, max) {\n        let stringValue = attr.nodeValue.trim()\n        let floatValue  = parseFloat(stringValue)\n\n        if (isNaN(floatValue)) {\n            return this.parser._skipTagAttr(this.tag, attr, 'only numeric values are allowed')\n        }\n\n        if (floatValue < min || floatValue > max) {\n            return this.parser._skipTagAttr(this.tag, attr, 'out of range [' + min + ', ' + max + ']')\n        }\n\n        return floatValue\n    }\n\n    // Parse points string as numbers array\n    _parseNumbers(points) {\n        // http://stackoverflow.com/questions/638565/parsing-scientific-notation-sensibly\n        if (typeof points === 'string') {\n            points = points.split(/([+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?/g)\n            .filter(point => {\n                return point && ['', ','].indexOf(point.trim()) === -1\n            })\n        }\n\n        // Normalize to float values\n        points = points.map(parseFloat)\n\n        // Test if all numbers is valid\n        if (points.some(isNaN)) {\n            return false\n        }\n\n        return points\n    }\n\n    // Normalize the preserveAspectRatio attribute\n    _normalizeTagAttrPreserveAspectRatio(attr) {\n        let params = {\n            defer: false,\n            align: 'none',\n            meet : true,\n            slice: false\n        }\n\n        let rawParams = attr.nodeValue\n\n        if (rawParams.indexOf('defer') === 0) {\n            rawParams    = rawParams.substr(6)\n            params.defer = true\n        }\n\n        rawParams    = rawParams.split(' ')\n        params.align = rawParams[0]\n        params.meet  = rawParams[1] || 'meet'\n        params.meet  = params.meet === 'meet'\n        params.slice = ! params.meet\n\n        return params\n    }\n\n    // Parse viewBox attribute and set transformations\n    _parseViewBoxAttr() {\n        // Get viewBox attribute\n        let viewBox = this.tag.getAttr('viewBox', null)\n\n        // No viewBox...\n        if (viewBox === null) {\n            return null\n        }\n\n        // Update size attributes\n        let width  = this.tag.getAttr('width', viewBox[2])\n        let height = this.tag.getAttr('height', viewBox[3])\n\n        this.tag.setAttr('width' , width)\n        this.tag.setAttr('height', height)\n\n        // Scale to match viewBox\n        // TODO clip path if preserveAspectRatio.slice\n        let scaleX     = width  / viewBox[2]\n        let scaleY     = height / viewBox[3]\n        let translateX = viewBox[0]\n        let translateY = viewBox[1]\n\n        let preserveAspectRatio = this.tag.getAttr('preserveAspectRatio', 'meet xMidYMid')\n\n        if (preserveAspectRatio) {\n            let newWidth, newHeight\n\n            if (preserveAspectRatio.meet) {\n                if (scaleX > scaleY) {\n                    scaleX   = scaleY\n                    newWidth = viewBox[2] * scaleX\n                }\n                else if (scaleX < scaleY) {\n                    scaleY    = scaleX\n                    newHeight = viewBox[3] * scaleY\n                }\n            }\n            else if (preserveAspectRatio.slice) {\n                if (scaleX < scaleY) {\n                    scaleX   = scaleY\n                    newWidth = viewBox[2] * scaleX\n                }\n                else if (scaleX > scaleY) {\n                    scaleY    = scaleX\n                    newHeight = viewBox[3] * scaleY\n                }\n            }\n\n            if (newWidth !== undefined) {\n                if (preserveAspectRatio.align === 'xMidYMid') {\n                    this.tag.translate((width - newWidth) / 2, 0)\n                }\n                else if (preserveAspectRatio.align === 'xMaxYMax') {\n                    this.tag.translate(width - newWidth, 0)\n                }\n            }\n            else if (newHeight !== undefined) {\n                if (preserveAspectRatio.align === 'xMidYMid') {\n                    this.tag.translate(0, (height - newHeight) / 2)\n                }\n                else if (preserveAspectRatio.align === 'xMaxYMax') {\n                    this.tag.translate(0, height - newHeight)\n                }\n            }\n        }\n\n        this.tag.scale(scaleX, scaleY)\n        this.tag.translate(-translateX, -translateY)\n    }\n\n    // Parse transform attribute and set transformations\n    _parseTransformAttr() {\n        // Get transform attribute\n        let transformAttr = this.tag.getAttr('transform', null)\n\n        // No transformation...\n        if (transformAttr === null || ! transformAttr.length) {\n            return null\n        }\n\n        // Parse attribute (split group on closing parenthesis)\n        let transformations = transformAttr.split(')')\n\n        // Remove last entry due to last \")\" found\n        transformations.pop()\n\n        // For each transformation\n        let transform, type, params\n\n        transformations.some(raw => {\n            // Split name and value on opening parenthesis\n            transform = raw.split('(')\n\n            // Invalid parts number\n            if (transform.length !== 2) {\n                return this.parser._skipTagAttr(this.tag, transformAttr, 'malformed') // continue\n            }\n\n            type = transform[0].trim()\n\n            // Quik hack 1/2\n            let func = type\n            if (func === 'matrix') {\n                func = 'addMatrix'\n            }\n\n            // Get tag transform method\n            let tagTransform = this.tag[func]\n\n            if (typeof tagTransform !== 'function') {\n                return this.parser._skipTagAttr(this.tag, transformAttr, 'unsupported transform type :' + type)\n            }\n\n            params = transform[1].trim()\n            params = this._parseNumbers(params)\n\n            // Skip empty value\n            if (! params.length) {\n                return this.parser._skipTagAttr(this.tag, transformAttr, 'malformed transform type :' + type)\n            }\n\n            // Quik hack 2/2\n            if (func == 'addMatrix') {\n                params = [params]\n            }\n\n            // Call tag transform method like \"tag.translate(param1, ..., paramN)\"\n            tagTransform.apply(this.tag, params)\n        })\n    }\n\n    _newPath() {\n        this.tag.newPath()\n    }\n\n    _clearPath() {\n        this.tag.clearPath()\n    }\n\n    _closePath() {\n        return this.tag.closePath()\n    }\n\n    _addPoints(points, relative) {\n        if (! points.length) {\n            return this.parser._skipTag(this.tag, 'empty points list')\n        }\n\n        if (points.length % 0) {\n            return this.parser._skipTag(this.tag, 'the number of points must be even')\n        }\n\n        relative = arguments.length < 2 && this.currentCommand.relative\n\n        this.tag.addPoints(points, relative)\n        return true\n    }\n\n    // SVG specs at https://www.w3.org/TR/SVG11/\n\n    _svg() {\n        // Only parse the root SVG tag as main document\n        if (this.parser.document) {\n            // Handled tag\n            return true\n        }\n\n        // Get the document size\n        let width  = this.tag.getAttr('width')\n        let height = this.tag.getAttr('height')\n\n        // Invalid size\n        if (! width || width < 0 || ! height || height < 0) {\n            throw new Error('Invalid document size: ' + width + ' / ' + height)\n        }\n\n        // Set document size\n        this.parser.document = {\n            width : width,\n            height: height\n        }\n\n        // Get document viewBox or set default to document size\n        let viewBox = this.tag.getAttr('viewBox', [0, 0, width, height])\n\n        this.parser.document.viewBox = {\n            x     : viewBox[0],\n            y     : viewBox[1],\n            width : viewBox[2],\n            height: viewBox[3]\n        }\n\n        // Check inkscape version\n        if (this.parser.editor.name === 'inkscape') {\n            this.parser.editor.version = this.tag.getAttr('inkscape:version')\n        }\n\n        // Handled tag\n        return true\n    }\n\n    _title() {\n        // Register the first encountered title tag as document title\n        if (this.parser.document && ! this.parser.document.title) {\n            this.parser.document.title = this.tag.element.textContent\n        }\n\n        // Skipped tag\n        return false\n    }\n\n    _desc() {\n        // Register the first encountered desc tag as document description\n        if (this.parser.document && ! this.parser.document.description) {\n            this.parser.document.description = this.tag.element.textContent\n        }\n\n        // Skipped tag\n        return false\n    }\n\n    _defs() {\n        // Register all child element with an id attribute\n        this.tag.element.childNodes.forEach(childNode => {\n            childNode.id && (this.parser.defs[childNode.id] = childNode)\n        })\n\n        // Skipped tag\n        return false\n    }\n\n    _use() {\n        // Get the target id\n        let target  = this.tag.getAttr('xlink:href').replace(/^#/, '')\n\n        // Try to get the defined element\n        let element = this.parser.defs[target]\n\n        if (! element) {\n            return this.parser._skipTag(this.tag, 'undefined reference [' + target + ']')\n        }\n\n        // Parse the defined element and set new parent from <use> tag parent\n        let useTag = this.parser._parseElement(element, this.tag.parent)\n\n        if (! useTag) {\n            return this.parser._skipTag(this.tag, 'empty reference [' + target + ']')\n        }\n\n        // Set matrix from real parent (<use>)\n        useTag.setMatrix(this.tag.matrix)\n\n        // Replace the use tag with new one\n        this.tag.parent.addChild(useTag)\n\n        // Skipped tag\n        return false\n    }\n\n    _g() {\n        // Set the tag layer name\n        this.tag.setLayerName()\n\n        // Handled tag\n        return true\n    }\n\n    _line() {\n        // Handled tag\n        return this._path([\n            'M', this.tag.getAttr('x1'), this.tag.getAttr('y1'),\n            'L', this.tag.getAttr('x2'), this.tag.getAttr('y2')\n        ])\n    }\n\n    _polyline(close=false) {\n        let points = this.tag.getAttr('points')\n        let path   = ['M', points.shift(), points.shift(), 'L']\n\n        path = path.concat(points)\n        close && path.push('Z')\n\n        // Handled tag\n        return this._path(path)\n    }\n\n    _polygon() {\n        // Handled like polyline but closed\n        return this._polyline(true)\n    }\n\n    _rect() {\n        // Get rectangle attributes\n        let w  = this.tag.getAttr('width')\n        let h  = this.tag.getAttr('height')\n        let x  = this.tag.getAttr('x', 0)\n        let y  = this.tag.getAttr('y', 0)\n        let rx = this.tag.getAttr('rx', null)\n        let ry = this.tag.getAttr('ry', null)\n\n        // Simple rect\n        if (!rx && !ry) {\n            // Handled tag\n            return this._path(['M', x, y, 'h', w, 'v', h, 'h', -w, 'z'])\n        }\n\n        // If a properly specified value is provided for ‘rx’, but not for ‘ry’,\n        // then set both rx and ry to the value of ‘rx’ and vis-vera...\n        if (rx === null) rx = ry\n        if (ry === null) ry = rx\n\n        // A negative value is an error\n        if (rx === null || rx === null || rx < 0 || ry < 0) {\n            // Skip tag\n            return this.parser._skipTag(this.tag, 'negative value for \"rx/ry\" not allowed')\n        }\n\n        // If rx is greater than half of ‘width’, then set rx to half of ‘width’.\n        // If ry is greater than half of ‘height’, then set ry to half of ‘height’.\n        if (rx > w / 2) rx = w / 2\n        if (ry > h / 2) ry = h / 2\n\n        let dx = rx * 2\n        let dy = ry * 2\n\n        // Handled tag\n        return this._path([\n            'M', x + rx, y,\n            'h', w - dx,\n            'c', rx, 0, rx, ry, rx, ry,\n            'v', h - dy,\n            'c', 0, ry, -rx, ry, -rx, ry,\n            'h', -w + dx,\n            'c', -rx, 0, -rx, -ry, -rx, -ry,\n            'v', -h + dy,\n            'c', 0, 0, 0, -ry, rx, -ry,\n            'z'\n        ])\n    }\n\n    _circle() {\n        let r = this.tag.getAttr('r', 0)\n\n        if (r <= 0) {\n            // Skipped tag\n            return false\n        }\n\n        let cx = this.tag.getAttr('cx', 0)\n        let cy = this.tag.getAttr('cy', 0)\n\n        // Handled tag\n        return this._path([\n            'M', cx-r, cy,\n            'A', r, r, 0, 0, 0, cx, cy+r,\n            'A', r, r, 0, 0, 0, cx+r, cy,\n            'A', r, r, 0, 0, 0, cx, cy-r,\n            'A', r, r, 0, 0, 0, cx-r, cy,\n            'Z'\n        ])\n    }\n\n    _ellipse() {\n        let rx = this.tag.getAttr('rx', 0)\n        let ry = this.tag.getAttr('ry', 0)\n\n        if (rx <= 0 || ry <= 0) {\n            // Skipped tag\n            return false\n        }\n\n        let cx = this.tag.getAttr('cx', 0)\n        let cy = this.tag.getAttr('cy', 0)\n\n        // Handled tag\n        return this._path([\n            'M', cx-rx, cy,\n            'A', rx, ry, 0, 0, 0, cx, cy+ry,\n            'A', rx, ry, 0, 0, 0, cx+rx, cy,\n            'A', rx, ry, 0, 0, 0, cx, cy-ry,\n            'A', rx, ry, 0, 0, 0, cx-rx, cy,\n            'Z'\n        ])\n    }\n\n    _paths(type, num, points) {\n        if (points.length > num) {\n            let handler, result = true\n\n            while(result && points.length) {\n                handler = this['_path' + type]\n                result  = handler.call(this, points.splice(0, num))\n            }\n\n            return result\n        }\n\n        return null\n    }\n\n    _path(path) {\n        // Provided path\n        if (path && typeof path !== 'string') {\n            path = path.join(' ')\n        }\n\n        // Get the paths data attribute value\n        let dAttr = path || this.tag.getAttr('d', null)\n\n        if (! dAttr) {\n            // Skipped tag\n            return false\n        }\n\n        // Split on each commands\n        let commands = dAttr.match(/([M|Z|L|H|V|C|S|Q|T|A]+([^M|Z|L|H|V|C|S|Q|T|A]+)?)/gi)\n\n        if (! commands) {\n            return this.parser._skipTag(this.tag, 'malformed \"d\" attribute')\n        }\n\n        // For each command...\n        this.currentCommand = {\n            raw     : null,\n            type    : null,\n            params  : null,\n            relative: null\n        }\n        this.lastCommand = this.currentCommand\n        this.pathData    = {}\n\n        let handler    = null\n        let parseError = false\n\n        commands.some(raw => {\n            // Remove trailing whitespaces\n            raw = raw.trim()\n\n            // Extract command char and params\n            this.currentCommand.raw      = raw\n            this.currentCommand.type     = raw[0].toUpperCase()\n            this.currentCommand.params   = raw.substr(1).trim()\n            this.currentCommand.relative = this.currentCommand.type !== raw[0]\n\n            // Get path handler from command char\n            handler = this['_path' + this.currentCommand.type]\n\n            if (! handler || typeof handler !== 'function') {\n                this.parser._skipTag(this.tag, 'unsupported path command [' + raw[0] + ']')\n                return parseError = true // break\n            }\n\n            // Extract all numbers from arguments string\n            this.currentCommand.params = this._parseNumbers(this.currentCommand.params)\n\n            if (this.currentCommand.params === false) {\n                this.parser._skipTag(this.tag, 'only numeric values are allowed in [' + this.currentCommand.raw + ']')\n                return parseError = true // break\n            }\n\n            // Execute command parser\n            if (! handler.call(this, this.currentCommand.params)) {\n                return parseError = true // break\n            }\n\n            // Update last command\n            this.lastCommand = {}\n\n            Object.keys(this.currentCommand).forEach(key => {\n                this.lastCommand[key] = this.currentCommand[key]\n            })\n        })\n\n        // Skip tag\n        if (parseError) {\n            this._clearPath()\n            return false\n        }\n\n        // Handled tag\n        return true\n    }\n\n    _pathM(points) {\n        // New path\n        this._newPath()\n\n        // Set the current point (start of new path)\n        // If is followed by multiple pairs of coordinates,\n        // the subsequent pairs are treated as implicit lineto commands.\n        return this._addPoints(points)\n    }\n\n    _pathZ() {\n        this._closePath()\n        return true\n    }\n\n    _pathL(points) {\n        return this._addPoints(points)\n    }\n\n    _pathH(points) {\n        return points.every(x => {\n            return this._addPoints([x, this.currentCommand.relative ? 0 : this.tag.point.y])\n        })\n    }\n\n    _pathV(points) {\n        return points.every(y => {\n            return this._addPoints([this.currentCommand.relative ? 0 : this.tag.point.x, y])\n        })\n    }\n\n    _pathC(points) {\n        // Multiple paths\n        let result = this._paths('C', 6, points)\n\n        if (result !== null) {\n            return result\n        }\n\n        // Single path\n        let p1 = this.tag.point\n        let rl = this.currentCommand.relative\n\n        let x1 = points[0] + (rl ? p1.x : 0)\n        let y1 = points[1] + (rl ? p1.y : 0)\n        let x2 = points[2] + (rl ? p1.x : 0)\n        let y2 = points[3] + (rl ? p1.y : 0)\n        let x  = points[4] + (rl ? p1.x : 0)\n        let y  = points[5] + (rl ? p1.y : 0)\n\n        this.pathData.x2 = x2\n        this.pathData.y2 = y2\n\n        let p2 = new Point(x1, y1)\n        let p3 = new Point(x2, y2)\n        let p4 = new Point(x, y)\n\n        //console.log('C', p1, p2, p3, p4)\n\n        // p1  : starting point\n        // p2  : control point\n        // p3  : control point\n        // p4  : end point\n        let tracer = new CubicBezier(this.traceSettings)\n        let coords = tracer.trace({ p1, p2, p3, p4 }) // => [x,y, x,y, ...]\n        // let tracer = trace(CubicBezier, this.traceSettings)\n        // let coords = tracer({ p1, p2, p3, p4 })\n\n        // Trace the line\n        return this._addPoints(coords, false)\n    }\n\n    _pathS(points) {\n        // Multiple paths\n        let result = this._paths('S', 4, points)\n\n        if (result !== null) {\n            return result\n        }\n\n        // Single path\n        let p1 = this.tag.point\n        let rl = this.currentCommand.relative\n\n        let x1 = p1.x\n        let y1 = p1.y\n\n        if (this.lastCommand.type === 'S' || this.lastCommand.type === 'C') {\n            x1 -= this.pathData.x2 - x1\n            y1 -= this.pathData.y2 - y1\n        }\n\n        let x2 = points[0] + (rl ? p1.x : 0)\n        let y2 = points[1] + (rl ? p1.y : 0)\n        let x  = points[2] + (rl ? p1.x : 0)\n        let y  = points[3] + (rl ? p1.y : 0)\n\n        this.pathData.x2 = x2\n        this.pathData.y2 = y2\n\n        let p2 = new Point(x1, y1)\n        let p3 = new Point(x2, y2)\n        let p4 = new Point(x, y)\n\n        //console.log('S', p1, p2, p3, p4)\n\n        // p1  : starting point\n        // p2  : control point\n        // p3  : control point\n        // p4  : end point\n        let tracer = new CubicBezier(this.traceSettings)\n        let coords = tracer.trace({ p1, p2, p3, p4 }) // => [x,y, x,y, ...]\n        // let tracer = trace(CubicBezier, this.traceSettings)\n        // let coords = tracer({ p1, p2, p3, p4 })\n\n        // Trace the line\n        return this._addPoints(coords, false)\n    }\n\n    _pathQ(points) {\n        // Multiple paths\n        let result = this._paths('Q', 4, points)\n\n        if (result !== null) {\n            return result\n        }\n\n        // Single path\n        let p1 = this.tag.point\n        let rl = this.currentCommand.relative\n\n        let x1 = points[0] + (rl ? p1.x : 0)\n        let y1 = points[1] + (rl ? p1.y : 0)\n        let x  = points[2] + (rl ? p1.x : 0)\n        let y  = points[3] + (rl ? p1.y : 0)\n\n        this.pathData.x1 = x1\n        this.pathData.y1 = y1\n\n        let p2 = new Point(x1, y1)\n        let p3 = new Point(x, y)\n\n        //console.log('Q', p1, p2, p3)\n\n        // p1  : starting point\n        // p2  : control point\n        // p3  : end point\n        let tracer = new QuadricBezier(this.traceSettings)\n        let coords = tracer.trace({ p1, p2, p3 }) // => [x,y, x,y, ...]\n\n        // Trace the line\n        return this._addPoints(coords, false)\n    }\n\n    _pathT(points) {\n        // Multiple paths\n        let result = this._paths('T', 2, points)\n\n        if (result !== null) {\n            return result\n        }\n\n        // Single path\n        let p1 = this.tag.point\n        let rl = this.currentCommand.relative\n\n        let x1 = p1.x\n        let y1 = p1.y\n\n        if (this.lastCommand.type === 'Q' || this.lastCommand.type === 'T') {\n            x1 -= this.pathData.x1 - x1\n            y1 -= this.pathData.y1 - y1\n        }\n\n        let x = points[0] + (rl ? p1.x : 0)\n        let y = points[1] + (rl ? p1.y : 0)\n\n        this.pathData.x1 = x1\n        this.pathData.y1 = y1\n\n        let p2 = new Point(x1, y1)\n        let p3 = new Point(x, y)\n\n        //console.log('T', p1, p2, p3)\n\n        // p1  : starting point\n        // p2  : control point\n        // p3  : end point\n        let tracer = new QuadricBezier(this.traceSettings)\n        let coords = tracer.trace({ p1, p2, p3 }) // => [x,y, x,y, ...]\n\n        // Trace the line\n        return this._addPoints(coords, false)\n    }\n\n    _pathA(points) {\n        // Multiple paths\n        let result = this._paths('A', 7, points)\n\n        if (result !== null) {\n            return result\n        }\n\n        // Single path\n        let rl    = this.currentCommand.relative\n        let p1    = this.tag.point\n        let rx    = points[0]\n        let ry    = points[1]\n        let angle = points[2]\n        let large = !!points[3]\n        let sweep = !!points[4]\n        let x     = points[5] + (rl ? p1.x : 0)\n        let y     = points[6] + (rl ? p1.y : 0)\n        let p2    = new Point(x, y)\n\n        //console.log('A', p1, rx, ry, angle, large, sweep, p2)\n\n        let tracer = new Arc(this.traceSettings)\n        let coords = tracer.trace({ p1, rx, ry, angle, large, sweep, p2 }) // => [x,y, x,y, ...]\n\n        // Trace the line\n        return this._addPoints(coords, false)\n    }\n}\n\n// Exports\nexport { TagParser }\nexport default TagParser\n\n\n\n// WEBPACK FOOTER //\n// ./tagparser.js","// Base code from : https://github.com/MadLittleMods/svg-curve-lib/blob/master/src/js/svg-curve-lib.js\nimport { Point } from './path'\n\nconst MATH_PI_2  = Math.PI * 2\nconst DEG_TO_RAD = Math.PI / 180\n\nfunction mod(x, m) {\n    return (x % m + m) % m\n}\n\nfunction clamp(val, min, max) {\n    return Math.min(Math.max(val, min), max)\n}\n\nfunction distance(p0, p1) {\n    return Math.sqrt(Math.pow(p1.x - p0.x, 2) + Math.pow(p1.y - p0.y, 2))\n}\n\nfunction angle(v0, v1) {\n    let p = v0.x * v1.x + v0.y * v1.y\n    let n = Math.sqrt((Math.pow(v0.x, 2) + Math.pow(v0.y, 2)) * (Math.pow(v1.x, 2) + Math.pow(v1.y, 2)))\n    return (v0.x * v1.y - v0.y * v1.x < 0 ? -1 : 1) * Math.acos(p / n)\n}\n\n// Abstract class\nclass TraceBase {\n    constructor(settings) {\n        // Set defaults properties\n        this.path          = []   // Points collection [x,y, x,y, ...]\n        this.linear        = true // Linear trace mode\n        this.step          = 0.01 // Step resolution if linear mode = false\n        this.resolution    = 500  // Number of segments we use to approximate arc length\n        this.segmentLength = 0.1  // Segment length\n\n        // Update properties from user settings\n        Object.assign(this, settings || {})\n\n        // Arc length properties\n        this.arcLength    = null\n        this.arcLengthMap = null\n    }\n\n    _clearPath() {\n        this.path = []\n    }\n\n    getPath() {\n        return this.path\n    }\n\n    getPointAtT(t) {\n        return new Point(0, 0)\n    }\n\n    _addPoint(point) {\n        this.path.push(point.x, point.y)\n    }\n\n    _postTrace() {\n        // Do additional tasks\n    }\n\n    _approximateLength() {\n        let arcLength    = 0\n        let arcLengthMap = []\n        let prevPoint    = this.getPointAtT(0)\n\n        let i, t, nextPoint\n\n        for(i = 0; i < this.resolution; i++) {\n            t          = clamp(i * (1 / this.resolution), 0, 1)\n            nextPoint  = this.getPointAtT(t)\n            arcLength += distance(prevPoint, nextPoint)\n\n            arcLengthMap.push({ t: t, arcLength: arcLength })\n\n            prevPoint = nextPoint\n        }\n\n        // Last stretch to the endpoint\n        nextPoint  = this.getPointAtT(1)\n        arcLength += distance(prevPoint, nextPoint)\n\n        arcLengthMap.push({ t: 1, arcLength: arcLength })\n        Object.assign(this, { arcLength, arcLengthMap })\n    }\n\n    getPointAtU(u) {\n        u = clamp(u, 0, 1)\n\n        let targetDistanceFromStartingPoint = u * this.arcLength\n\n        let resultantT    = 0\n        let prevArcLength = 0\n        let prevT         = 0\n\n        this.arcLengthMap.every(entry => {\n            let t         = entry.t\n            let arcLength = entry.arcLength\n\n            // Once we go a past our target\n            // Lets interpolate from a previous to current\n            if (arcLength >= targetDistanceFromStartingPoint) {\n                let endDiff      = arcLength - targetDistanceFromStartingPoint\n                let startDiff    = targetDistanceFromStartingPoint - prevArcLength\n                let linearFactor = (startDiff / (endDiff + startDiff)) || 0\n\n                resultantT = prevT + (t - prevT) * linearFactor\n\n                // Break\n                return false\n            }\n\n            prevArcLength = arcLength\n            prevT = t\n\n            return true\n        })\n\n        return this.getPointAtT(resultantT)\n    }\n\n    trace(settings) {\n        // Update properties from user settings\n        Object.assign(this, settings || {})\n\n        // Default getPoint settings\n        let getPoint = 'getPointAtT'\n        let step     = this.step\n\n        // Linear mode ?\n        if (this.linear) {\n            this._approximateLength()\n\n            let segments = Math.round(this.arcLength / this.segmentLength)\n\n            getPoint = 'getPointAtU'\n            step     = 1 / segments\n        }\n\n        // Clear points list\n        this._clearPath()\n\n        // Trace the path\n        for (let t = 0; t <= 1; t += step) {\n            this._addPoint(this[getPoint](t))\n        }\n\n        // Do additional tasks\n        this._postTrace()\n\n        // Return the path\n        return this.getPath()\n    }\n}\n\n// Rewrite from https://github.com/MadLittleMods/svg-curve-lib/blob/master/src/js/svg-curve-lib.js#L84\nclass Arc extends TraceBase {\n    init(settings) {\n        // Update properties from user settings\n        Object.assign(this, settings || {})\n\n        // Get angle in radians\n        this.radians = mod(this.angle, 360) * DEG_TO_RAD\n\n        // If the endpoints are identical, then this is equivalent\n        // to omitting the elliptical arc segment entirely.\n        if(this.p1.x === this.p2.x && this.p1.y === this.p2.y) {\n            return this.path\n        }\n\n        this.rx = Math.abs(this.rx)\n        this.ry = Math.abs(this.ry)\n\n        // If rx = 0 or ry = 0 then this arc is treated as\n        // a straight line segment joining the endpoints.\n        if (this.rx === 0 || this.ry === 0) {\n            this.__addPoint(this.p1)\n            this.__addPoint(this.p2)\n            return this.path\n        }\n\n        // Following \"Conversion from endpoint to center parameterization\"\n        // http://www.w3.org/TR/SVG/implnote.html#ArcConversionEndpointToCenter\n\n        // Step #1: Compute transformedPoint\n        let dx = (this.p1.x - this.p2.x) / 2\n        let dy = (this.p1.y - this.p2.y) / 2\n\n        let transformedPoint = {\n            x:  Math.cos(this.radians) * dx + Math.sin(this.radians) * dy,\n            y: -Math.sin(this.radians) * dx + Math.cos(this.radians) * dy\n        }\n\n        // Ensure radii are large enough\n        let radiiCheck = Math.pow(transformedPoint.x, 2) / Math.pow(this.rx, 2) + Math.pow(transformedPoint.y, 2) / Math.pow(this.ry, 2)\n\n        if (radiiCheck > 1) {\n            this.rx = Math.sqrt(radiiCheck) * this.rx\n            this.ry = Math.sqrt(radiiCheck) * this.ry\n        }\n\n        // Step #2: Compute transformedCenter\n        let cSquareNumerator = Math.pow(this.rx, 2) * Math.pow(this.ry, 2) - Math.pow(this.rx, 2) * Math.pow(transformedPoint.y, 2) - Math.pow(this.ry, 2) * Math.pow(transformedPoint.x, 2)\n        let cSquareRootDenom = Math.pow(this.rx, 2) * Math.pow(transformedPoint.y, 2) + Math.pow(this.ry, 2) * Math.pow(transformedPoint.x, 2)\n        let cRadicand        = cSquareNumerator / cSquareRootDenom\n\n        // Make sure this never drops below zero because of precision\n        cRadicand = cRadicand < 0 ? 0 : cRadicand\n        let cCoef = (this.large !== this.sweep ? 1 : -1) * Math.sqrt(cRadicand)\n        let transformedCenter = {\n            x: cCoef * ( (this.rx * transformedPoint.y) / this.ry),\n            y: cCoef * (-(this.ry * transformedPoint.x) / this.rx)\n        }\n\n        // Step #3: Compute center\n        this.center = {\n            x: Math.cos(this.radians) * transformedCenter.x - Math.sin(this.radians) * transformedCenter.y + ((this.p1.x + this.p2.x) / 2),\n            y: Math.sin(this.radians) * transformedCenter.x + Math.cos(this.radians) * transformedCenter.y + ((this.p1.y + this.p2.y) / 2)\n        }\n\n        // Step #4: Compute start/sweep angles\n        // Start angle of the elliptical arc prior to the stretch and rotate operations.\n        // Difference between the start and end angles\n        let startVector = {\n            x: (transformedPoint.x - transformedCenter.x) / this.rx,\n            y: (transformedPoint.y - transformedCenter.y) / this.ry\n        }\n\n        let endVector = {\n            x: (-transformedPoint.x - transformedCenter.x) / this.rx,\n            y: (-transformedPoint.y - transformedCenter.y) / this.ry\n        }\n\n        this.startAngle = angle({ x: 1, y: 0 }, startVector)\n        this.sweepAngle = angle(startVector, endVector)\n\n        if (! this.sweep && this.sweepAngle > 0) {\n            this.sweepAngle -= MATH_PI_2\n        }\n\n        else if (this.sweep && this.sweepAngle < 0) {\n            this.sweepAngle += MATH_PI_2\n        }\n\n        // We use % instead of `mod(..)` because we want it to be -360deg to 360deg(but actually in radians)\n        this.sweepAngle %= MATH_PI_2\n    }\n\n    trace(settings) {\n        this.init(settings)\n        return super.trace()\n    }\n\n    getPointAtT(t) {\n        let angle = this.startAngle + (this.sweepAngle * t)\n\n        let x = this.rx * Math.cos(angle)\n        let y = this.ry * Math.sin(angle)\n\n        return new Point(\n            Math.cos(this.radians) * x - Math.sin(this.radians) * y + this.center.x,\n            Math.sin(this.radians) * x + Math.cos(this.radians) * y + this.center.y\n        )\n    }\n\n    _postTrace() {\n        // Add last point in the path\n        this._addPoint(this.p2)\n    }\n}\n\nclass CubicBezier extends TraceBase {\n    _B1(t) { return t*t*t }\n    _B2(t) { return 3*t*t*(1-t) }\n    _B3(t) { return 3*t*(1-t)*(1-t) }\n    _B4(t) { return (1-t)*(1-t)*(1-t) }\n\n    _C1(p1, p2, p3, p4, t) {\n        return p1*this._B1(t) + p2*this._B2(t) + p3*this._B3(t) + p4*this._B4(t)\n    }\n\n    getPointAtT(t) {\n        return new Point(\n            this._C1(this.p1.x, this.p2.x, this.p3.x, this.p4.x, t),\n            this._C1(this.p1.y, this.p2.y, this.p3.y, this.p4.y, t)\n        )\n    }\n\n    _addPoint(point) {\n        this.path.unshift(point.x, point.y)\n    }\n}\n\nclass QuadricBezier extends TraceBase {\n    _B1(t) { return t*t }\n    _B2(t) { return 2*t*(1-t) }\n    _B3(t) { return (1-t)*(1-t) }\n\n    _C1(p1, p2, p3, t) {\n        return p1*this._B1(t) + p2*this._B2(t) + p3*this._B3(t)\n    }\n\n    getPointAtT(t) {\n        return new Point(\n            this._C1(this.p1.x, this.p2.x, this.p3.x, t),\n            this._C1(this.p1.y, this.p2.y, this.p3.y, t)\n        )\n    }\n\n    _addPoint(point) {\n        this.path.unshift(point.x, point.y)\n    }\n}\n\n// Exports\nexport { Arc, CubicBezier, QuadricBezier }\n\n\n\n// WEBPACK FOOTER //\n// ./trace.js","// rev 482\n/********************************************************************************\n *                                                                              *\n * Author    :  Angus Johnson                                                   *\n * Version   :  6.2.1                                                          *\n * Date      :  31 October 2014                                                 *\n * Website   :  http://www.angusj.com                                           *\n * Copyright :  Angus Johnson 2010-2014                                         *\n *                                                                              *\n * License:                                                                     *\n * Use, modification & distribution is subject to Boost Software License Ver 1. *\n * http://www.boost.org/LICENSE_1_0.txt                                         *\n *                                                                              *\n * Attributions:                                                                *\n * The code in this library is an extension of Bala Vatti's clipping algorithm: *\n * \"A generic solution to polygon clipping\"                                     *\n * Communications of the ACM, Vol 35, Issue 7 (July 1992) pp 56-63.             *\n * http://portal.acm.org/citation.cfm?id=129906                                 *\n *                                                                              *\n * Computer graphics and geometric modeling: implementation and algorithms      *\n * By Max K. Agoston                                                            *\n * Springer; 1 edition (January 4, 2005)                                        *\n * http://books.google.com/books?q=vatti+clipping+agoston                       *\n *                                                                              *\n * See also:                                                                    *\n * \"Polygon Offsetting by Computing Winding Numbers\"                            *\n * Paper no. DETC2005-85513 pp. 565-575                                         *\n * ASME 2005 International Design Engineering Technical Conferences             *\n * and Computers and Information in Engineering Conference (IDETC/CIE2005)      *\n * September 24-28, 2005 , Long Beach, California, USA                          *\n * http://www.me.berkeley.edu/~mcmains/pubs/DAC05OffsetPolygon.pdf              *\n *                                                                              *\n *******************************************************************************/\n/*******************************************************************************\n *                                                                              *\n * Author    :  Timo                                                            *\n * Version   :  6.2.1.0                                                         *\n * Date      :  17 June 2016                                                 *\n *                                                                              *\n * This is a translation of the C# Clipper library to Javascript.               *\n * Int128 struct of C# is implemented using JSBN of Tom Wu.                     *\n * Because Javascript lacks support for 64-bit integers, the space              *\n * is a little more restricted than in C# version.                              *\n *                                                                              *\n * C# version has support for coordinate space:                                 *\n * +-4611686018427387903 ( sqrt(2^127 -1)/2 )                                   *\n * while Javascript version has support for space:                              *\n * +-4503599627370495 ( sqrt(2^106 -1)/2 )                                      *\n *                                                                              *\n * Tom Wu's JSBN proved to be the fastest big integer library:                  *\n * http://jsperf.com/big-integer-library-test                                   *\n *                                                                              *\n * This class can be made simpler when (if ever) 64-bit integer support comes.  *\n *                                                                              *\n *******************************************************************************/\n/*******************************************************************************\n *                                                                              *\n * Basic JavaScript BN library - subset useful for RSA encryption.              *\n * http://www-cs-students.stanford.edu/~tjw/jsbn/                               *\n * Copyright (c) 2005  Tom Wu                                                   *\n * All Rights Reserved.                                                         *\n * See \"LICENSE\" for details:                                                   *\n * http://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE                        *\n *                                                                              *\n *******************************************************************************/\n(function ()\n{\n  \"use strict\";\n  //use_int32: When enabled 32bit ints are used instead of 64bit ints. This\n  //improve performance but coordinate values are limited to the range +/- 46340\n  var use_int32 = false;\n  //use_xyz: adds a Z member to IntPoint. Adds a minor cost to performance.\n  var use_xyz = false;\n  //UseLines: Enables open path clipping. Adds a very minor cost to performance.\n  var use_lines = true;\n\n  var ClipperLib = {};\n  var isNode = false;\n  if (typeof module !== 'undefined' && module.exports)\n  {\n    module.exports = ClipperLib;\n    isNode = true;\n  }\n  else\n  {\n    if (typeof define === 'function' && define.amd) {\n      define(ClipperLib);\n    }\n    if (typeof (document) !== \"undefined\") window.ClipperLib = ClipperLib;\n    else self['ClipperLib'] = ClipperLib;\n  }\n  var navigator_appName;\n  if (!isNode)\n  {\n    var nav = navigator.userAgent.toString().toLowerCase();\n    navigator_appName = navigator.appName;\n  }\n  else\n  {\n    var nav = \"chrome\"; // Node.js uses Chrome's V8 engine\n    navigator_appName = \"Netscape\"; // Firefox, Chrome and Safari returns \"Netscape\", so Node.js should also\n  }\n  // Browser test to speedup performance critical functions\n  var browser = {};\n  if (nav.indexOf(\"chrome\") != -1 && nav.indexOf(\"chromium\") == -1) browser.chrome = 1;\n  else browser.chrome = 0;\n  if (nav.indexOf(\"chromium\") != -1) browser.chromium = 1;\n  else browser.chromium = 0;\n  if (nav.indexOf(\"safari\") != -1 && nav.indexOf(\"chrome\") == -1 && nav.indexOf(\"chromium\") == -1) browser.safari = 1;\n  else browser.safari = 0;\n  if (nav.indexOf(\"firefox\") != -1) browser.firefox = 1;\n  else browser.firefox = 0;\n  if (nav.indexOf(\"firefox/17\") != -1) browser.firefox17 = 1;\n  else browser.firefox17 = 0;\n  if (nav.indexOf(\"firefox/15\") != -1) browser.firefox15 = 1;\n  else browser.firefox15 = 0;\n  if (nav.indexOf(\"firefox/3\") != -1) browser.firefox3 = 1;\n  else browser.firefox3 = 0;\n  if (nav.indexOf(\"opera\") != -1) browser.opera = 1;\n  else browser.opera = 0;\n  if (nav.indexOf(\"msie 10\") != -1) browser.msie10 = 1;\n  else browser.msie10 = 0;\n  if (nav.indexOf(\"msie 9\") != -1) browser.msie9 = 1;\n  else browser.msie9 = 0;\n  if (nav.indexOf(\"msie 8\") != -1) browser.msie8 = 1;\n  else browser.msie8 = 0;\n  if (nav.indexOf(\"msie 7\") != -1) browser.msie7 = 1;\n  else browser.msie7 = 0;\n  if (nav.indexOf(\"msie \") != -1) browser.msie = 1;\n  else browser.msie = 0;\n  ClipperLib.biginteger_used = null;\n\n  // Copyright (c) 2005  Tom Wu\n  // All Rights Reserved.\n  // See \"LICENSE\" for details.\n  // Basic JavaScript BN library - subset useful for RSA encryption.\n  // Bits per digit\n  var dbits;\n  // JavaScript engine analysis\n  var canary = 0xdeadbeefcafe;\n  var j_lm = ((canary & 0xffffff) == 0xefcafe);\n  // (public) Constructor\n  function BigInteger(a, b, c)\n  {\n    // This test variable can be removed,\n    // but at least for performance tests it is useful piece of knowledge\n    // This is the only ClipperLib related variable in BigInteger library\n    ClipperLib.biginteger_used = 1;\n    if (a != null)\n      if (\"number\" == typeof a && \"undefined\" == typeof (b)) this.fromInt(a); // faster conversion\n      else if (\"number\" == typeof a) this.fromNumber(a, b, c);\n    else if (b == null && \"string\" != typeof a) this.fromString(a, 256);\n    else this.fromString(a, b);\n  }\n  // return new, unset BigInteger\n  function nbi()\n  {\n    return new BigInteger(null,undefined,undefined);\n  }\n  // am: Compute w_j += (x*this_i), propagate carries,\n  // c is initial carry, returns final carry.\n  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n  // We need to select the fastest one that works in this environment.\n  // am1: use a single mult and divide to get the high bits,\n  // max digit bits should be 26 because\n  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n  function am1(i, x, w, j, c, n)\n  {\n    while (--n >= 0)\n    {\n      var v = x * this[i++] + w[j] + c;\n      c = Math.floor(v / 0x4000000);\n      w[j++] = v & 0x3ffffff;\n    }\n    return c;\n  }\n  // am2 avoids a big mult-and-extract completely.\n  // Max digit bits should be <= 30 because we do bitwise ops\n  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n  function am2(i, x, w, j, c, n)\n  {\n    var xl = x & 0x7fff,\n      xh = x >> 15;\n    while (--n >= 0)\n    {\n      var l = this[i] & 0x7fff;\n      var h = this[i++] >> 15;\n      var m = xh * l + h * xl;\n      l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n      c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n      w[j++] = l & 0x3fffffff;\n    }\n    return c;\n  }\n  // Alternately, set max digit bits to 28 since some\n  // browsers slow down when dealing with 32-bit numbers.\n  function am3(i, x, w, j, c, n)\n  {\n    var xl = x & 0x3fff,\n      xh = x >> 14;\n    while (--n >= 0)\n    {\n      var l = this[i] & 0x3fff;\n      var h = this[i++] >> 14;\n      var m = xh * l + h * xl;\n      l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n      c = (l >> 28) + (m >> 14) + xh * h;\n      w[j++] = l & 0xfffffff;\n    }\n    return c;\n  }\n  if (j_lm && (navigator_appName == \"Microsoft Internet Explorer\"))\n  {\n    BigInteger.prototype.am = am2;\n    dbits = 30;\n  }\n  else if (j_lm && (navigator_appName != \"Netscape\"))\n  {\n    BigInteger.prototype.am = am1;\n    dbits = 26;\n  }\n  else\n  { // Mozilla/Netscape seems to prefer am3\n    BigInteger.prototype.am = am3;\n    dbits = 28;\n  }\n  BigInteger.prototype.DB = dbits;\n  BigInteger.prototype.DM = ((1 << dbits) - 1);\n  BigInteger.prototype.DV = (1 << dbits);\n  var BI_FP = 52;\n  BigInteger.prototype.FV = Math.pow(2, BI_FP);\n  BigInteger.prototype.F1 = BI_FP - dbits;\n  BigInteger.prototype.F2 = 2 * dbits - BI_FP;\n  // Digit conversions\n  var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n  var BI_RC = new Array();\n  var rr, vv;\n  rr = \"0\".charCodeAt(0);\n  for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\n  rr = \"a\".charCodeAt(0);\n  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n  rr = \"A\".charCodeAt(0);\n  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\n  function int2char(n)\n  {\n    return BI_RM.charAt(n);\n  }\n\n  function intAt(s, i)\n  {\n    var c = BI_RC[s.charCodeAt(i)];\n    return (c == null) ? -1 : c;\n  }\n  // (protected) copy this to r\n  function bnpCopyTo(r)\n  {\n    for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];\n    r.t = this.t;\n    r.s = this.s;\n  }\n  // (protected) set from integer value x, -DV <= x < DV\n  function bnpFromInt(x)\n  {\n    this.t = 1;\n    this.s = (x < 0) ? -1 : 0;\n    if (x > 0) this[0] = x;\n    else if (x < -1) this[0] = x + this.DV;\n    else this.t = 0;\n  }\n  // return bigint initialized to value\n  function nbv(i)\n  {\n    var r = nbi();\n    r.fromInt(i);\n    return r;\n  }\n  // (protected) set from string and radix\n  function bnpFromString(s, b)\n  {\n    var k;\n    if (b == 16) k = 4;\n    else if (b == 8) k = 3;\n    else if (b == 256) k = 8; // byte array\n    else if (b == 2) k = 1;\n    else if (b == 32) k = 5;\n    else if (b == 4) k = 2;\n    else\n    {\n      this.fromRadix(s, b);\n      return;\n    }\n    this.t = 0;\n    this.s = 0;\n    var i = s.length,\n      mi = false,\n      sh = 0;\n    while (--i >= 0)\n    {\n      var x = (k == 8) ? s[i] & 0xff : intAt(s, i);\n      if (x < 0)\n      {\n        if (s.charAt(i) == \"-\") mi = true;\n        continue;\n      }\n      mi = false;\n      if (sh == 0)\n        this[this.t++] = x;\n      else if (sh + k > this.DB)\n      {\n        this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\n        this[this.t++] = (x >> (this.DB - sh));\n      }\n      else\n        this[this.t - 1] |= x << sh;\n      sh += k;\n      if (sh >= this.DB) sh -= this.DB;\n    }\n    if (k == 8 && (s[0] & 0x80) != 0)\n    {\n      this.s = -1;\n      if (sh > 0) this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;\n    }\n    this.clamp();\n    if (mi) BigInteger.ZERO.subTo(this, this);\n  }\n  // (protected) clamp off excess high words\n  function bnpClamp()\n  {\n    var c = this.s & this.DM;\n    while (this.t > 0 && this[this.t - 1] == c)--this.t;\n  }\n  // (public) return string representation in given radix\n  function bnToString(b)\n  {\n    if (this.s < 0) return \"-\" + this.negate().toString(b);\n    var k;\n    if (b == 16) k = 4;\n    else if (b == 8) k = 3;\n    else if (b == 2) k = 1;\n    else if (b == 32) k = 5;\n    else if (b == 4) k = 2;\n    else return this.toRadix(b);\n    var km = (1 << k) - 1,\n      d, m = false,\n      r = \"\",\n      i = this.t;\n    var p = this.DB - (i * this.DB) % k;\n    if (i-- > 0)\n    {\n      if (p < this.DB && (d = this[i] >> p) > 0)\n      {\n        m = true;\n        r = int2char(d);\n      }\n      while (i >= 0)\n      {\n        if (p < k)\n        {\n          d = (this[i] & ((1 << p) - 1)) << (k - p);\n          d |= this[--i] >> (p += this.DB - k);\n        }\n        else\n        {\n          d = (this[i] >> (p -= k)) & km;\n          if (p <= 0)\n          {\n            p += this.DB;\n            --i;\n          }\n        }\n        if (d > 0) m = true;\n        if (m) r += int2char(d);\n      }\n    }\n    return m ? r : \"0\";\n  }\n  // (public) -this\n  function bnNegate()\n  {\n    var r = nbi();\n    BigInteger.ZERO.subTo(this, r);\n    return r;\n  }\n  // (public) |this|\n  function bnAbs()\n  {\n    return (this.s < 0) ? this.negate() : this;\n  }\n  // (public) return + if this > a, - if this < a, 0 if equal\n  function bnCompareTo(a)\n  {\n    var r = this.s - a.s;\n    if (r != 0) return r;\n    var i = this.t;\n    r = i - a.t;\n    if (r != 0) return (this.s < 0) ? -r : r;\n    while (--i >= 0)\n      if ((r = this[i] - a[i]) != 0) return r;\n    return 0;\n  }\n  // returns bit length of the integer x\n  function nbits(x)\n  {\n    var r = 1,\n      t;\n    if ((t = x >>> 16) != 0)\n    {\n      x = t;\n      r += 16;\n    }\n    if ((t = x >> 8) != 0)\n    {\n      x = t;\n      r += 8;\n    }\n    if ((t = x >> 4) != 0)\n    {\n      x = t;\n      r += 4;\n    }\n    if ((t = x >> 2) != 0)\n    {\n      x = t;\n      r += 2;\n    }\n    if ((t = x >> 1) != 0)\n    {\n      x = t;\n      r += 1;\n    }\n    return r;\n  }\n  // (public) return the number of bits in \"this\"\n  function bnBitLength()\n  {\n    if (this.t <= 0) return 0;\n    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\n  }\n  // (protected) r = this << n*DB\n  function bnpDLShiftTo(n, r)\n  {\n    var i;\n    for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];\n    for (i = n - 1; i >= 0; --i) r[i] = 0;\n    r.t = this.t + n;\n    r.s = this.s;\n  }\n  // (protected) r = this >> n*DB\n  function bnpDRShiftTo(n, r)\n  {\n    for (var i = n; i < this.t; ++i) r[i - n] = this[i];\n    r.t = Math.max(this.t - n, 0);\n    r.s = this.s;\n  }\n  // (protected) r = this << n\n  function bnpLShiftTo(n, r)\n  {\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << cbs) - 1;\n    var ds = Math.floor(n / this.DB),\n      c = (this.s << bs) & this.DM,\n      i;\n    for (i = this.t - 1; i >= 0; --i)\n    {\n      r[i + ds + 1] = (this[i] >> cbs) | c;\n      c = (this[i] & bm) << bs;\n    }\n    for (i = ds - 1; i >= 0; --i) r[i] = 0;\n    r[ds] = c;\n    r.t = this.t + ds + 1;\n    r.s = this.s;\n    r.clamp();\n  }\n  // (protected) r = this >> n\n  function bnpRShiftTo(n, r)\n  {\n    r.s = this.s;\n    var ds = Math.floor(n / this.DB);\n    if (ds >= this.t)\n    {\n      r.t = 0;\n      return;\n    }\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << bs) - 1;\n    r[0] = this[ds] >> bs;\n    for (var i = ds + 1; i < this.t; ++i)\n    {\n      r[i - ds - 1] |= (this[i] & bm) << cbs;\n      r[i - ds] = this[i] >> bs;\n    }\n    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n    r.t = this.t - ds;\n    r.clamp();\n  }\n  // (protected) r = this - a\n  function bnpSubTo(a, r)\n  {\n    var i = 0,\n      c = 0,\n      m = Math.min(a.t, this.t);\n    while (i < m)\n    {\n      c += this[i] - a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    if (a.t < this.t)\n    {\n      c -= a.s;\n      while (i < this.t)\n      {\n        c += this[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n      c += this.s;\n    }\n    else\n    {\n      c += this.s;\n      while (i < a.t)\n      {\n        c -= a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n      c -= a.s;\n    }\n    r.s = (c < 0) ? -1 : 0;\n    if (c < -1) r[i++] = this.DV + c;\n    else if (c > 0) r[i++] = c;\n    r.t = i;\n    r.clamp();\n  }\n  // (protected) r = this * a, r != this,a (HAC 14.12)\n  // \"this\" should be the larger one if appropriate.\n  function bnpMultiplyTo(a, r)\n  {\n    var x = this.abs(),\n      y = a.abs();\n    var i = x.t;\n    r.t = i + y.t;\n    while (--i >= 0) r[i] = 0;\n    for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n    r.s = 0;\n    r.clamp();\n    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n  }\n  // (protected) r = this^2, r != this (HAC 14.16)\n  function bnpSquareTo(r)\n  {\n    var x = this.abs();\n    var i = r.t = 2 * x.t;\n    while (--i >= 0) r[i] = 0;\n    for (i = 0; i < x.t - 1; ++i)\n    {\n      var c = x.am(i, x[i], r, 2 * i, 0, 1);\n      if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV)\n      {\n        r[i + x.t] -= x.DV;\n        r[i + x.t + 1] = 1;\n      }\n    }\n    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n    r.s = 0;\n    r.clamp();\n  }\n  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n  // r != q, this != m.  q or r may be null.\n  function bnpDivRemTo(m, q, r)\n  {\n    var pm = m.abs();\n    if (pm.t <= 0) return;\n    var pt = this.abs();\n    if (pt.t < pm.t)\n    {\n      if (q != null) q.fromInt(0);\n      if (r != null) this.copyTo(r);\n      return;\n    }\n    if (r == null) r = nbi();\n    var y = nbi(),\n      ts = this.s,\n      ms = m.s;\n    var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n    if (nsh > 0)\n    {\n      pm.lShiftTo(nsh, y);\n      pt.lShiftTo(nsh, r);\n    }\n    else\n    {\n      pm.copyTo(y);\n      pt.copyTo(r);\n    }\n    var ys = y.t;\n    var y0 = y[ys - 1];\n    if (y0 == 0) return;\n    var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);\n    var d1 = this.FV / yt,\n      d2 = (1 << this.F1) / yt,\n      e = 1 << this.F2;\n    var i = r.t,\n      j = i - ys,\n      t = (q == null) ? nbi() : q;\n    y.dlShiftTo(j, t);\n    if (r.compareTo(t) >= 0)\n    {\n      r[r.t++] = 1;\n      r.subTo(t, r);\n    }\n    BigInteger.ONE.dlShiftTo(ys, t);\n    t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n    while (y.t < ys) y[y.t++] = 0;\n    while (--j >= 0)\n    {\n      // Estimate quotient digit\n      var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n      if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd)\n      { // Try it out\n        y.dlShiftTo(j, t);\n        r.subTo(t, r);\n        while (r[i] < --qd) r.subTo(t, r);\n      }\n    }\n    if (q != null)\n    {\n      r.drShiftTo(ys, q);\n      if (ts != ms) BigInteger.ZERO.subTo(q, q);\n    }\n    r.t = ys;\n    r.clamp();\n    if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n    if (ts < 0) BigInteger.ZERO.subTo(r, r);\n  }\n  // (public) this mod a\n  function bnMod(a)\n  {\n    var r = nbi();\n    this.abs().divRemTo(a, null, r);\n    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n    return r;\n  }\n  // Modular reduction using \"classic\" algorithm\n  function Classic(m)\n  {\n    this.m = m;\n  }\n\n  function cConvert(x)\n  {\n    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n    else return x;\n  }\n\n  function cRevert(x)\n  {\n    return x;\n  }\n\n  function cReduce(x)\n  {\n    x.divRemTo(this.m, null, x);\n  }\n\n  function cMulTo(x, y, r)\n  {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n  }\n\n  function cSqrTo(x, r)\n  {\n    x.squareTo(r);\n    this.reduce(r);\n  }\n  Classic.prototype.convert = cConvert;\n  Classic.prototype.revert = cRevert;\n  Classic.prototype.reduce = cReduce;\n  Classic.prototype.mulTo = cMulTo;\n  Classic.prototype.sqrTo = cSqrTo;\n  // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n  // justification:\n  //         xy == 1 (mod m)\n  //         xy =  1+km\n  //   xy(2-xy) = (1+km)(1-km)\n  // x[y(2-xy)] = 1-k^2m^2\n  // x[y(2-xy)] == 1 (mod m^2)\n  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n  // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n  function bnpInvDigit()\n  {\n    if (this.t < 1) return 0;\n    var x = this[0];\n    if ((x & 1) == 0) return 0;\n    var y = x & 3; // y == 1/x mod 2^2\n    y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4\n    y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8\n    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16\n    // last step - calculate inverse mod DV directly;\n    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n    y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits\n    // we really want the negative inverse, and -DV < y < DV\n    return (y > 0) ? this.DV - y : -y;\n  }\n  // Montgomery reduction\n  function Montgomery(m)\n  {\n    this.m = m;\n    this.mp = m.invDigit();\n    this.mpl = this.mp & 0x7fff;\n    this.mph = this.mp >> 15;\n    this.um = (1 << (m.DB - 15)) - 1;\n    this.mt2 = 2 * m.t;\n  }\n  // xR mod m\n  function montConvert(x)\n  {\n    var r = nbi();\n    x.abs().dlShiftTo(this.m.t, r);\n    r.divRemTo(this.m, null, r);\n    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n    return r;\n  }\n  // x/R mod m\n  function montRevert(x)\n  {\n    var r = nbi();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n  }\n  // x = x/R mod m (HAC 14.32)\n  function montReduce(x)\n  {\n    while (x.t <= this.mt2) // pad x so am has enough room later\n      x[x.t++] = 0;\n    for (var i = 0; i < this.m.t; ++i)\n    {\n      // faster way of calculating u0 = x[i]*mp mod DV\n      var j = x[i] & 0x7fff;\n      var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;\n      // use am to combine the multiply-shift-add into one call\n      j = i + this.m.t;\n      x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n      // propagate carry\n      while (x[j] >= x.DV)\n      {\n        x[j] -= x.DV;\n        x[++j]++;\n      }\n    }\n    x.clamp();\n    x.drShiftTo(this.m.t, x);\n    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n  }\n  // r = \"x^2/R mod m\"; x != r\n  function montSqrTo(x, r)\n  {\n    x.squareTo(r);\n    this.reduce(r);\n  }\n  // r = \"xy/R mod m\"; x,y != r\n  function montMulTo(x, y, r)\n  {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n  }\n  Montgomery.prototype.convert = montConvert;\n  Montgomery.prototype.revert = montRevert;\n  Montgomery.prototype.reduce = montReduce;\n  Montgomery.prototype.mulTo = montMulTo;\n  Montgomery.prototype.sqrTo = montSqrTo;\n  // (protected) true iff this is even\n  function bnpIsEven()\n  {\n    return ((this.t > 0) ? (this[0] & 1) : this.s) == 0;\n  }\n  // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n  function bnpExp(e, z)\n  {\n    if (e > 0xffffffff || e < 1) return BigInteger.ONE;\n    var r = nbi(),\n      r2 = nbi(),\n      g = z.convert(this),\n      i = nbits(e) - 1;\n    g.copyTo(r);\n    while (--i >= 0)\n    {\n      z.sqrTo(r, r2);\n      if ((e & (1 << i)) > 0) z.mulTo(r2, g, r);\n      else\n      {\n        var t = r;\n        r = r2;\n        r2 = t;\n      }\n    }\n    return z.revert(r);\n  }\n  // (public) this^e % m, 0 <= e < 2^32\n  function bnModPowInt(e, m)\n  {\n    var z;\n    if (e < 256 || m.isEven()) z = new Classic(m);\n    else z = new Montgomery(m);\n    return this.exp(e, z);\n  }\n  // protected\n  BigInteger.prototype.copyTo = bnpCopyTo;\n  BigInteger.prototype.fromInt = bnpFromInt;\n  BigInteger.prototype.fromString = bnpFromString;\n  BigInteger.prototype.clamp = bnpClamp;\n  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n  BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n  BigInteger.prototype.lShiftTo = bnpLShiftTo;\n  BigInteger.prototype.rShiftTo = bnpRShiftTo;\n  BigInteger.prototype.subTo = bnpSubTo;\n  BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n  BigInteger.prototype.squareTo = bnpSquareTo;\n  BigInteger.prototype.divRemTo = bnpDivRemTo;\n  BigInteger.prototype.invDigit = bnpInvDigit;\n  BigInteger.prototype.isEven = bnpIsEven;\n  BigInteger.prototype.exp = bnpExp;\n  // public\n  BigInteger.prototype.toString = bnToString;\n  BigInteger.prototype.negate = bnNegate;\n  BigInteger.prototype.abs = bnAbs;\n  BigInteger.prototype.compareTo = bnCompareTo;\n  BigInteger.prototype.bitLength = bnBitLength;\n  BigInteger.prototype.mod = bnMod;\n  BigInteger.prototype.modPowInt = bnModPowInt;\n  // \"constants\"\n  BigInteger.ZERO = nbv(0);\n  BigInteger.ONE = nbv(1);\n  // Copyright (c) 2005-2009  Tom Wu\n  // All Rights Reserved.\n  // See \"LICENSE\" for details.\n  // Extended JavaScript BN functions, required for RSA private ops.\n  // Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n  // Version 1.2: square() API, isProbablePrime fix\n  // (public)\n  function bnClone()\n  {\n    var r = nbi();\n    this.copyTo(r);\n    return r;\n  }\n  // (public) return value as integer\n  function bnIntValue()\n  {\n    if (this.s < 0)\n    {\n      if (this.t == 1) return this[0] - this.DV;\n      else if (this.t == 0) return -1;\n    }\n    else if (this.t == 1) return this[0];\n    else if (this.t == 0) return 0;\n    // assumes 16 < DB < 32\n    return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];\n  }\n  // (public) return value as byte\n  function bnByteValue()\n  {\n    return (this.t == 0) ? this.s : (this[0] << 24) >> 24;\n  }\n  // (public) return value as short (assumes DB>=16)\n  function bnShortValue()\n  {\n    return (this.t == 0) ? this.s : (this[0] << 16) >> 16;\n  }\n  // (protected) return x s.t. r^x < DV\n  function bnpChunkSize(r)\n  {\n    return Math.floor(Math.LN2 * this.DB / Math.log(r));\n  }\n  // (public) 0 if this == 0, 1 if this > 0\n  function bnSigNum()\n  {\n    if (this.s < 0) return -1;\n    else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n    else return 1;\n  }\n  // (protected) convert to radix string\n  function bnpToRadix(b)\n  {\n    if (b == null) b = 10;\n    if (this.signum() == 0 || b < 2 || b > 36) return \"0\";\n    var cs = this.chunkSize(b);\n    var a = Math.pow(b, cs);\n    var d = nbv(a),\n      y = nbi(),\n      z = nbi(),\n      r = \"\";\n    this.divRemTo(d, y, z);\n    while (y.signum() > 0)\n    {\n      r = (a + z.intValue()).toString(b).substr(1) + r;\n      y.divRemTo(d, y, z);\n    }\n    return z.intValue().toString(b) + r;\n  }\n  // (protected) convert from radix string\n  function bnpFromRadix(s, b)\n  {\n    this.fromInt(0);\n    if (b == null) b = 10;\n    var cs = this.chunkSize(b);\n    var d = Math.pow(b, cs),\n      mi = false,\n      j = 0,\n      w = 0;\n    for (var i = 0; i < s.length; ++i)\n    {\n      var x = intAt(s, i);\n      if (x < 0)\n      {\n        if (s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n        continue;\n      }\n      w = b * w + x;\n      if (++j >= cs)\n      {\n        this.dMultiply(d);\n        this.dAddOffset(w, 0);\n        j = 0;\n        w = 0;\n      }\n    }\n    if (j > 0)\n    {\n      this.dMultiply(Math.pow(b, j));\n      this.dAddOffset(w, 0);\n    }\n    if (mi) BigInteger.ZERO.subTo(this, this);\n  }\n  // (protected) alternate constructor\n  function bnpFromNumber(a, b, c)\n  {\n    if (\"number\" == typeof b)\n    {\n      // new BigInteger(int,int,RNG)\n      if (a < 2) this.fromInt(1);\n      else\n      {\n        this.fromNumber(a, c);\n        if (!this.testBit(a - 1)) // force MSB set\n          this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n        if (this.isEven()) this.dAddOffset(1, 0); // force odd\n        while (!this.isProbablePrime(b))\n        {\n          this.dAddOffset(2, 0);\n          if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n        }\n      }\n    }\n    else\n    {\n      // new BigInteger(int,RNG)\n      var x = new Array(),\n        t = a & 7;\n      x.length = (a >> 3) + 1;\n      b.nextBytes(x);\n      if (t > 0) x[0] &= ((1 << t) - 1);\n      else x[0] = 0;\n      this.fromString(x, 256);\n    }\n  }\n  // (public) convert to bigendian byte array\n  function bnToByteArray()\n  {\n    var i = this.t,\n      r = new Array();\n    r[0] = this.s;\n    var p = this.DB - (i * this.DB) % 8,\n      d, k = 0;\n    if (i-- > 0)\n    {\n      if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)\n        r[k++] = d | (this.s << (this.DB - p));\n      while (i >= 0)\n      {\n        if (p < 8)\n        {\n          d = (this[i] & ((1 << p) - 1)) << (8 - p);\n          d |= this[--i] >> (p += this.DB - 8);\n        }\n        else\n        {\n          d = (this[i] >> (p -= 8)) & 0xff;\n          if (p <= 0)\n          {\n            p += this.DB;\n            --i;\n          }\n        }\n        if ((d & 0x80) != 0) d |= -256;\n        if (k == 0 && (this.s & 0x80) != (d & 0x80))++k;\n        if (k > 0 || d != this.s) r[k++] = d;\n      }\n    }\n    return r;\n  }\n\n  function bnEquals(a)\n  {\n    return (this.compareTo(a) == 0);\n  }\n\n  function bnMin(a)\n  {\n    return (this.compareTo(a) < 0) ? this : a;\n  }\n\n  function bnMax(a)\n  {\n    return (this.compareTo(a) > 0) ? this : a;\n  }\n  // (protected) r = this op a (bitwise)\n  function bnpBitwiseTo(a, op, r)\n  {\n    var i, f, m = Math.min(a.t, this.t);\n    for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);\n    if (a.t < this.t)\n    {\n      f = a.s & this.DM;\n      for (i = m; i < this.t; ++i) r[i] = op(this[i], f);\n      r.t = this.t;\n    }\n    else\n    {\n      f = this.s & this.DM;\n      for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);\n      r.t = a.t;\n    }\n    r.s = op(this.s, a.s);\n    r.clamp();\n  }\n  // (public) this & a\n  function op_and(x, y)\n  {\n    return x & y;\n  }\n\n  function bnAnd(a)\n  {\n    var r = nbi();\n    this.bitwiseTo(a, op_and, r);\n    return r;\n  }\n  // (public) this | a\n  function op_or(x, y)\n  {\n    return x | y;\n  }\n\n  function bnOr(a)\n  {\n    var r = nbi();\n    this.bitwiseTo(a, op_or, r);\n    return r;\n  }\n  // (public) this ^ a\n  function op_xor(x, y)\n  {\n    return x ^ y;\n  }\n\n  function bnXor(a)\n  {\n    var r = nbi();\n    this.bitwiseTo(a, op_xor, r);\n    return r;\n  }\n  // (public) this & ~a\n  function op_andnot(x, y)\n  {\n    return x & ~y;\n  }\n\n  function bnAndNot(a)\n  {\n    var r = nbi();\n    this.bitwiseTo(a, op_andnot, r);\n    return r;\n  }\n  // (public) ~this\n  function bnNot()\n  {\n    var r = nbi();\n    for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];\n    r.t = this.t;\n    r.s = ~this.s;\n    return r;\n  }\n  // (public) this << n\n  function bnShiftLeft(n)\n  {\n    var r = nbi();\n    if (n < 0) this.rShiftTo(-n, r);\n    else this.lShiftTo(n, r);\n    return r;\n  }\n  // (public) this >> n\n  function bnShiftRight(n)\n  {\n    var r = nbi();\n    if (n < 0) this.lShiftTo(-n, r);\n    else this.rShiftTo(n, r);\n    return r;\n  }\n  // return index of lowest 1-bit in x, x < 2^31\n  function lbit(x)\n  {\n    if (x == 0) return -1;\n    var r = 0;\n    if ((x & 0xffff) == 0)\n    {\n      x >>= 16;\n      r += 16;\n    }\n    if ((x & 0xff) == 0)\n    {\n      x >>= 8;\n      r += 8;\n    }\n    if ((x & 0xf) == 0)\n    {\n      x >>= 4;\n      r += 4;\n    }\n    if ((x & 3) == 0)\n    {\n      x >>= 2;\n      r += 2;\n    }\n    if ((x & 1) == 0)++r;\n    return r;\n  }\n  // (public) returns index of lowest 1-bit (or -1 if none)\n  function bnGetLowestSetBit()\n  {\n    for (var i = 0; i < this.t; ++i)\n      if (this[i] != 0) return i * this.DB + lbit(this[i]);\n    if (this.s < 0) return this.t * this.DB;\n    return -1;\n  }\n  // return number of 1 bits in x\n  function cbit(x)\n  {\n    var r = 0;\n    while (x != 0)\n    {\n      x &= x - 1;\n      ++r;\n    }\n    return r;\n  }\n  // (public) return number of set bits\n  function bnBitCount()\n  {\n    var r = 0,\n      x = this.s & this.DM;\n    for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);\n    return r;\n  }\n  // (public) true iff nth bit is set\n  function bnTestBit(n)\n  {\n    var j = Math.floor(n / this.DB);\n    if (j >= this.t) return (this.s != 0);\n    return ((this[j] & (1 << (n % this.DB))) != 0);\n  }\n  // (protected) this op (1<<n)\n  function bnpChangeBit(n, op)\n  {\n    var r = BigInteger.ONE.shiftLeft(n);\n    this.bitwiseTo(r, op, r);\n    return r;\n  }\n  // (public) this | (1<<n)\n  function bnSetBit(n)\n  {\n    return this.changeBit(n, op_or);\n  }\n  // (public) this & ~(1<<n)\n  function bnClearBit(n)\n  {\n    return this.changeBit(n, op_andnot);\n  }\n  // (public) this ^ (1<<n)\n  function bnFlipBit(n)\n  {\n    return this.changeBit(n, op_xor);\n  }\n  // (protected) r = this + a\n  function bnpAddTo(a, r)\n  {\n    var i = 0,\n      c = 0,\n      m = Math.min(a.t, this.t);\n    while (i < m)\n    {\n      c += this[i] + a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    if (a.t < this.t)\n    {\n      c += a.s;\n      while (i < this.t)\n      {\n        c += this[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n      c += this.s;\n    }\n    else\n    {\n      c += this.s;\n      while (i < a.t)\n      {\n        c += a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n      c += a.s;\n    }\n    r.s = (c < 0) ? -1 : 0;\n    if (c > 0) r[i++] = c;\n    else if (c < -1) r[i++] = this.DV + c;\n    r.t = i;\n    r.clamp();\n  }\n  // (public) this + a\n  function bnAdd(a)\n  {\n    var r = nbi();\n    this.addTo(a, r);\n    return r;\n  }\n  // (public) this - a\n  function bnSubtract(a)\n  {\n    var r = nbi();\n    this.subTo(a, r);\n    return r;\n  }\n  // (public) this * a\n  function bnMultiply(a)\n  {\n    var r = nbi();\n    this.multiplyTo(a, r);\n    return r;\n  }\n  // (public) this^2\n  function bnSquare()\n  {\n    var r = nbi();\n    this.squareTo(r);\n    return r;\n  }\n  // (public) this / a\n  function bnDivide(a)\n  {\n    var r = nbi();\n    this.divRemTo(a, r, null);\n    return r;\n  }\n  // (public) this % a\n  function bnRemainder(a)\n  {\n    var r = nbi();\n    this.divRemTo(a, null, r);\n    return r;\n  }\n  // (public) [this/a,this%a]\n  function bnDivideAndRemainder(a)\n  {\n    var q = nbi(),\n      r = nbi();\n    this.divRemTo(a, q, r);\n    return new Array(q, r);\n  }\n  // (protected) this *= n, this >= 0, 1 < n < DV\n  function bnpDMultiply(n)\n  {\n    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n    ++this.t;\n    this.clamp();\n  }\n  // (protected) this += n << w words, this >= 0\n  function bnpDAddOffset(n, w)\n  {\n    if (n == 0) return;\n    while (this.t <= w) this[this.t++] = 0;\n    this[w] += n;\n    while (this[w] >= this.DV)\n    {\n      this[w] -= this.DV;\n      if (++w >= this.t) this[this.t++] = 0;\n      ++this[w];\n    }\n  }\n  // A \"null\" reducer\n  function NullExp()\n  {}\n\n  function nNop(x)\n  {\n    return x;\n  }\n\n  function nMulTo(x, y, r)\n  {\n    x.multiplyTo(y, r);\n  }\n\n  function nSqrTo(x, r)\n  {\n    x.squareTo(r);\n  }\n  NullExp.prototype.convert = nNop;\n  NullExp.prototype.revert = nNop;\n  NullExp.prototype.mulTo = nMulTo;\n  NullExp.prototype.sqrTo = nSqrTo;\n  // (public) this^e\n  function bnPow(e)\n  {\n    return this.exp(e, new NullExp());\n  }\n  // (protected) r = lower n words of \"this * a\", a.t <= n\n  // \"this\" should be the larger one if appropriate.\n  function bnpMultiplyLowerTo(a, n, r)\n  {\n    var i = Math.min(this.t + a.t, n);\n    r.s = 0; // assumes a,this >= 0\n    r.t = i;\n    while (i > 0) r[--i] = 0;\n    var j;\n    for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n    for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);\n    r.clamp();\n  }\n  // (protected) r = \"this * a\" without lower n words, n > 0\n  // \"this\" should be the larger one if appropriate.\n  function bnpMultiplyUpperTo(a, n, r)\n  {\n    --n;\n    var i = r.t = this.t + a.t - n;\n    r.s = 0; // assumes a,this >= 0\n    while (--i >= 0) r[i] = 0;\n    for (i = Math.max(n - this.t, 0); i < a.t; ++i)\n      r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n    r.clamp();\n    r.drShiftTo(1, r);\n  }\n  // Barrett modular reduction\n  function Barrett(m)\n  {\n    // setup Barrett\n    this.r2 = nbi();\n    this.q3 = nbi();\n    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n    this.mu = this.r2.divide(m);\n    this.m = m;\n  }\n\n  function barrettConvert(x)\n  {\n    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);\n    else if (x.compareTo(this.m) < 0) return x;\n    else\n    {\n      var r = nbi();\n      x.copyTo(r);\n      this.reduce(r);\n      return r;\n    }\n  }\n\n  function barrettRevert(x)\n  {\n    return x;\n  }\n  // x = x mod m (HAC 14.42)\n  function barrettReduce(x)\n  {\n    x.drShiftTo(this.m.t - 1, this.r2);\n    if (x.t > this.m.t + 1)\n    {\n      x.t = this.m.t + 1;\n      x.clamp();\n    }\n    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n    while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);\n    x.subTo(this.r2, x);\n    while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n  }\n  // r = x^2 mod m; x != r\n  function barrettSqrTo(x, r)\n  {\n    x.squareTo(r);\n    this.reduce(r);\n  }\n  // r = x*y mod m; x,y != r\n  function barrettMulTo(x, y, r)\n  {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n  }\n  Barrett.prototype.convert = barrettConvert;\n  Barrett.prototype.revert = barrettRevert;\n  Barrett.prototype.reduce = barrettReduce;\n  Barrett.prototype.mulTo = barrettMulTo;\n  Barrett.prototype.sqrTo = barrettSqrTo;\n  // (public) this^e % m (HAC 14.85)\n  function bnModPow(e, m)\n  {\n    var i = e.bitLength(),\n      k, r = nbv(1),\n      z;\n    if (i <= 0) return r;\n    else if (i < 18) k = 1;\n    else if (i < 48) k = 3;\n    else if (i < 144) k = 4;\n    else if (i < 768) k = 5;\n    else k = 6;\n    if (i < 8)\n      z = new Classic(m);\n    else if (m.isEven())\n      z = new Barrett(m);\n    else\n      z = new Montgomery(m);\n    // precomputation\n    var g = new Array(),\n      n = 3,\n      k1 = k - 1,\n      km = (1 << k) - 1;\n    g[1] = z.convert(this);\n    if (k > 1)\n    {\n      var g2 = nbi();\n      z.sqrTo(g[1], g2);\n      while (n <= km)\n      {\n        g[n] = nbi();\n        z.mulTo(g2, g[n - 2], g[n]);\n        n += 2;\n      }\n    }\n    var j = e.t - 1,\n      w, is1 = true,\n      r2 = nbi(),\n      t;\n    i = nbits(e[j]) - 1;\n    while (j >= 0)\n    {\n      if (i >= k1) w = (e[j] >> (i - k1)) & km;\n      else\n      {\n        w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\n        if (j > 0) w |= e[j - 1] >> (this.DB + i - k1);\n      }\n      n = k;\n      while ((w & 1) == 0)\n      {\n        w >>= 1;\n        --n;\n      }\n      if ((i -= n) < 0)\n      {\n        i += this.DB;\n        --j;\n      }\n      if (is1)\n      { // ret == 1, don't bother squaring or multiplying it\n        g[w].copyTo(r);\n        is1 = false;\n      }\n      else\n      {\n        while (n > 1)\n        {\n          z.sqrTo(r, r2);\n          z.sqrTo(r2, r);\n          n -= 2;\n        }\n        if (n > 0) z.sqrTo(r, r2);\n        else\n        {\n          t = r;\n          r = r2;\n          r2 = t;\n        }\n        z.mulTo(r2, g[w], r);\n      }\n      while (j >= 0 && (e[j] & (1 << i)) == 0)\n      {\n        z.sqrTo(r, r2);\n        t = r;\n        r = r2;\n        r2 = t;\n        if (--i < 0)\n        {\n          i = this.DB - 1;\n          --j;\n        }\n      }\n    }\n    return z.revert(r);\n  }\n  // (public) gcd(this,a) (HAC 14.54)\n  function bnGCD(a)\n  {\n    var x = (this.s < 0) ? this.negate() : this.clone();\n    var y = (a.s < 0) ? a.negate() : a.clone();\n    if (x.compareTo(y) < 0)\n    {\n      var t = x;\n      x = y;\n      y = t;\n    }\n    var i = x.getLowestSetBit(),\n      g = y.getLowestSetBit();\n    if (g < 0) return x;\n    if (i < g) g = i;\n    if (g > 0)\n    {\n      x.rShiftTo(g, x);\n      y.rShiftTo(g, y);\n    }\n    while (x.signum() > 0)\n    {\n      if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n      if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n      if (x.compareTo(y) >= 0)\n      {\n        x.subTo(y, x);\n        x.rShiftTo(1, x);\n      }\n      else\n      {\n        y.subTo(x, y);\n        y.rShiftTo(1, y);\n      }\n    }\n    if (g > 0) y.lShiftTo(g, y);\n    return y;\n  }\n  // (protected) this % n, n < 2^26\n  function bnpModInt(n)\n  {\n    if (n <= 0) return 0;\n    var d = this.DV % n,\n      r = (this.s < 0) ? n - 1 : 0;\n    if (this.t > 0)\n      if (d == 0) r = this[0] % n;\n      else\n        for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;\n    return r;\n  }\n  // (public) 1/this % m (HAC 14.61)\n  function bnModInverse(m)\n  {\n    var ac = m.isEven();\n    if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\n    var u = m.clone(),\n      v = this.clone();\n    var a = nbv(1),\n      b = nbv(0),\n      c = nbv(0),\n      d = nbv(1);\n    while (u.signum() != 0)\n    {\n      while (u.isEven())\n      {\n        u.rShiftTo(1, u);\n        if (ac)\n        {\n          if (!a.isEven() || !b.isEven())\n          {\n            a.addTo(this, a);\n            b.subTo(m, b);\n          }\n          a.rShiftTo(1, a);\n        }\n        else if (!b.isEven()) b.subTo(m, b);\n        b.rShiftTo(1, b);\n      }\n      while (v.isEven())\n      {\n        v.rShiftTo(1, v);\n        if (ac)\n        {\n          if (!c.isEven() || !d.isEven())\n          {\n            c.addTo(this, c);\n            d.subTo(m, d);\n          }\n          c.rShiftTo(1, c);\n        }\n        else if (!d.isEven()) d.subTo(m, d);\n        d.rShiftTo(1, d);\n      }\n      if (u.compareTo(v) >= 0)\n      {\n        u.subTo(v, u);\n        if (ac) a.subTo(c, a);\n        b.subTo(d, b);\n      }\n      else\n      {\n        v.subTo(u, v);\n        if (ac) c.subTo(a, c);\n        d.subTo(b, d);\n      }\n    }\n    if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n    if (d.compareTo(m) >= 0) return d.subtract(m);\n    if (d.signum() < 0) d.addTo(m, d);\n    else return d;\n    if (d.signum() < 0) return d.add(m);\n    else return d;\n  }\n  var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n  // (public) test primality with certainty >= 1-.5^t\n  function bnIsProbablePrime(t)\n  {\n    var i, x = this.abs();\n    if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1])\n    {\n      for (i = 0; i < lowprimes.length; ++i)\n        if (x[0] == lowprimes[i]) return true;\n      return false;\n    }\n    if (x.isEven()) return false;\n    i = 1;\n    while (i < lowprimes.length)\n    {\n      var m = lowprimes[i],\n        j = i + 1;\n      while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n      m = x.modInt(m);\n      while (i < j)\n        if (m % lowprimes[i++] == 0) return false;\n    }\n    return x.millerRabin(t);\n  }\n  // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n  function bnpMillerRabin(t)\n  {\n    var n1 = this.subtract(BigInteger.ONE);\n    var k = n1.getLowestSetBit();\n    if (k <= 0) return false;\n    var r = n1.shiftRight(k);\n    t = (t + 1) >> 1;\n    if (t > lowprimes.length) t = lowprimes.length;\n    var a = nbi();\n    for (var i = 0; i < t; ++i)\n    {\n      //Pick bases at random, instead of starting at 2\n      a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n      var y = a.modPow(r, this);\n      if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0)\n      {\n        var j = 1;\n        while (j++ < k && y.compareTo(n1) != 0)\n        {\n          y = y.modPowInt(2, this);\n          if (y.compareTo(BigInteger.ONE) == 0) return false;\n        }\n        if (y.compareTo(n1) != 0) return false;\n      }\n    }\n    return true;\n  }\n  // protected\n  BigInteger.prototype.chunkSize = bnpChunkSize;\n  BigInteger.prototype.toRadix = bnpToRadix;\n  BigInteger.prototype.fromRadix = bnpFromRadix;\n  BigInteger.prototype.fromNumber = bnpFromNumber;\n  BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n  BigInteger.prototype.changeBit = bnpChangeBit;\n  BigInteger.prototype.addTo = bnpAddTo;\n  BigInteger.prototype.dMultiply = bnpDMultiply;\n  BigInteger.prototype.dAddOffset = bnpDAddOffset;\n  BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n  BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n  BigInteger.prototype.modInt = bnpModInt;\n  BigInteger.prototype.millerRabin = bnpMillerRabin;\n  // public\n  BigInteger.prototype.clone = bnClone;\n  BigInteger.prototype.intValue = bnIntValue;\n  BigInteger.prototype.byteValue = bnByteValue;\n  BigInteger.prototype.shortValue = bnShortValue;\n  BigInteger.prototype.signum = bnSigNum;\n  BigInteger.prototype.toByteArray = bnToByteArray;\n  BigInteger.prototype.equals = bnEquals;\n  BigInteger.prototype.min = bnMin;\n  BigInteger.prototype.max = bnMax;\n  BigInteger.prototype.and = bnAnd;\n  BigInteger.prototype.or = bnOr;\n  BigInteger.prototype.xor = bnXor;\n  BigInteger.prototype.andNot = bnAndNot;\n  BigInteger.prototype.not = bnNot;\n  BigInteger.prototype.shiftLeft = bnShiftLeft;\n  BigInteger.prototype.shiftRight = bnShiftRight;\n  BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n  BigInteger.prototype.bitCount = bnBitCount;\n  BigInteger.prototype.testBit = bnTestBit;\n  BigInteger.prototype.setBit = bnSetBit;\n  BigInteger.prototype.clearBit = bnClearBit;\n  BigInteger.prototype.flipBit = bnFlipBit;\n  BigInteger.prototype.add = bnAdd;\n  BigInteger.prototype.subtract = bnSubtract;\n  BigInteger.prototype.multiply = bnMultiply;\n  BigInteger.prototype.divide = bnDivide;\n  BigInteger.prototype.remainder = bnRemainder;\n  BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n  BigInteger.prototype.modPow = bnModPow;\n  BigInteger.prototype.modInverse = bnModInverse;\n  BigInteger.prototype.pow = bnPow;\n  BigInteger.prototype.gcd = bnGCD;\n  BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n  // JSBN-specific extension\n  BigInteger.prototype.square = bnSquare;\n  var Int128 = BigInteger;\n  // BigInteger interfaces not implemented in jsbn:\n  // BigInteger(int signum, byte[] magnitude)\n  // double doubleValue()\n  // float floatValue()\n  // int hashCode()\n  // long longValue()\n  // static BigInteger valueOf(long val)\n  // Helper functions to make BigInteger functions callable with two parameters\n  // as in original C# Clipper\n  Int128.prototype.IsNegative = function ()\n  {\n    if (this.compareTo(Int128.ZERO) == -1) return true;\n    else return false;\n  };\n  Int128.op_Equality = function (val1, val2)\n  {\n    if (val1.compareTo(val2) == 0) return true;\n    else return false;\n  };\n  Int128.op_Inequality = function (val1, val2)\n  {\n    if (val1.compareTo(val2) != 0) return true;\n    else return false;\n  };\n  Int128.op_GreaterThan = function (val1, val2)\n  {\n    if (val1.compareTo(val2) > 0) return true;\n    else return false;\n  };\n  Int128.op_LessThan = function (val1, val2)\n  {\n    if (val1.compareTo(val2) < 0) return true;\n    else return false;\n  };\n  Int128.op_Addition = function (lhs, rhs)\n  {\n    return new Int128(lhs).add(new Int128(rhs));\n  };\n  Int128.op_Subtraction = function (lhs, rhs)\n  {\n    return new Int128(lhs).subtract(new Int128(rhs));\n  };\n  Int128.Int128Mul = function (lhs, rhs)\n  {\n    return new Int128(lhs).multiply(new Int128(rhs));\n  };\n  Int128.op_Division = function (lhs, rhs)\n  {\n    return lhs.divide(rhs);\n  };\n  Int128.prototype.ToDouble = function ()\n  {\n    return parseFloat(this.toString()); // This could be something faster\n  };\n  // end of Int128 section\n  /*\n  // Uncomment the following two lines if you want to use Int128 outside ClipperLib\n  if (typeof(document) !== \"undefined\") window.Int128 = Int128;\n  else self.Int128 = Int128;\n  */\n\n\n  // ---------------------------------------------\n  // Here starts the actual Clipper library:\n  // Helper function to support Inheritance in Javascript\n\tvar Inherit = function (ce, ce2)\n\t{\n\t\tvar p;\n\t\tif (typeof (Object.getOwnPropertyNames) == 'undefined')\n\t\t{\n\t\t\tfor (p in ce2.prototype)\n\t\t\t\tif (typeof (ce.prototype[p]) == 'undefined' || ce.prototype[p] == Object.prototype[p]) ce.prototype[p] = ce2.prototype[p];\n\t\t\tfor (p in ce2)\n\t\t\t\tif (typeof (ce[p]) == 'undefined') ce[p] = ce2[p];\n\t\t\tce.$baseCtor = ce2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar props = Object.getOwnPropertyNames(ce2.prototype);\n\t\t\tfor (var i = 0; i < props.length; i++)\n\t\t\t\tif (typeof (Object.getOwnPropertyDescriptor(ce.prototype, props[i])) == 'undefined') Object.defineProperty(ce.prototype, props[i], Object.getOwnPropertyDescriptor(ce2.prototype, props[i]));\n\t\t\tfor (p in ce2)\n\t\t\t\tif (typeof (ce[p]) == 'undefined') ce[p] = ce2[p];\n\t\t\tce.$baseCtor = ce2;\n\t\t}\n\t};\n  ClipperLib.Path = function ()\n  {\n    return [];\n  };\n  ClipperLib.Paths = function ()\n  {\n    return []; // Was previously [[]], but caused problems when pushed\n  };\n  // Preserves the calling way of original C# Clipper\n  // Is essential due to compatibility, because DoublePoint is public class in original C# version\n  ClipperLib.DoublePoint = function ()\n  {\n    var a = arguments;\n    this.X = 0;\n    this.Y = 0;\n    // public DoublePoint(DoublePoint dp)\n    // public DoublePoint(IntPoint ip)\n    if (a.length == 1)\n    {\n      this.X = a[0].X;\n      this.Y = a[0].Y;\n    }\n    else if (a.length == 2)\n    {\n      this.X = a[0];\n      this.Y = a[1];\n    }\n  }; // This is internal faster function when called without arguments\n  ClipperLib.DoublePoint0 = function ()\n  {\n    this.X = 0;\n    this.Y = 0;\n  };\n  // This is internal faster function when called with 1 argument (dp or ip)\n  ClipperLib.DoublePoint1 = function (dp)\n  {\n    this.X = dp.X;\n    this.Y = dp.Y;\n  };\n  // This is internal faster function when called with 2 arguments (x and y)\n  ClipperLib.DoublePoint2 = function (x, y)\n  {\n    this.X = x;\n    this.Y = y;\n  };\n  // PolyTree & PolyNode start\n  // -------------------------------\n  ClipperLib.PolyNode = function ()\n  {\n    this.m_Parent = null;\n    this.m_polygon = new ClipperLib.Path();\n    this.m_Index = 0;\n    this.m_jointype = 0;\n    this.m_endtype = 0;\n    this.m_Childs = [];\n    this.IsOpen = false;\n  };\n  ClipperLib.PolyNode.prototype.IsHoleNode = function ()\n  {\n    var result = true;\n    var node = this.m_Parent;\n    while (node !== null)\n    {\n      result = !result;\n      node = node.m_Parent;\n    }\n    return result;\n  };\n  ClipperLib.PolyNode.prototype.ChildCount = function ()\n  {\n    return this.m_Childs.length;\n  };\n  ClipperLib.PolyNode.prototype.Contour = function ()\n  {\n    return this.m_polygon;\n  };\n  ClipperLib.PolyNode.prototype.AddChild = function (Child)\n  {\n    var cnt = this.m_Childs.length;\n    this.m_Childs.push(Child);\n    Child.m_Parent = this;\n    Child.m_Index = cnt;\n  };\n  ClipperLib.PolyNode.prototype.GetNext = function ()\n  {\n    if (this.m_Childs.length > 0)\n      return this.m_Childs[0];\n    else\n      return this.GetNextSiblingUp();\n  };\n  ClipperLib.PolyNode.prototype.GetNextSiblingUp = function ()\n  {\n    if (this.m_Parent === null)\n      return null;\n    else if (this.m_Index == this.m_Parent.m_Childs.length - 1)\n      return this.m_Parent.GetNextSiblingUp();\n    else\n      return this.m_Parent.m_Childs[this.m_Index + 1];\n  };\n  ClipperLib.PolyNode.prototype.Childs = function ()\n  {\n    return this.m_Childs;\n  };\n  ClipperLib.PolyNode.prototype.Parent = function ()\n  {\n    return this.m_Parent;\n  };\n  ClipperLib.PolyNode.prototype.IsHole = function ()\n  {\n    return this.IsHoleNode();\n  };\n  // PolyTree : PolyNode\n  ClipperLib.PolyTree = function ()\n  {\n    this.m_AllPolys = [];\n    ClipperLib.PolyNode.call(this);\n  };\n  ClipperLib.PolyTree.prototype.Clear = function ()\n  {\n    for (var i = 0, ilen = this.m_AllPolys.length; i < ilen; i++)\n      this.m_AllPolys[i] = null;\n    this.m_AllPolys.length = 0;\n    this.m_Childs.length = 0;\n  };\n  ClipperLib.PolyTree.prototype.GetFirst = function ()\n  {\n    if (this.m_Childs.length > 0)\n      return this.m_Childs[0];\n    else\n      return null;\n  };\n  ClipperLib.PolyTree.prototype.Total = function ()\n  {\n\t\tvar result = this.m_AllPolys.length;\n\t\t//with negative offsets, ignore the hidden outer polygon ...\n\t\tif (result > 0 && this.m_Childs[0] != this.m_AllPolys[0]) result--;\n\t\treturn result;\n  };\n  Inherit(ClipperLib.PolyTree, ClipperLib.PolyNode);\n  // -------------------------------\n  // PolyTree & PolyNode end\n  ClipperLib.Math_Abs_Int64 = ClipperLib.Math_Abs_Int32 = ClipperLib.Math_Abs_Double = function (a)\n  {\n    return Math.abs(a);\n  };\n  ClipperLib.Math_Max_Int32_Int32 = function (a, b)\n  {\n    return Math.max(a, b);\n  };\n  /*\n  -----------------------------------\n  cast_32 speedtest: http://jsperf.com/truncate-float-to-integer/2\n  -----------------------------------\n  */\n  if (browser.msie || browser.opera || browser.safari) ClipperLib.Cast_Int32 = function (a)\n  {\n    return a | 0;\n  };\n  else ClipperLib.Cast_Int32 = function (a)\n  { // eg. browser.chrome || browser.chromium || browser.firefox\n    return~~ a;\n  };\n  /*\n  --------------------------\n  cast_64 speedtests: http://jsperf.com/truncate-float-to-integer\n  Chrome: bitwise_not_floor\n  Firefox17: toInteger (typeof test)\n  IE9: bitwise_or_floor\n  IE7 and IE8: to_parseint\n  Chromium: to_floor_or_ceil\n  Firefox3: to_floor_or_ceil\n  Firefox15: to_floor_or_ceil\n  Opera: to_floor_or_ceil\n  Safari: to_floor_or_ceil\n  --------------------------\n  */\n  if (browser.chrome) ClipperLib.Cast_Int64 = function (a)\n  {\n    if (a < -2147483648 || a > 2147483647)\n      return a < 0 ? Math.ceil(a) : Math.floor(a);\n    else return~~ a;\n  };\n  else if (browser.firefox && typeof (Number.toInteger) == \"function\") ClipperLib.Cast_Int64 = function (a)\n  {\n    return Number.toInteger(a);\n  };\n  else if (browser.msie7 || browser.msie8) ClipperLib.Cast_Int64 = function (a)\n  {\n    return parseInt(a, 10);\n  };\n  else if (browser.msie) ClipperLib.Cast_Int64 = function (a)\n  {\n    if (a < -2147483648 || a > 2147483647)\n      return a < 0 ? Math.ceil(a) : Math.floor(a);\n    return a | 0;\n  };\n  // eg. browser.chromium || browser.firefox || browser.opera || browser.safari\n  else ClipperLib.Cast_Int64 = function (a)\n  {\n    return a < 0 ? Math.ceil(a) : Math.floor(a);\n  };\n  ClipperLib.Clear = function (a)\n  {\n    a.length = 0;\n  };\n  //ClipperLib.MaxSteps = 64; // How many steps at maximum in arc in BuildArc() function\n  ClipperLib.PI = 3.141592653589793;\n  ClipperLib.PI2 = 2 * 3.141592653589793;\n  ClipperLib.IntPoint = function ()\n  {\n    var a = arguments,\n      alen = a.length;\n    this.X = 0;\n    this.Y = 0;\n    if (use_xyz)\n    {\n      this.Z = 0;\n      if (alen == 3) // public IntPoint(cInt x, cInt y, cInt z = 0)\n      {\n        this.X = a[0];\n        this.Y = a[1];\n        this.Z = a[2];\n      }\n      else if (alen == 2) // public IntPoint(cInt x, cInt y)\n      {\n        this.X = a[0];\n        this.Y = a[1];\n        this.Z = 0;\n      }\n      else if (alen == 1)\n      {\n        if (a[0] instanceof ClipperLib.DoublePoint) // public IntPoint(DoublePoint dp)\n        {\n          var dp = a[0];\n          this.X = ClipperLib.Clipper.Round(dp.X);\n          this.Y = ClipperLib.Clipper.Round(dp.Y);\n          this.Z = 0;\n        }\n        else // public IntPoint(IntPoint pt)\n        {\n          var pt = a[0];\n          if (typeof (pt.Z) == \"undefined\") pt.Z = 0;\n          this.X = pt.X;\n          this.Y = pt.Y;\n          this.Z = pt.Z;\n        }\n      }\n      else // public IntPoint()\n      {\n        this.X = 0;\n        this.Y = 0;\n        this.Z = 0;\n      }\n    }\n    else // if (!use_xyz)\n    {\n      if (alen == 2) // public IntPoint(cInt X, cInt Y)\n      {\n        this.X = a[0];\n        this.Y = a[1];\n      }\n      else if (alen == 1)\n      {\n        if (a[0] instanceof ClipperLib.DoublePoint) // public IntPoint(DoublePoint dp)\n        {\n          var dp = a[0];\n          this.X = ClipperLib.Clipper.Round(dp.X);\n          this.Y = ClipperLib.Clipper.Round(dp.Y);\n        }\n        else // public IntPoint(IntPoint pt)\n        {\n          var pt = a[0];\n          this.X = pt.X;\n          this.Y = pt.Y;\n        }\n      }\n      else // public IntPoint(IntPoint pt)\n      {\n        this.X = 0;\n        this.Y = 0;\n      }\n    }\n  };\n  ClipperLib.IntPoint.op_Equality = function (a, b)\n  {\n    //return a == b;\n    return a.X == b.X && a.Y == b.Y;\n  };\n  ClipperLib.IntPoint.op_Inequality = function (a, b)\n  {\n    //return a != b;\n    return a.X != b.X || a.Y != b.Y;\n  };\n  /*\n  ClipperLib.IntPoint.prototype.Equals = function (obj)\n  {\n    if (obj === null)\n        return false;\n    if (obj instanceof ClipperLib.IntPoint)\n    {\n        var a = Cast(obj, ClipperLib.IntPoint);\n        return (this.X == a.X) && (this.Y == a.Y);\n    }\n    else\n        return false;\n  };\n*/\n  if (use_xyz)\n  {\n    ClipperLib.IntPoint0 = function ()\n    {\n      this.X = 0;\n      this.Y = 0;\n      this.Z = 0;\n    };\n    ClipperLib.IntPoint1 = function (pt)\n    {\n      this.X = pt.X;\n      this.Y = pt.Y;\n      this.Z = pt.Z;\n    };\n    ClipperLib.IntPoint1dp = function (dp)\n    {\n      this.X = ClipperLib.Clipper.Round(dp.X);\n      this.Y = ClipperLib.Clipper.Round(dp.Y);\n      this.Z = 0;\n    };\n    ClipperLib.IntPoint2 = function (x, y)\n    {\n      this.X = x;\n      this.Y = y;\n      this.Z = 0;\n    };\n    ClipperLib.IntPoint3 = function (x, y, z)\n    {\n      this.X = x;\n      this.Y = y;\n      this.Z = z;\n    };\n  }\n  else // if (!use_xyz)\n  {\n    ClipperLib.IntPoint0 = function ()\n    {\n      this.X = 0;\n      this.Y = 0;\n    };\n    ClipperLib.IntPoint1 = function (pt)\n    {\n      this.X = pt.X;\n      this.Y = pt.Y;\n    };\n    ClipperLib.IntPoint1dp = function (dp)\n    {\n      this.X = ClipperLib.Clipper.Round(dp.X);\n      this.Y = ClipperLib.Clipper.Round(dp.Y);\n    };\n    ClipperLib.IntPoint2 = function (x, y)\n    {\n      this.X = x;\n      this.Y = y;\n    };\n  }\n  ClipperLib.IntRect = function ()\n  {\n    var a = arguments,\n      alen = a.length;\n    if (alen == 4) // function (l, t, r, b)\n    {\n      this.left = a[0];\n      this.top = a[1];\n      this.right = a[2];\n      this.bottom = a[3];\n    }\n    else if (alen == 1) // function (ir)\n    {\n      this.left = ir.left;\n      this.top = ir.top;\n      this.right = ir.right;\n      this.bottom = ir.bottom;\n    }\n    else // function ()\n    {\n      this.left = 0;\n      this.top = 0;\n      this.right = 0;\n      this.bottom = 0;\n    }\n  };\n  ClipperLib.IntRect0 = function ()\n  {\n    this.left = 0;\n    this.top = 0;\n    this.right = 0;\n    this.bottom = 0;\n  };\n  ClipperLib.IntRect1 = function (ir)\n  {\n    this.left = ir.left;\n    this.top = ir.top;\n    this.right = ir.right;\n    this.bottom = ir.bottom;\n  };\n  ClipperLib.IntRect4 = function (l, t, r, b)\n  {\n    this.left = l;\n    this.top = t;\n    this.right = r;\n    this.bottom = b;\n  };\n  ClipperLib.ClipType = {\n    ctIntersection: 0,\n    ctUnion: 1,\n    ctDifference: 2,\n    ctXor: 3\n  };\n  ClipperLib.PolyType = {\n    ptSubject: 0,\n    ptClip: 1\n  };\n  ClipperLib.PolyFillType = {\n    pftEvenOdd: 0,\n    pftNonZero: 1,\n    pftPositive: 2,\n    pftNegative: 3\n  };\n  ClipperLib.JoinType = {\n    jtSquare: 0,\n    jtRound: 1,\n    jtMiter: 2\n  };\n  ClipperLib.EndType = {\n    etOpenSquare: 0,\n    etOpenRound: 1,\n    etOpenButt: 2,\n    etClosedLine: 3,\n    etClosedPolygon: 4\n  };\n  ClipperLib.EdgeSide = {\n    esLeft: 0,\n    esRight: 1\n  };\n  ClipperLib.Direction = {\n    dRightToLeft: 0,\n    dLeftToRight: 1\n  };\n  ClipperLib.TEdge = function ()\n  {\n    this.Bot = new ClipperLib.IntPoint();\n    this.Curr = new ClipperLib.IntPoint();\n    this.Top = new ClipperLib.IntPoint();\n    this.Delta = new ClipperLib.IntPoint();\n    this.Dx = 0;\n    this.PolyTyp = ClipperLib.PolyType.ptSubject;\n    this.Side = ClipperLib.EdgeSide.esLeft;\n    this.WindDelta = 0;\n    this.WindCnt = 0;\n    this.WindCnt2 = 0;\n    this.OutIdx = 0;\n    this.Next = null;\n    this.Prev = null;\n    this.NextInLML = null;\n    this.NextInAEL = null;\n    this.PrevInAEL = null;\n    this.NextInSEL = null;\n    this.PrevInSEL = null;\n  };\n  ClipperLib.IntersectNode = function ()\n  {\n    this.Edge1 = null;\n    this.Edge2 = null;\n    this.Pt = new ClipperLib.IntPoint();\n  };\n  ClipperLib.MyIntersectNodeSort = function () {};\n  ClipperLib.MyIntersectNodeSort.Compare = function (node1, node2)\n  {\n    var i = node2.Pt.Y - node1.Pt.Y;\n    if (i > 0) return 1;\n    else if (i < 0) return -1;\n    else return 0;\n  };\n\n  ClipperLib.LocalMinima = function ()\n  {\n    this.Y = 0;\n    this.LeftBound = null;\n    this.RightBound = null;\n    this.Next = null;\n  };\n  ClipperLib.Scanbeam = function ()\n  {\n    this.Y = 0;\n    this.Next = null;\n  };\n  ClipperLib.OutRec = function ()\n  {\n    this.Idx = 0;\n    this.IsHole = false;\n    this.IsOpen = false;\n    this.FirstLeft = null;\n    this.Pts = null;\n    this.BottomPt = null;\n    this.PolyNode = null;\n  };\n  ClipperLib.OutPt = function ()\n  {\n    this.Idx = 0;\n    this.Pt = new ClipperLib.IntPoint();\n    this.Next = null;\n    this.Prev = null;\n  };\n  ClipperLib.Join = function ()\n  {\n    this.OutPt1 = null;\n    this.OutPt2 = null;\n    this.OffPt = new ClipperLib.IntPoint();\n  };\n  ClipperLib.ClipperBase = function ()\n  {\n    this.m_MinimaList = null;\n    this.m_CurrentLM = null;\n    this.m_edges = new Array();\n    this.m_UseFullRange = false;\n    this.m_HasOpenPaths = false;\n    this.PreserveCollinear = false;\n    this.m_MinimaList = null;\n    this.m_CurrentLM = null;\n    this.m_UseFullRange = false;\n    this.m_HasOpenPaths = false;\n  };\n  // Ranges are in original C# too high for Javascript (in current state 2013 september):\n  // protected const double horizontal = -3.4E+38;\n  // internal const cInt loRange = 0x3FFFFFFF; // = 1073741823 = sqrt(2^63 -1)/2\n  // internal const cInt hiRange = 0x3FFFFFFFFFFFFFFFL; // = 4611686018427387903 = sqrt(2^127 -1)/2\n  // So had to adjust them to more suitable for Javascript.\n  // If JS some day supports truly 64-bit integers, then these ranges can be as in C#\n  // and biginteger library can be more simpler (as then 128bit can be represented as two 64bit numbers)\n  ClipperLib.ClipperBase.horizontal = -9007199254740992; //-2^53\n  ClipperLib.ClipperBase.Skip = -2;\n  ClipperLib.ClipperBase.Unassigned = -1;\n  ClipperLib.ClipperBase.tolerance = 1E-20;\n  if (use_int32)\n  {\n    ClipperLib.ClipperBase.loRange = 0x7FFF;\n    ClipperLib.ClipperBase.hiRange = 0x7FFF;\n  }\n  else\n  {\n    ClipperLib.ClipperBase.loRange = 47453132; // sqrt(2^53 -1)/2\n    ClipperLib.ClipperBase.hiRange = 4503599627370495; // sqrt(2^106 -1)/2\n  }\n\n  ClipperLib.ClipperBase.near_zero = function (val)\n  {\n    return (val > -ClipperLib.ClipperBase.tolerance) && (val < ClipperLib.ClipperBase.tolerance);\n  };\n  ClipperLib.ClipperBase.IsHorizontal = function (e)\n  {\n    return e.Delta.Y === 0;\n  };\n  ClipperLib.ClipperBase.prototype.PointIsVertex = function (pt, pp)\n  {\n    var pp2 = pp;\n    do {\n      if (ClipperLib.IntPoint.op_Equality(pp2.Pt, pt))\n        return true;\n      pp2 = pp2.Next;\n    }\n    while (pp2 != pp)\n    return false;\n  };\n  ClipperLib.ClipperBase.prototype.PointOnLineSegment = function (pt, linePt1, linePt2, UseFullRange)\n  {\n    if (UseFullRange)\n      return ((pt.X == linePt1.X) && (pt.Y == linePt1.Y)) ||\n        ((pt.X == linePt2.X) && (pt.Y == linePt2.Y)) ||\n        (((pt.X > linePt1.X) == (pt.X < linePt2.X)) &&\n        ((pt.Y > linePt1.Y) == (pt.Y < linePt2.Y)) &&\n        (Int128.op_Equality(Int128.Int128Mul((pt.X - linePt1.X), (linePt2.Y - linePt1.Y)),\n          Int128.Int128Mul((linePt2.X - linePt1.X), (pt.Y - linePt1.Y)))));\n    else\n      return ((pt.X == linePt1.X) && (pt.Y == linePt1.Y)) || ((pt.X == linePt2.X) && (pt.Y == linePt2.Y)) || (((pt.X > linePt1.X) == (pt.X < linePt2.X)) && ((pt.Y > linePt1.Y) == (pt.Y < linePt2.Y)) && ((pt.X - linePt1.X) * (linePt2.Y - linePt1.Y) == (linePt2.X - linePt1.X) * (pt.Y - linePt1.Y)));\n  };\n  ClipperLib.ClipperBase.prototype.PointOnPolygon = function (pt, pp, UseFullRange)\n  {\n    var pp2 = pp;\n    while (true)\n    {\n      if (this.PointOnLineSegment(pt, pp2.Pt, pp2.Next.Pt, UseFullRange))\n        return true;\n      pp2 = pp2.Next;\n      if (pp2 == pp)\n        break;\n    }\n    return false;\n  };\n  ClipperLib.ClipperBase.prototype.SlopesEqual = ClipperLib.ClipperBase.SlopesEqual = function ()\n  {\n    var a = arguments,\n      alen = a.length;\n    var e1, e2, pt1, pt2, pt3, pt4, UseFullRange;\n    if (alen == 3) // function (e1, e2, UseFullRange)\n    {\n      e1 = a[0];\n      e2 = a[1];\n      UseFullRange = a[2];\n      if (UseFullRange)\n        return Int128.op_Equality(Int128.Int128Mul(e1.Delta.Y, e2.Delta.X), Int128.Int128Mul(e1.Delta.X, e2.Delta.Y));\n      else\n        return ClipperLib.Cast_Int64((e1.Delta.Y) * (e2.Delta.X)) == ClipperLib.Cast_Int64((e1.Delta.X) * (e2.Delta.Y));\n    }\n    else if (alen == 4) // function (pt1, pt2, pt3, UseFullRange)\n    {\n      pt1 = a[0];\n      pt2 = a[1];\n      pt3 = a[2];\n      UseFullRange = a[3];\n      if (UseFullRange)\n        return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt2.X - pt3.X), Int128.Int128Mul(pt1.X - pt2.X, pt2.Y - pt3.Y));\n      else\n        return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt2.X - pt3.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt2.Y - pt3.Y)) === 0;\n    }\n    else // function (pt1, pt2, pt3, pt4, UseFullRange)\n    {\n      pt1 = a[0];\n      pt2 = a[1];\n      pt3 = a[2];\n      pt4 = a[3];\n      UseFullRange = a[4];\n      if (UseFullRange)\n        return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt3.X - pt4.X), Int128.Int128Mul(pt1.X - pt2.X, pt3.Y - pt4.Y));\n      else\n        return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt3.X - pt4.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt3.Y - pt4.Y)) === 0;\n    }\n  };\n  ClipperLib.ClipperBase.SlopesEqual3 = function (e1, e2, UseFullRange)\n  {\n    if (UseFullRange)\n      return Int128.op_Equality(Int128.Int128Mul(e1.Delta.Y, e2.Delta.X), Int128.Int128Mul(e1.Delta.X, e2.Delta.Y));\n    else\n      return ClipperLib.Cast_Int64((e1.Delta.Y) * (e2.Delta.X)) == ClipperLib.Cast_Int64((e1.Delta.X) * (e2.Delta.Y));\n  };\n  ClipperLib.ClipperBase.SlopesEqual4 = function (pt1, pt2, pt3, UseFullRange)\n  {\n    if (UseFullRange)\n      return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt2.X - pt3.X), Int128.Int128Mul(pt1.X - pt2.X, pt2.Y - pt3.Y));\n    else\n      return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt2.X - pt3.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt2.Y - pt3.Y)) === 0;\n  };\n  ClipperLib.ClipperBase.SlopesEqual5 = function (pt1, pt2, pt3, pt4, UseFullRange)\n  {\n    if (UseFullRange)\n      return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt3.X - pt4.X), Int128.Int128Mul(pt1.X - pt2.X, pt3.Y - pt4.Y));\n    else\n      return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt3.X - pt4.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt3.Y - pt4.Y)) === 0;\n  };\n  ClipperLib.ClipperBase.prototype.Clear = function ()\n  {\n    this.DisposeLocalMinimaList();\n    for (var i = 0, ilen = this.m_edges.length; i < ilen; ++i)\n    {\n      for (var j = 0, jlen = this.m_edges[i].length; j < jlen; ++j)\n        this.m_edges[i][j] = null;\n      ClipperLib.Clear(this.m_edges[i]);\n    }\n    ClipperLib.Clear(this.m_edges);\n    this.m_UseFullRange = false;\n    this.m_HasOpenPaths = false;\n  };\n  ClipperLib.ClipperBase.prototype.DisposeLocalMinimaList = function ()\n  {\n    while (this.m_MinimaList !== null)\n    {\n      var tmpLm = this.m_MinimaList.Next;\n      this.m_MinimaList = null;\n      this.m_MinimaList = tmpLm;\n    }\n    this.m_CurrentLM = null;\n  };\n  ClipperLib.ClipperBase.prototype.RangeTest = function (Pt, useFullRange)\n  {\n    if (useFullRange.Value)\n    {\n      if (Pt.X > ClipperLib.ClipperBase.hiRange || Pt.Y > ClipperLib.ClipperBase.hiRange || -Pt.X > ClipperLib.ClipperBase.hiRange || -Pt.Y > ClipperLib.ClipperBase.hiRange)\n        ClipperLib.Error(\"Coordinate outside allowed range in RangeTest().\");\n    }\n    else if (Pt.X > ClipperLib.ClipperBase.loRange || Pt.Y > ClipperLib.ClipperBase.loRange || -Pt.X > ClipperLib.ClipperBase.loRange || -Pt.Y > ClipperLib.ClipperBase.loRange)\n    {\n      useFullRange.Value = true;\n      this.RangeTest(Pt, useFullRange);\n    }\n  };\n  ClipperLib.ClipperBase.prototype.InitEdge = function (e, eNext, ePrev, pt)\n  {\n    e.Next = eNext;\n    e.Prev = ePrev;\n    //e.Curr = pt;\n    e.Curr.X = pt.X;\n    e.Curr.Y = pt.Y;\n    e.OutIdx = -1;\n  };\n  ClipperLib.ClipperBase.prototype.InitEdge2 = function (e, polyType)\n  {\n    if (e.Curr.Y >= e.Next.Curr.Y)\n    {\n      //e.Bot = e.Curr;\n      e.Bot.X = e.Curr.X;\n      e.Bot.Y = e.Curr.Y;\n      //e.Top = e.Next.Curr;\n      e.Top.X = e.Next.Curr.X;\n      e.Top.Y = e.Next.Curr.Y;\n    }\n    else\n    {\n      //e.Top = e.Curr;\n      e.Top.X = e.Curr.X;\n      e.Top.Y = e.Curr.Y;\n      //e.Bot = e.Next.Curr;\n      e.Bot.X = e.Next.Curr.X;\n      e.Bot.Y = e.Next.Curr.Y;\n    }\n    this.SetDx(e);\n    e.PolyTyp = polyType;\n  };\n  ClipperLib.ClipperBase.prototype.FindNextLocMin = function (E)\n  {\n    var E2;\n    for (;;)\n    {\n      while (ClipperLib.IntPoint.op_Inequality(E.Bot, E.Prev.Bot) || ClipperLib.IntPoint.op_Equality(E.Curr, E.Top))\n        E = E.Next;\n      if (E.Dx != ClipperLib.ClipperBase.horizontal && E.Prev.Dx != ClipperLib.ClipperBase.horizontal)\n        break;\n      while (E.Prev.Dx == ClipperLib.ClipperBase.horizontal)\n        E = E.Prev;\n      E2 = E;\n      while (E.Dx == ClipperLib.ClipperBase.horizontal)\n        E = E.Next;\n      if (E.Top.Y == E.Prev.Bot.Y)\n        continue;\n      //ie just an intermediate horz.\n      if (E2.Prev.Bot.X < E.Bot.X)\n        E = E2;\n      break;\n    }\n    return E;\n  };\n  ClipperLib.ClipperBase.prototype.ProcessBound = function (E, LeftBoundIsForward)\n  {\n    var EStart;\n    var Result = E;\n    var Horz;\n\n      if (Result.OutIdx == ClipperLib.ClipperBase.Skip)\n      {\n        //check if there are edges beyond the skip edge in the bound and if so\n        //create another LocMin and calling ProcessBound once more ...\n        E = Result;\n        if (LeftBoundIsForward)\n        {\n          while (E.Top.Y == E.Next.Bot.Y) E = E.Next;\n          while (E != Result && E.Dx == ClipperLib.ClipperBase.horizontal) E = E.Prev;\n        }\n        else\n        {\n          while (E.Top.Y == E.Prev.Bot.Y) E = E.Prev;\n          while (E != Result && E.Dx == ClipperLib.ClipperBase.horizontal) E = E.Next;\n        }\n        if (E == Result)\n        {\n          if (LeftBoundIsForward) Result = E.Next;\n          else Result = E.Prev;\n        }\n        else\n        {\n          //there are more edges in the bound beyond result starting with E\n          if (LeftBoundIsForward)\n            E = Result.Next;\n          else\n            E = Result.Prev;\n          var locMin = new ClipperLib.LocalMinima();\n          locMin.Next = null;\n          locMin.Y = E.Bot.Y;\n          locMin.LeftBound = null;\n          locMin.RightBound = E;\n          E.WindDelta = 0;\n          Result = this.ProcessBound(E, LeftBoundIsForward);\n          this.InsertLocalMinima(locMin);\n        }\n        return Result;\n      }\n\n      if (E.Dx == ClipperLib.ClipperBase.horizontal)\n      {\n        //We need to be careful with open paths because this may not be a\n        //true local minima (ie E may be following a skip edge).\n        //Also, consecutive horz. edges may start heading left before going right.\n        if (LeftBoundIsForward) EStart = E.Prev;\n        else EStart = E.Next;\n        if (EStart.OutIdx != ClipperLib.ClipperBase.Skip)\n        {\n          if (EStart.Dx == ClipperLib.ClipperBase.horizontal) //ie an adjoining horizontal skip edge\n          {\n            if (EStart.Bot.X != E.Bot.X && EStart.Top.X != E.Bot.X)\n              this.ReverseHorizontal(E);\n          }\n          else if (EStart.Bot.X != E.Bot.X)\n            this.ReverseHorizontal(E);\n        }\n      }\n\n      EStart = E;\n      if (LeftBoundIsForward)\n      {\n        while (Result.Top.Y == Result.Next.Bot.Y && Result.Next.OutIdx != ClipperLib.ClipperBase.Skip)\n          Result = Result.Next;\n        if (Result.Dx == ClipperLib.ClipperBase.horizontal && Result.Next.OutIdx != ClipperLib.ClipperBase.Skip)\n        {\n          //nb: at the top of a bound, horizontals are added to the bound\n          //only when the preceding edge attaches to the horizontal's left vertex\n          //unless a Skip edge is encountered when that becomes the top divide\n          Horz = Result;\n          while (Horz.Prev.Dx == ClipperLib.ClipperBase.horizontal)\n            Horz = Horz.Prev;\n          if (Horz.Prev.Top.X == Result.Next.Top.X)\n          {\n            if (!LeftBoundIsForward)\n              Result = Horz.Prev;\n          }\n          else if (Horz.Prev.Top.X > Result.Next.Top.X)\n            Result = Horz.Prev;\n        }\n        while (E != Result)\n        {\n          E.NextInLML = E.Next;\n          if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Prev.Top.X)\n            this.ReverseHorizontal(E);\n          E = E.Next;\n        }\n        if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Prev.Top.X)\n          this.ReverseHorizontal(E);\n        Result = Result.Next;\n        //move to the edge just beyond current bound\n      }\n      else\n      {\n        while (Result.Top.Y == Result.Prev.Bot.Y && Result.Prev.OutIdx != ClipperLib.ClipperBase.Skip)\n          Result = Result.Prev;\n        if (Result.Dx == ClipperLib.ClipperBase.horizontal && Result.Prev.OutIdx != ClipperLib.ClipperBase.Skip)\n        {\n          Horz = Result;\n          while (Horz.Next.Dx == ClipperLib.ClipperBase.horizontal)\n            Horz = Horz.Next;\n          if (Horz.Next.Top.X == Result.Prev.Top.X)\n          {\n            if (!LeftBoundIsForward)\n              Result = Horz.Next;\n          }\n          else if (Horz.Next.Top.X > Result.Prev.Top.X)\n            Result = Horz.Next;\n        }\n        while (E != Result)\n        {\n          E.NextInLML = E.Prev;\n          if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Next.Top.X)\n            this.ReverseHorizontal(E);\n          E = E.Prev;\n        }\n        if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Next.Top.X)\n          this.ReverseHorizontal(E);\n        Result = Result.Prev;\n        //move to the edge just beyond current bound\n      }\n\n    return Result;\n  };\n\n  ClipperLib.ClipperBase.prototype.AddPath = function (pg, polyType, Closed)\n  {\n    if (use_lines)\n    {\n      if (!Closed && polyType == ClipperLib.PolyType.ptClip)\n        ClipperLib.Error(\"AddPath: Open paths must be subject.\");\n    }\n    else\n    {\n      if (!Closed)\n        ClipperLib.Error(\"AddPath: Open paths have been disabled.\");\n    }\n    var highI = pg.length - 1;\n    if (Closed)\n      while (highI > 0 && (ClipperLib.IntPoint.op_Equality(pg[highI], pg[0])))\n    --highI;\n    while (highI > 0 && (ClipperLib.IntPoint.op_Equality(pg[highI], pg[highI - 1])))\n    --highI;\n    if ((Closed && highI < 2) || (!Closed && highI < 1))\n      return false;\n    //create a new edge array ...\n    var edges = new Array();\n    for (var i = 0; i <= highI; i++)\n      edges.push(new ClipperLib.TEdge());\n    var IsFlat = true;\n    //1. Basic (first) edge initialization ...\n\n    //edges[1].Curr = pg[1];\n    edges[1].Curr.X = pg[1].X;\n    edges[1].Curr.Y = pg[1].Y;\n\n    var $1 = {Value: this.m_UseFullRange};\n    this.RangeTest(pg[0], $1);\n    this.m_UseFullRange = $1.Value;\n\n    $1.Value = this.m_UseFullRange;\n    this.RangeTest(pg[highI], $1);\n    this.m_UseFullRange = $1.Value;\n\n    this.InitEdge(edges[0], edges[1], edges[highI], pg[0]);\n    this.InitEdge(edges[highI], edges[0], edges[highI - 1], pg[highI]);\n    for (var i = highI - 1; i >= 1; --i)\n    {\n      $1.Value = this.m_UseFullRange;\n      this.RangeTest(pg[i], $1);\n      this.m_UseFullRange = $1.Value;\n\n      this.InitEdge(edges[i], edges[i + 1], edges[i - 1], pg[i]);\n    }\n\n    var eStart = edges[0];\n    //2. Remove duplicate vertices, and (when closed) collinear edges ...\n    var E = eStart,\n      eLoopStop = eStart;\n    for (;;)\n    {\n    //console.log(E.Next, eStart);\n    \t//nb: allows matching start and end points when not Closed ...\n      if (E.Curr == E.Next.Curr && (Closed || E.Next != eStart))\n      {\n        if (E == E.Next)\n          break;\n        if (E == eStart)\n          eStart = E.Next;\n        E = this.RemoveEdge(E);\n        eLoopStop = E;\n        continue;\n      }\n      if (E.Prev == E.Next)\n        break;\n      else if (Closed && ClipperLib.ClipperBase.SlopesEqual(E.Prev.Curr, E.Curr, E.Next.Curr, this.m_UseFullRange) && (!this.PreserveCollinear || !this.Pt2IsBetweenPt1AndPt3(E.Prev.Curr, E.Curr, E.Next.Curr)))\n      {\n        //Collinear edges are allowed for open paths but in closed paths\n        //the default is to merge adjacent collinear edges into a single edge.\n        //However, if the PreserveCollinear property is enabled, only overlapping\n        //collinear edges (ie spikes) will be removed from closed paths.\n        if (E == eStart)\n          eStart = E.Next;\n        E = this.RemoveEdge(E);\n        E = E.Prev;\n        eLoopStop = E;\n        continue;\n      }\n      E = E.Next;\n      if ((E == eLoopStop) || (!Closed && E.Next == eStart)) break;\n    }\n    if ((!Closed && (E == E.Next)) || (Closed && (E.Prev == E.Next)))\n      return false;\n    if (!Closed)\n    {\n      this.m_HasOpenPaths = true;\n      eStart.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n    }\n    //3. Do second stage of edge initialization ...\n    E = eStart;\n    do {\n      this.InitEdge2(E, polyType);\n      E = E.Next;\n      if (IsFlat && E.Curr.Y != eStart.Curr.Y)\n        IsFlat = false;\n    }\n    while (E != eStart)\n    //4. Finally, add edge bounds to LocalMinima list ...\n    //Totally flat paths must be handled differently when adding them\n    //to LocalMinima list to avoid endless loops etc ...\n    if (IsFlat)\n    {\n      if (Closed)\n        return false;\n      E.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n      if (E.Prev.Bot.X < E.Prev.Top.X)\n        this.ReverseHorizontal(E.Prev);\n      var locMin = new ClipperLib.LocalMinima();\n      locMin.Next = null;\n      locMin.Y = E.Bot.Y;\n      locMin.LeftBound = null;\n      locMin.RightBound = E;\n      locMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n      locMin.RightBound.WindDelta = 0;\n      while (E.Next.OutIdx != ClipperLib.ClipperBase.Skip)\n      {\n        E.NextInLML = E.Next;\n        if (E.Bot.X != E.Prev.Top.X)\n          this.ReverseHorizontal(E);\n        E = E.Next;\n      }\n      this.InsertLocalMinima(locMin);\n      this.m_edges.push(edges);\n      return true;\n    }\n    this.m_edges.push(edges);\n    var leftBoundIsForward;\n    var EMin = null;\n\n\t\t//workaround to avoid an endless loop in the while loop below when\n    //open paths have matching start and end points ...\n    if(ClipperLib.IntPoint.op_Equality(E.Prev.Bot, E.Prev.Top))\n    \tE = E.Next;\n\n    for (;;)\n    {\n      E = this.FindNextLocMin(E);\n      if (E == EMin)\n        break;\n      else if (EMin == null)\n        EMin = E;\n      //E and E.Prev now share a local minima (left aligned if horizontal).\n      //Compare their slopes to find which starts which bound ...\n      var locMin = new ClipperLib.LocalMinima();\n      locMin.Next = null;\n      locMin.Y = E.Bot.Y;\n      if (E.Dx < E.Prev.Dx)\n      {\n        locMin.LeftBound = E.Prev;\n        locMin.RightBound = E;\n        leftBoundIsForward = false;\n        //Q.nextInLML = Q.prev\n      }\n      else\n      {\n        locMin.LeftBound = E;\n        locMin.RightBound = E.Prev;\n        leftBoundIsForward = true;\n        //Q.nextInLML = Q.next\n      }\n      locMin.LeftBound.Side = ClipperLib.EdgeSide.esLeft;\n      locMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n      if (!Closed)\n        locMin.LeftBound.WindDelta = 0;\n      else if (locMin.LeftBound.Next == locMin.RightBound)\n        locMin.LeftBound.WindDelta = -1;\n      else\n        locMin.LeftBound.WindDelta = 1;\n      locMin.RightBound.WindDelta = -locMin.LeftBound.WindDelta;\n      E = this.ProcessBound(locMin.LeftBound, leftBoundIsForward);\n      if (E.OutIdx == ClipperLib.ClipperBase.Skip)\n      \tE = this.ProcessBound(E, leftBoundIsForward);\n      var E2 = this.ProcessBound(locMin.RightBound, !leftBoundIsForward);\n      if (E2.OutIdx == ClipperLib.ClipperBase.Skip) E2 = this.ProcessBound(E2, !leftBoundIsForward);\n      if (locMin.LeftBound.OutIdx == ClipperLib.ClipperBase.Skip)\n        locMin.LeftBound = null;\n      else if (locMin.RightBound.OutIdx == ClipperLib.ClipperBase.Skip)\n        locMin.RightBound = null;\n      this.InsertLocalMinima(locMin);\n      if (!leftBoundIsForward)\n        E = E2;\n    }\n    return true;\n  };\n  ClipperLib.ClipperBase.prototype.AddPaths = function (ppg, polyType, closed)\n  {\n    //  console.log(\"-------------------------------------------\");\n    //  console.log(JSON.stringify(ppg));\n    var result = false;\n    for (var i = 0, ilen = ppg.length; i < ilen; ++i)\n      if (this.AddPath(ppg[i], polyType, closed))\n        result = true;\n    return result;\n  };\n  //------------------------------------------------------------------------------\n  ClipperLib.ClipperBase.prototype.Pt2IsBetweenPt1AndPt3 = function (pt1, pt2, pt3)\n  {\n    if ((ClipperLib.IntPoint.op_Equality(pt1, pt3)) || (ClipperLib.IntPoint.op_Equality(pt1, pt2)) ||       (ClipperLib.IntPoint.op_Equality(pt3, pt2)))\n\n   //if ((pt1 == pt3) || (pt1 == pt2) || (pt3 == pt2))\n   return false;\n\n    else if (pt1.X != pt3.X)\n      return (pt2.X > pt1.X) == (pt2.X < pt3.X);\n    else\n      return (pt2.Y > pt1.Y) == (pt2.Y < pt3.Y);\n  };\n  ClipperLib.ClipperBase.prototype.RemoveEdge = function (e)\n  {\n    //removes e from double_linked_list (but without removing from memory)\n    e.Prev.Next = e.Next;\n    e.Next.Prev = e.Prev;\n    var result = e.Next;\n    e.Prev = null; //flag as removed (see ClipperBase.Clear)\n    return result;\n  };\n  ClipperLib.ClipperBase.prototype.SetDx = function (e)\n  {\n    e.Delta.X = (e.Top.X - e.Bot.X);\n    e.Delta.Y = (e.Top.Y - e.Bot.Y);\n    if (e.Delta.Y === 0) e.Dx = ClipperLib.ClipperBase.horizontal;\n    else e.Dx = (e.Delta.X) / (e.Delta.Y);\n  };\n  ClipperLib.ClipperBase.prototype.InsertLocalMinima = function (newLm)\n  {\n    if (this.m_MinimaList === null)\n    {\n      this.m_MinimaList = newLm;\n    }\n    else if (newLm.Y >= this.m_MinimaList.Y)\n    {\n      newLm.Next = this.m_MinimaList;\n      this.m_MinimaList = newLm;\n    }\n    else\n    {\n      var tmpLm = this.m_MinimaList;\n      while (tmpLm.Next !== null && (newLm.Y < tmpLm.Next.Y))\n        tmpLm = tmpLm.Next;\n      newLm.Next = tmpLm.Next;\n      tmpLm.Next = newLm;\n    }\n  };\n  ClipperLib.ClipperBase.prototype.PopLocalMinima = function ()\n  {\n    if (this.m_CurrentLM === null)\n      return;\n    this.m_CurrentLM = this.m_CurrentLM.Next;\n  };\n  ClipperLib.ClipperBase.prototype.ReverseHorizontal = function (e)\n  {\n    //swap horizontal edges' top and bottom x's so they follow the natural\n    //progression of the bounds - ie so their xbots will align with the\n    //adjoining lower edge. [Helpful in the ProcessHorizontal() method.]\n    var tmp = e.Top.X;\n    e.Top.X = e.Bot.X;\n    e.Bot.X = tmp;\n    if (use_xyz)\n    {\n      tmp = e.Top.Z;\n      e.Top.Z = e.Bot.Z;\n      e.Bot.Z = tmp;\n    }\n  };\n  ClipperLib.ClipperBase.prototype.Reset = function ()\n  {\n    this.m_CurrentLM = this.m_MinimaList;\n    if (this.m_CurrentLM == null)\n      return;\n    //ie nothing to process\n    //reset all edges ...\n    var lm = this.m_MinimaList;\n    while (lm != null)\n    {\n      var e = lm.LeftBound;\n      if (e != null)\n      {\n        //e.Curr = e.Bot;\n        e.Curr.X = e.Bot.X;\n        e.Curr.Y = e.Bot.Y;\n        e.Side = ClipperLib.EdgeSide.esLeft;\n        e.OutIdx = ClipperLib.ClipperBase.Unassigned;\n      }\n      e = lm.RightBound;\n      if (e != null)\n      {\n        //e.Curr = e.Bot;\n        e.Curr.X = e.Bot.X;\n        e.Curr.Y = e.Bot.Y;\n        e.Side = ClipperLib.EdgeSide.esRight;\n        e.OutIdx = ClipperLib.ClipperBase.Unassigned;\n      }\n      lm = lm.Next;\n    }\n  };\n  ClipperLib.Clipper = function (InitOptions) // public Clipper(int InitOptions = 0)\n  {\n    if (typeof (InitOptions) == \"undefined\") InitOptions = 0;\n    this.m_PolyOuts = null;\n    this.m_ClipType = ClipperLib.ClipType.ctIntersection;\n    this.m_Scanbeam = null;\n    this.m_ActiveEdges = null;\n    this.m_SortedEdges = null;\n    this.m_IntersectList = null;\n    this.m_IntersectNodeComparer = null;\n    this.m_ExecuteLocked = false;\n    this.m_ClipFillType = ClipperLib.PolyFillType.pftEvenOdd;\n    this.m_SubjFillType = ClipperLib.PolyFillType.pftEvenOdd;\n    this.m_Joins = null;\n    this.m_GhostJoins = null;\n    this.m_UsingPolyTree = false;\n    this.ReverseSolution = false;\n    this.StrictlySimple = false;\n    ClipperLib.ClipperBase.call(this);\n    this.m_Scanbeam = null;\n    this.m_ActiveEdges = null;\n    this.m_SortedEdges = null;\n    this.m_IntersectList = new Array();\n    this.m_IntersectNodeComparer = ClipperLib.MyIntersectNodeSort.Compare;\n    this.m_ExecuteLocked = false;\n    this.m_UsingPolyTree = false;\n    this.m_PolyOuts = new Array();\n    this.m_Joins = new Array();\n    this.m_GhostJoins = new Array();\n    this.ReverseSolution = (1 & InitOptions) !== 0;\n    this.StrictlySimple = (2 & InitOptions) !== 0;\n    this.PreserveCollinear = (4 & InitOptions) !== 0;\n    if (use_xyz)\n    {\n      this.ZFillFunction = null; // function (IntPoint vert1, IntPoint vert2, ref IntPoint intersectPt);\n    }\n  };\n  ClipperLib.Clipper.ioReverseSolution = 1;\n  ClipperLib.Clipper.ioStrictlySimple = 2;\n  ClipperLib.Clipper.ioPreserveCollinear = 4;\n\n  ClipperLib.Clipper.prototype.Clear = function ()\n  {\n    if (this.m_edges.length === 0)\n      return;\n    //avoids problems with ClipperBase destructor\n    this.DisposeAllPolyPts();\n    ClipperLib.ClipperBase.prototype.Clear.call(this);\n  };\n\n  ClipperLib.Clipper.prototype.DisposeScanbeamList = function ()\n  {\n    while (this.m_Scanbeam !== null)\n    {\n      var sb2 = this.m_Scanbeam.Next;\n      this.m_Scanbeam = null;\n      this.m_Scanbeam = sb2;\n    }\n  };\n  ClipperLib.Clipper.prototype.Reset = function ()\n  {\n    ClipperLib.ClipperBase.prototype.Reset.call(this);\n    this.m_Scanbeam = null;\n    this.m_ActiveEdges = null;\n    this.m_SortedEdges = null;\n\n    var lm = this.m_MinimaList;\n    while (lm !== null)\n    {\n      this.InsertScanbeam(lm.Y);\n      lm = lm.Next;\n    }\n  };\n  ClipperLib.Clipper.prototype.InsertScanbeam = function (Y)\n  {\n    if (this.m_Scanbeam === null)\n    {\n      this.m_Scanbeam = new ClipperLib.Scanbeam();\n      this.m_Scanbeam.Next = null;\n      this.m_Scanbeam.Y = Y;\n    }\n    else if (Y > this.m_Scanbeam.Y)\n    {\n      var newSb = new ClipperLib.Scanbeam();\n      newSb.Y = Y;\n      newSb.Next = this.m_Scanbeam;\n      this.m_Scanbeam = newSb;\n    }\n    else\n    {\n      var sb2 = this.m_Scanbeam;\n      while (sb2.Next !== null && (Y <= sb2.Next.Y))\n        sb2 = sb2.Next;\n      if (Y == sb2.Y)\n        return;\n      //ie ignores duplicates\n      var newSb = new ClipperLib.Scanbeam();\n      newSb.Y = Y;\n      newSb.Next = sb2.Next;\n      sb2.Next = newSb;\n    }\n  };\n  // ************************************\n  ClipperLib.Clipper.prototype.Execute = function ()\n  {\n    var a = arguments,\n      alen = a.length,\n      ispolytree = a[1] instanceof ClipperLib.PolyTree;\n    if (alen == 4 && !ispolytree) // function (clipType, solution, subjFillType, clipFillType)\n    {\n      var clipType = a[0],\n        solution = a[1],\n        subjFillType = a[2],\n        clipFillType = a[3];\n      if (this.m_ExecuteLocked)\n        return false;\n      if (this.m_HasOpenPaths)\n        ClipperLib.Error(\"Error: PolyTree struct is need for open path clipping.\");\n      this.m_ExecuteLocked = true;\n      ClipperLib.Clear(solution);\n      this.m_SubjFillType = subjFillType;\n      this.m_ClipFillType = clipFillType;\n      this.m_ClipType = clipType;\n      this.m_UsingPolyTree = false;\n      try\n      {\n        var succeeded = this.ExecuteInternal();\n        //build the return polygons ...\n        if (succeeded) this.BuildResult(solution);\n      }\n      finally\n      {\n        this.DisposeAllPolyPts();\n        this.m_ExecuteLocked = false;\n      }\n      return succeeded;\n    }\n    else if (alen == 4 && ispolytree) // function (clipType, polytree, subjFillType, clipFillType)\n    {\n      var clipType = a[0],\n        polytree = a[1],\n        subjFillType = a[2],\n        clipFillType = a[3];\n      if (this.m_ExecuteLocked)\n        return false;\n      this.m_ExecuteLocked = true;\n      this.m_SubjFillType = subjFillType;\n      this.m_ClipFillType = clipFillType;\n      this.m_ClipType = clipType;\n      this.m_UsingPolyTree = true;\n      try\n      {\n        var succeeded = this.ExecuteInternal();\n        //build the return polygons ...\n        if (succeeded) this.BuildResult2(polytree);\n      }\n      finally\n      {\n        this.DisposeAllPolyPts();\n        this.m_ExecuteLocked = false;\n      }\n      return succeeded;\n    }\n    else if (alen == 2 && !ispolytree) // function (clipType, solution)\n    {\n      var clipType = a[0],\n        solution = a[1];\n      return this.Execute(clipType, solution, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n    }\n    else if (alen == 2 && ispolytree) // function (clipType, polytree)\n    {\n      var clipType = a[0],\n        polytree = a[1];\n      return this.Execute(clipType, polytree, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n    }\n  };\n  ClipperLib.Clipper.prototype.FixHoleLinkage = function (outRec)\n  {\n    //skip if an outermost polygon or\n    //already already points to the correct FirstLeft ...\n    if (outRec.FirstLeft === null || (outRec.IsHole != outRec.FirstLeft.IsHole && outRec.FirstLeft.Pts !== null))\n      return;\n    var orfl = outRec.FirstLeft;\n    while (orfl !== null && ((orfl.IsHole == outRec.IsHole) || orfl.Pts === null))\n      orfl = orfl.FirstLeft;\n    outRec.FirstLeft = orfl;\n  };\n  ClipperLib.Clipper.prototype.ExecuteInternal = function ()\n  {\n    try\n    {\n      this.Reset();\n      if (this.m_CurrentLM === null)\n        return false;\n      var botY = this.PopScanbeam();\n      do {\n        this.InsertLocalMinimaIntoAEL(botY);\n        ClipperLib.Clear(this.m_GhostJoins);\n        this.ProcessHorizontals(false);\n        if (this.m_Scanbeam === null)\n          break;\n        var topY = this.PopScanbeam();\n        if (!this.ProcessIntersections(topY)) return false;\n\n        this.ProcessEdgesAtTopOfScanbeam(topY);\n        botY = topY;\n      }\n      while (this.m_Scanbeam !== null || this.m_CurrentLM !== null)\n      //fix orientations ...\n      for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n      {\n        var outRec = this.m_PolyOuts[i];\n        if (outRec.Pts === null || outRec.IsOpen)\n          continue;\n        if ((outRec.IsHole ^ this.ReverseSolution) == (this.Area(outRec) > 0))\n          this.ReversePolyPtLinks(outRec.Pts);\n      }\n      this.JoinCommonEdges();\n      for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n      {\n        var outRec = this.m_PolyOuts[i];\n        if (outRec.Pts !== null && !outRec.IsOpen)\n          this.FixupOutPolygon(outRec);\n      }\n      if (this.StrictlySimple)\n        this.DoSimplePolygons();\n      return true;\n    }\n    finally\n    {\n      ClipperLib.Clear(this.m_Joins);\n      ClipperLib.Clear(this.m_GhostJoins);\n    }\n  };\n  ClipperLib.Clipper.prototype.PopScanbeam = function ()\n  {\n    var Y = this.m_Scanbeam.Y;\n    this.m_Scanbeam = this.m_Scanbeam.Next;\n    return Y;\n  };\n\n  ClipperLib.Clipper.prototype.DisposeAllPolyPts = function ()\n  {\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; ++i)\n      this.DisposeOutRec(i);\n    ClipperLib.Clear(this.m_PolyOuts);\n  };\n  ClipperLib.Clipper.prototype.DisposeOutRec = function (index)\n  {\n    var outRec = this.m_PolyOuts[index];\n    outRec.Pts = null;\n    outRec = null;\n    this.m_PolyOuts[index] = null;\n  };\n\n  ClipperLib.Clipper.prototype.AddJoin = function (Op1, Op2, OffPt)\n  {\n    var j = new ClipperLib.Join();\n    j.OutPt1 = Op1;\n    j.OutPt2 = Op2;\n    //j.OffPt = OffPt;\n    j.OffPt.X = OffPt.X;\n    j.OffPt.Y = OffPt.Y;\n    this.m_Joins.push(j);\n  };\n  ClipperLib.Clipper.prototype.AddGhostJoin = function (Op, OffPt)\n  {\n    var j = new ClipperLib.Join();\n    j.OutPt1 = Op;\n    //j.OffPt = OffPt;\n    j.OffPt.X = OffPt.X;\n    j.OffPt.Y = OffPt.Y;\n    this.m_GhostJoins.push(j);\n  };\n  if (use_xyz)\n  {\n    ClipperLib.Clipper.prototype.SetZ = function (pt, e1, e2)\n    {\n      if (this.ZFillFunction !== null)\n      {\n        if (pt.Z != 0 || this.ZFillFunction === null) return;\n        else if (ClipperLib.IntPoint.op_Equality(pt, e1.Bot)) pt.Z = e1.Bot.Z;\n        else if (ClipperLib.IntPoint.op_Equality(pt, e1.Top)) pt.Z = e1.Top.Z;\n        else if (ClipperLib.IntPoint.op_Equality(pt, e2.Bot)) pt.Z = e2.Bot.Z;\n        else if (ClipperLib.IntPoint.op_Equality(pt, e2.Top)) pt.Z = e2.Top.Z;\n        else ZFillFunction(e1.Bot, e1.Top, e2.Bot, e2.Top, pt);\n      }\n    };\n\n    //------------------------------------------------------------------------------\n  }\n\n  ClipperLib.Clipper.prototype.InsertLocalMinimaIntoAEL = function (botY)\n  {\n    while (this.m_CurrentLM !== null && (this.m_CurrentLM.Y == botY))\n    {\n      var lb = this.m_CurrentLM.LeftBound;\n      var rb = this.m_CurrentLM.RightBound;\n      this.PopLocalMinima();\n      var Op1 = null;\n      if (lb === null)\n      {\n        this.InsertEdgeIntoAEL(rb, null);\n        this.SetWindingCount(rb);\n        if (this.IsContributing(rb))\n          Op1 = this.AddOutPt(rb, rb.Bot);\n      }\n      else if (rb == null)\n      {\n        this.InsertEdgeIntoAEL(lb, null);\n        this.SetWindingCount(lb);\n        if (this.IsContributing(lb))\n          Op1 = this.AddOutPt(lb, lb.Bot);\n        this.InsertScanbeam(lb.Top.Y);\n      }\n      else\n      {\n        this.InsertEdgeIntoAEL(lb, null);\n        this.InsertEdgeIntoAEL(rb, lb);\n        this.SetWindingCount(lb);\n        rb.WindCnt = lb.WindCnt;\n        rb.WindCnt2 = lb.WindCnt2;\n        if (this.IsContributing(lb))\n          Op1 = this.AddLocalMinPoly(lb, rb, lb.Bot);\n        this.InsertScanbeam(lb.Top.Y);\n      }\n      if (rb != null)\n      {\n        if (ClipperLib.ClipperBase.IsHorizontal(rb))\n          this.AddEdgeToSEL(rb);\n        else\n          this.InsertScanbeam(rb.Top.Y);\n      }\n      if (lb == null || rb == null) continue;\n      //if output polygons share an Edge with a horizontal rb, they'll need joining later ...\n      if (Op1 !== null && ClipperLib.ClipperBase.IsHorizontal(rb) && this.m_GhostJoins.length > 0 && rb.WindDelta !== 0)\n      {\n        for (var i = 0, ilen = this.m_GhostJoins.length; i < ilen; i++)\n        {\n          //if the horizontal Rb and a 'ghost' horizontal overlap, then convert\n          //the 'ghost' join to a real join ready for later ...\n          var j = this.m_GhostJoins[i];\n\n\t\t\t\t\tif (this.HorzSegmentsOverlap(j.OutPt1.Pt.X, j.OffPt.X, rb.Bot.X, rb.Top.X))\n            this.AddJoin(j.OutPt1, Op1, j.OffPt);\n        }\n      }\n      if (lb.OutIdx >= 0 && lb.PrevInAEL !== null &&\n        lb.PrevInAEL.Curr.X == lb.Bot.X &&\n        lb.PrevInAEL.OutIdx >= 0 &&\n        ClipperLib.ClipperBase.SlopesEqual(lb.PrevInAEL, lb, this.m_UseFullRange) &&\n        lb.WindDelta !== 0 && lb.PrevInAEL.WindDelta !== 0)\n      {\n        var Op2 = this.AddOutPt(lb.PrevInAEL, lb.Bot);\n        this.AddJoin(Op1, Op2, lb.Top);\n      }\n      if (lb.NextInAEL != rb)\n      {\n        if (rb.OutIdx >= 0 && rb.PrevInAEL.OutIdx >= 0 &&\n          ClipperLib.ClipperBase.SlopesEqual(rb.PrevInAEL, rb, this.m_UseFullRange) &&\n          rb.WindDelta !== 0 && rb.PrevInAEL.WindDelta !== 0)\n        {\n          var Op2 = this.AddOutPt(rb.PrevInAEL, rb.Bot);\n          this.AddJoin(Op1, Op2, rb.Top);\n        }\n        var e = lb.NextInAEL;\n        if (e !== null)\n          while (e != rb)\n          {\n            //nb: For calculating winding counts etc, IntersectEdges() assumes\n            //that param1 will be to the right of param2 ABOVE the intersection ...\n            this.IntersectEdges(rb, e, lb.Curr, false);\n            //order important here\n            e = e.NextInAEL;\n          }\n      }\n    }\n  };\n  ClipperLib.Clipper.prototype.InsertEdgeIntoAEL = function (edge, startEdge)\n  {\n    if (this.m_ActiveEdges === null)\n    {\n      edge.PrevInAEL = null;\n      edge.NextInAEL = null;\n      this.m_ActiveEdges = edge;\n    }\n    else if (startEdge === null && this.E2InsertsBeforeE1(this.m_ActiveEdges, edge))\n    {\n      edge.PrevInAEL = null;\n      edge.NextInAEL = this.m_ActiveEdges;\n      this.m_ActiveEdges.PrevInAEL = edge;\n      this.m_ActiveEdges = edge;\n    }\n    else\n    {\n      if (startEdge === null)\n        startEdge = this.m_ActiveEdges;\n      while (startEdge.NextInAEL !== null && !this.E2InsertsBeforeE1(startEdge.NextInAEL, edge))\n        startEdge = startEdge.NextInAEL;\n      edge.NextInAEL = startEdge.NextInAEL;\n      if (startEdge.NextInAEL !== null)\n        startEdge.NextInAEL.PrevInAEL = edge;\n      edge.PrevInAEL = startEdge;\n      startEdge.NextInAEL = edge;\n    }\n  };\n  ClipperLib.Clipper.prototype.E2InsertsBeforeE1 = function (e1, e2)\n  {\n    if (e2.Curr.X == e1.Curr.X)\n    {\n      if (e2.Top.Y > e1.Top.Y)\n        return e2.Top.X < ClipperLib.Clipper.TopX(e1, e2.Top.Y);\n      else\n        return e1.Top.X > ClipperLib.Clipper.TopX(e2, e1.Top.Y);\n    }\n    else\n      return e2.Curr.X < e1.Curr.X;\n  };\n  ClipperLib.Clipper.prototype.IsEvenOddFillType = function (edge)\n  {\n    if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n      return this.m_SubjFillType == ClipperLib.PolyFillType.pftEvenOdd;\n    else\n      return this.m_ClipFillType == ClipperLib.PolyFillType.pftEvenOdd;\n  };\n  ClipperLib.Clipper.prototype.IsEvenOddAltFillType = function (edge)\n  {\n    if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n      return this.m_ClipFillType == ClipperLib.PolyFillType.pftEvenOdd;\n    else\n      return this.m_SubjFillType == ClipperLib.PolyFillType.pftEvenOdd;\n  };\n  ClipperLib.Clipper.prototype.IsContributing = function (edge)\n  {\n    var pft, pft2;\n    if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n    {\n      pft = this.m_SubjFillType;\n      pft2 = this.m_ClipFillType;\n    }\n    else\n    {\n      pft = this.m_ClipFillType;\n      pft2 = this.m_SubjFillType;\n    }\n    switch (pft)\n    {\n    case ClipperLib.PolyFillType.pftEvenOdd:\n      if (edge.WindDelta === 0 && edge.WindCnt != 1)\n        return false;\n      break;\n    case ClipperLib.PolyFillType.pftNonZero:\n      if (Math.abs(edge.WindCnt) != 1)\n        return false;\n      break;\n    case ClipperLib.PolyFillType.pftPositive:\n      if (edge.WindCnt != 1)\n        return false;\n      break;\n    default:\n      if (edge.WindCnt != -1)\n        return false;\n      break;\n    }\n    switch (this.m_ClipType)\n    {\n    case ClipperLib.ClipType.ctIntersection:\n      switch (pft2)\n      {\n      case ClipperLib.PolyFillType.pftEvenOdd:\n      case ClipperLib.PolyFillType.pftNonZero:\n        return (edge.WindCnt2 !== 0);\n      case ClipperLib.PolyFillType.pftPositive:\n        return (edge.WindCnt2 > 0);\n      default:\n        return (edge.WindCnt2 < 0);\n      }\n    case ClipperLib.ClipType.ctUnion:\n      switch (pft2)\n      {\n      case ClipperLib.PolyFillType.pftEvenOdd:\n      case ClipperLib.PolyFillType.pftNonZero:\n        return (edge.WindCnt2 === 0);\n      case ClipperLib.PolyFillType.pftPositive:\n        return (edge.WindCnt2 <= 0);\n      default:\n        return (edge.WindCnt2 >= 0);\n      }\n    case ClipperLib.ClipType.ctDifference:\n      if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n        switch (pft2)\n        {\n        case ClipperLib.PolyFillType.pftEvenOdd:\n        case ClipperLib.PolyFillType.pftNonZero:\n          return (edge.WindCnt2 === 0);\n        case ClipperLib.PolyFillType.pftPositive:\n          return (edge.WindCnt2 <= 0);\n        default:\n          return (edge.WindCnt2 >= 0);\n        }\n      else\n        switch (pft2)\n        {\n        case ClipperLib.PolyFillType.pftEvenOdd:\n        case ClipperLib.PolyFillType.pftNonZero:\n          return (edge.WindCnt2 !== 0);\n        case ClipperLib.PolyFillType.pftPositive:\n          return (edge.WindCnt2 > 0);\n        default:\n          return (edge.WindCnt2 < 0);\n        }\n    case ClipperLib.ClipType.ctXor:\n      if (edge.WindDelta === 0)\n        switch (pft2)\n        {\n        case ClipperLib.PolyFillType.pftEvenOdd:\n        case ClipperLib.PolyFillType.pftNonZero:\n          return (edge.WindCnt2 === 0);\n        case ClipperLib.PolyFillType.pftPositive:\n          return (edge.WindCnt2 <= 0);\n        default:\n          return (edge.WindCnt2 >= 0);\n        }\n      else\n        return true;\n    }\n    return true;\n  };\n  ClipperLib.Clipper.prototype.SetWindingCount = function (edge)\n  {\n    var e = edge.PrevInAEL;\n    //find the edge of the same polytype that immediately preceeds 'edge' in AEL\n    while (e !== null && ((e.PolyTyp != edge.PolyTyp) || (e.WindDelta === 0)))\n      e = e.PrevInAEL;\n    if (e === null)\n    {\n      edge.WindCnt = (edge.WindDelta === 0 ? 1 : edge.WindDelta);\n      edge.WindCnt2 = 0;\n      e = this.m_ActiveEdges;\n      //ie get ready to calc WindCnt2\n    }\n    else if (edge.WindDelta === 0 && this.m_ClipType != ClipperLib.ClipType.ctUnion)\n    {\n      edge.WindCnt = 1;\n      edge.WindCnt2 = e.WindCnt2;\n      e = e.NextInAEL;\n      //ie get ready to calc WindCnt2\n    }\n    else if (this.IsEvenOddFillType(edge))\n    {\n      //EvenOdd filling ...\n      if (edge.WindDelta === 0)\n      {\n        //are we inside a subj polygon ...\n        var Inside = true;\n        var e2 = e.PrevInAEL;\n        while (e2 !== null)\n        {\n          if (e2.PolyTyp == e.PolyTyp && e2.WindDelta !== 0)\n            Inside = !Inside;\n          e2 = e2.PrevInAEL;\n        }\n        edge.WindCnt = (Inside ? 0 : 1);\n      }\n      else\n      {\n        edge.WindCnt = edge.WindDelta;\n      }\n      edge.WindCnt2 = e.WindCnt2;\n      e = e.NextInAEL;\n      //ie get ready to calc WindCnt2\n    }\n    else\n    {\n      //nonZero, Positive or Negative filling ...\n      if (e.WindCnt * e.WindDelta < 0)\n      {\n        //prev edge is 'decreasing' WindCount (WC) toward zero\n        //so we're outside the previous polygon ...\n        if (Math.abs(e.WindCnt) > 1)\n        {\n          //outside prev poly but still inside another.\n          //when reversing direction of prev poly use the same WC\n          if (e.WindDelta * edge.WindDelta < 0)\n            edge.WindCnt = e.WindCnt;\n          else\n            edge.WindCnt = e.WindCnt + edge.WindDelta;\n        }\n        else\n          edge.WindCnt = (edge.WindDelta === 0 ? 1 : edge.WindDelta);\n      }\n      else\n      {\n        //prev edge is 'increasing' WindCount (WC) away from zero\n        //so we're inside the previous polygon ...\n        if (edge.WindDelta === 0)\n          edge.WindCnt = (e.WindCnt < 0 ? e.WindCnt - 1 : e.WindCnt + 1);\n        else if (e.WindDelta * edge.WindDelta < 0)\n          edge.WindCnt = e.WindCnt;\n        else\n          edge.WindCnt = e.WindCnt + edge.WindDelta;\n      }\n      edge.WindCnt2 = e.WindCnt2;\n      e = e.NextInAEL;\n      //ie get ready to calc WindCnt2\n    }\n    //update WindCnt2 ...\n    if (this.IsEvenOddAltFillType(edge))\n    {\n      //EvenOdd filling ...\n      while (e != edge)\n      {\n        if (e.WindDelta !== 0)\n          edge.WindCnt2 = (edge.WindCnt2 === 0 ? 1 : 0);\n        e = e.NextInAEL;\n      }\n    }\n    else\n    {\n      //nonZero, Positive or Negative filling ...\n      while (e != edge)\n      {\n        edge.WindCnt2 += e.WindDelta;\n        e = e.NextInAEL;\n      }\n    }\n  };\n  ClipperLib.Clipper.prototype.AddEdgeToSEL = function (edge)\n  {\n    //SEL pointers in PEdge are reused to build a list of horizontal edges.\n    //However, we don't need to worry about order with horizontal edge processing.\n    if (this.m_SortedEdges === null)\n    {\n      this.m_SortedEdges = edge;\n      edge.PrevInSEL = null;\n      edge.NextInSEL = null;\n    }\n    else\n    {\n      edge.NextInSEL = this.m_SortedEdges;\n      edge.PrevInSEL = null;\n      this.m_SortedEdges.PrevInSEL = edge;\n      this.m_SortedEdges = edge;\n    }\n  };\n  ClipperLib.Clipper.prototype.CopyAELToSEL = function ()\n  {\n    var e = this.m_ActiveEdges;\n    this.m_SortedEdges = e;\n    while (e !== null)\n    {\n      e.PrevInSEL = e.PrevInAEL;\n      e.NextInSEL = e.NextInAEL;\n      e = e.NextInAEL;\n    }\n  };\n  ClipperLib.Clipper.prototype.SwapPositionsInAEL = function (edge1, edge2)\n  {\n    //check that one or other edge hasn't already been removed from AEL ...\n    if (edge1.NextInAEL == edge1.PrevInAEL || edge2.NextInAEL == edge2.PrevInAEL)\n      return;\n    if (edge1.NextInAEL == edge2)\n    {\n      var next = edge2.NextInAEL;\n      if (next !== null)\n        next.PrevInAEL = edge1;\n      var prev = edge1.PrevInAEL;\n      if (prev !== null)\n        prev.NextInAEL = edge2;\n      edge2.PrevInAEL = prev;\n      edge2.NextInAEL = edge1;\n      edge1.PrevInAEL = edge2;\n      edge1.NextInAEL = next;\n    }\n    else if (edge2.NextInAEL == edge1)\n    {\n      var next = edge1.NextInAEL;\n      if (next !== null)\n        next.PrevInAEL = edge2;\n      var prev = edge2.PrevInAEL;\n      if (prev !== null)\n        prev.NextInAEL = edge1;\n      edge1.PrevInAEL = prev;\n      edge1.NextInAEL = edge2;\n      edge2.PrevInAEL = edge1;\n      edge2.NextInAEL = next;\n    }\n    else\n    {\n      var next = edge1.NextInAEL;\n      var prev = edge1.PrevInAEL;\n      edge1.NextInAEL = edge2.NextInAEL;\n      if (edge1.NextInAEL !== null)\n        edge1.NextInAEL.PrevInAEL = edge1;\n      edge1.PrevInAEL = edge2.PrevInAEL;\n      if (edge1.PrevInAEL !== null)\n        edge1.PrevInAEL.NextInAEL = edge1;\n      edge2.NextInAEL = next;\n      if (edge2.NextInAEL !== null)\n        edge2.NextInAEL.PrevInAEL = edge2;\n      edge2.PrevInAEL = prev;\n      if (edge2.PrevInAEL !== null)\n        edge2.PrevInAEL.NextInAEL = edge2;\n    }\n    if (edge1.PrevInAEL === null)\n      this.m_ActiveEdges = edge1;\n    else if (edge2.PrevInAEL === null)\n      this.m_ActiveEdges = edge2;\n  };\n  ClipperLib.Clipper.prototype.SwapPositionsInSEL = function (edge1, edge2)\n  {\n    if (edge1.NextInSEL === null && edge1.PrevInSEL === null)\n      return;\n    if (edge2.NextInSEL === null && edge2.PrevInSEL === null)\n      return;\n    if (edge1.NextInSEL == edge2)\n    {\n      var next = edge2.NextInSEL;\n      if (next !== null)\n        next.PrevInSEL = edge1;\n      var prev = edge1.PrevInSEL;\n      if (prev !== null)\n        prev.NextInSEL = edge2;\n      edge2.PrevInSEL = prev;\n      edge2.NextInSEL = edge1;\n      edge1.PrevInSEL = edge2;\n      edge1.NextInSEL = next;\n    }\n    else if (edge2.NextInSEL == edge1)\n    {\n      var next = edge1.NextInSEL;\n      if (next !== null)\n        next.PrevInSEL = edge2;\n      var prev = edge2.PrevInSEL;\n      if (prev !== null)\n        prev.NextInSEL = edge1;\n      edge1.PrevInSEL = prev;\n      edge1.NextInSEL = edge2;\n      edge2.PrevInSEL = edge1;\n      edge2.NextInSEL = next;\n    }\n    else\n    {\n      var next = edge1.NextInSEL;\n      var prev = edge1.PrevInSEL;\n      edge1.NextInSEL = edge2.NextInSEL;\n      if (edge1.NextInSEL !== null)\n        edge1.NextInSEL.PrevInSEL = edge1;\n      edge1.PrevInSEL = edge2.PrevInSEL;\n      if (edge1.PrevInSEL !== null)\n        edge1.PrevInSEL.NextInSEL = edge1;\n      edge2.NextInSEL = next;\n      if (edge2.NextInSEL !== null)\n        edge2.NextInSEL.PrevInSEL = edge2;\n      edge2.PrevInSEL = prev;\n      if (edge2.PrevInSEL !== null)\n        edge2.PrevInSEL.NextInSEL = edge2;\n    }\n    if (edge1.PrevInSEL === null)\n      this.m_SortedEdges = edge1;\n    else if (edge2.PrevInSEL === null)\n      this.m_SortedEdges = edge2;\n  };\n  ClipperLib.Clipper.prototype.AddLocalMaxPoly = function (e1, e2, pt)\n  {\n    this.AddOutPt(e1, pt);\n    if (e2.WindDelta == 0) this.AddOutPt(e2, pt);\n    if (e1.OutIdx == e2.OutIdx)\n    {\n      e1.OutIdx = -1;\n      e2.OutIdx = -1;\n    }\n    else if (e1.OutIdx < e2.OutIdx)\n      this.AppendPolygon(e1, e2);\n    else\n      this.AppendPolygon(e2, e1);\n  };\n  ClipperLib.Clipper.prototype.AddLocalMinPoly = function (e1, e2, pt)\n  {\n    var result;\n    var e, prevE;\n    if (ClipperLib.ClipperBase.IsHorizontal(e2) || (e1.Dx > e2.Dx))\n    {\n      result = this.AddOutPt(e1, pt);\n      e2.OutIdx = e1.OutIdx;\n      e1.Side = ClipperLib.EdgeSide.esLeft;\n      e2.Side = ClipperLib.EdgeSide.esRight;\n      e = e1;\n      if (e.PrevInAEL == e2)\n        prevE = e2.PrevInAEL;\n      else\n        prevE = e.PrevInAEL;\n    }\n    else\n    {\n      result = this.AddOutPt(e2, pt);\n      e1.OutIdx = e2.OutIdx;\n      e1.Side = ClipperLib.EdgeSide.esRight;\n      e2.Side = ClipperLib.EdgeSide.esLeft;\n      e = e2;\n      if (e.PrevInAEL == e1)\n        prevE = e1.PrevInAEL;\n      else\n        prevE = e.PrevInAEL;\n    }\n    if (prevE !== null && prevE.OutIdx >= 0 && (ClipperLib.Clipper.TopX(prevE, pt.Y) == ClipperLib.Clipper.TopX(e, pt.Y)) && ClipperLib.ClipperBase.SlopesEqual(e, prevE, this.m_UseFullRange) && (e.WindDelta !== 0) && (prevE.WindDelta !== 0))\n    {\n      var outPt = this.AddOutPt(prevE, pt);\n      this.AddJoin(result, outPt, e.Top);\n    }\n    return result;\n  };\n  ClipperLib.Clipper.prototype.CreateOutRec = function ()\n  {\n    var result = new ClipperLib.OutRec();\n    result.Idx = -1;\n    result.IsHole = false;\n    result.IsOpen = false;\n    result.FirstLeft = null;\n    result.Pts = null;\n    result.BottomPt = null;\n    result.PolyNode = null;\n    this.m_PolyOuts.push(result);\n    result.Idx = this.m_PolyOuts.length - 1;\n    return result;\n  };\n  ClipperLib.Clipper.prototype.AddOutPt = function (e, pt)\n  {\n    var ToFront = (e.Side == ClipperLib.EdgeSide.esLeft);\n    if (e.OutIdx < 0)\n    {\n      var outRec = this.CreateOutRec();\n      outRec.IsOpen = (e.WindDelta === 0);\n      var newOp = new ClipperLib.OutPt();\n      outRec.Pts = newOp;\n      newOp.Idx = outRec.Idx;\n      //newOp.Pt = pt;\n      newOp.Pt.X = pt.X;\n      newOp.Pt.Y = pt.Y;\n      newOp.Next = newOp;\n      newOp.Prev = newOp;\n      if (!outRec.IsOpen)\n        this.SetHoleState(e, outRec);\n      e.OutIdx = outRec.Idx;\n      //nb: do this after SetZ !\n      return newOp;\n    }\n    else\n    {\n      var outRec = this.m_PolyOuts[e.OutIdx];\n      //OutRec.Pts is the 'Left-most' point & OutRec.Pts.Prev is the 'Right-most'\n      var op = outRec.Pts;\n      if (ToFront && ClipperLib.IntPoint.op_Equality(pt, op.Pt))\n        return op;\n      else if (!ToFront && ClipperLib.IntPoint.op_Equality(pt, op.Prev.Pt))\n        return op.Prev;\n      var newOp = new ClipperLib.OutPt();\n      newOp.Idx = outRec.Idx;\n      //newOp.Pt = pt;\n      newOp.Pt.X = pt.X;\n      newOp.Pt.Y = pt.Y;\n      newOp.Next = op;\n      newOp.Prev = op.Prev;\n      newOp.Prev.Next = newOp;\n      op.Prev = newOp;\n      if (ToFront)\n        outRec.Pts = newOp;\n      return newOp;\n    }\n  };\n  ClipperLib.Clipper.prototype.SwapPoints = function (pt1, pt2)\n  {\n    var tmp = new ClipperLib.IntPoint(pt1.Value);\n    //pt1.Value = pt2.Value;\n    pt1.Value.X = pt2.Value.X;\n    pt1.Value.Y = pt2.Value.Y;\n    //pt2.Value = tmp;\n    pt2.Value.X = tmp.X;\n    pt2.Value.Y = tmp.Y;\n  };\n  ClipperLib.Clipper.prototype.HorzSegmentsOverlap = function (seg1a, seg1b, seg2a, seg2b)\n\t{\n\t\tvar tmp;\n\t\tif (seg1a > seg1b)\n\t\t{\n\t\t\ttmp = seg1a;\n\t\t\tseg1a = seg1b;\n\t\t\tseg1b = tmp;\n\t\t}\n\t\tif (seg2a > seg2b)\n\t\t{\n\t\t\ttmp = seg2a;\n\t\t\tseg2a = seg2b;\n\t\t\tseg2b = tmp;\n\t\t}\n\t\treturn (seg1a < seg2b) && (seg2a < seg1b);\n\t}\n\n  ClipperLib.Clipper.prototype.SetHoleState = function (e, outRec)\n  {\n    var isHole = false;\n    var e2 = e.PrevInAEL;\n    while (e2 !== null)\n    {\n      if (e2.OutIdx >= 0 && e2.WindDelta != 0)\n      {\n        isHole = !isHole;\n        if (outRec.FirstLeft === null)\n          outRec.FirstLeft = this.m_PolyOuts[e2.OutIdx];\n      }\n      e2 = e2.PrevInAEL;\n    }\n    if (isHole)\n      outRec.IsHole = true;\n  };\n  ClipperLib.Clipper.prototype.GetDx = function (pt1, pt2)\n  {\n    if (pt1.Y == pt2.Y)\n      return ClipperLib.ClipperBase.horizontal;\n    else\n      return (pt2.X - pt1.X) / (pt2.Y - pt1.Y);\n  };\n  ClipperLib.Clipper.prototype.FirstIsBottomPt = function (btmPt1, btmPt2)\n  {\n    var p = btmPt1.Prev;\n    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt1.Pt)) && (p != btmPt1))\n      p = p.Prev;\n    var dx1p = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n    p = btmPt1.Next;\n    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt1.Pt)) && (p != btmPt1))\n      p = p.Next;\n    var dx1n = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n    p = btmPt2.Prev;\n    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt2.Pt)) && (p != btmPt2))\n      p = p.Prev;\n    var dx2p = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n    p = btmPt2.Next;\n    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt2.Pt)) && (p != btmPt2))\n      p = p.Next;\n    var dx2n = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n    return (dx1p >= dx2p && dx1p >= dx2n) || (dx1n >= dx2p && dx1n >= dx2n);\n  };\n  ClipperLib.Clipper.prototype.GetBottomPt = function (pp)\n  {\n    var dups = null;\n    var p = pp.Next;\n    while (p != pp)\n    {\n      if (p.Pt.Y > pp.Pt.Y)\n      {\n        pp = p;\n        dups = null;\n      }\n      else if (p.Pt.Y == pp.Pt.Y && p.Pt.X <= pp.Pt.X)\n      {\n        if (p.Pt.X < pp.Pt.X)\n        {\n          dups = null;\n          pp = p;\n        }\n        else\n        {\n          if (p.Next != pp && p.Prev != pp)\n            dups = p;\n        }\n      }\n      p = p.Next;\n    }\n    if (dups !== null)\n    {\n      //there appears to be at least 2 vertices at bottomPt so ...\n      while (dups != p)\n      {\n        if (!this.FirstIsBottomPt(p, dups))\n          pp = dups;\n        dups = dups.Next;\n        while (ClipperLib.IntPoint.op_Inequality(dups.Pt, pp.Pt))\n          dups = dups.Next;\n      }\n    }\n    return pp;\n  };\n  ClipperLib.Clipper.prototype.GetLowermostRec = function (outRec1, outRec2)\n  {\n    //work out which polygon fragment has the correct hole state ...\n    if (outRec1.BottomPt === null)\n      outRec1.BottomPt = this.GetBottomPt(outRec1.Pts);\n    if (outRec2.BottomPt === null)\n      outRec2.BottomPt = this.GetBottomPt(outRec2.Pts);\n    var bPt1 = outRec1.BottomPt;\n    var bPt2 = outRec2.BottomPt;\n    if (bPt1.Pt.Y > bPt2.Pt.Y)\n      return outRec1;\n    else if (bPt1.Pt.Y < bPt2.Pt.Y)\n      return outRec2;\n    else if (bPt1.Pt.X < bPt2.Pt.X)\n      return outRec1;\n    else if (bPt1.Pt.X > bPt2.Pt.X)\n      return outRec2;\n    else if (bPt1.Next == bPt1)\n      return outRec2;\n    else if (bPt2.Next == bPt2)\n      return outRec1;\n    else if (this.FirstIsBottomPt(bPt1, bPt2))\n      return outRec1;\n    else\n      return outRec2;\n  };\n  ClipperLib.Clipper.prototype.Param1RightOfParam2 = function (outRec1, outRec2)\n  {\n    do {\n      outRec1 = outRec1.FirstLeft;\n      if (outRec1 == outRec2)\n        return true;\n    }\n    while (outRec1 !== null)\n    return false;\n  };\n  ClipperLib.Clipper.prototype.GetOutRec = function (idx)\n  {\n    var outrec = this.m_PolyOuts[idx];\n    while (outrec != this.m_PolyOuts[outrec.Idx])\n      outrec = this.m_PolyOuts[outrec.Idx];\n    return outrec;\n  };\n  ClipperLib.Clipper.prototype.AppendPolygon = function (e1, e2)\n  {\n    //get the start and ends of both output polygons ...\n    var outRec1 = this.m_PolyOuts[e1.OutIdx];\n    var outRec2 = this.m_PolyOuts[e2.OutIdx];\n    var holeStateRec;\n    if (this.Param1RightOfParam2(outRec1, outRec2))\n      holeStateRec = outRec2;\n    else if (this.Param1RightOfParam2(outRec2, outRec1))\n      holeStateRec = outRec1;\n    else\n      holeStateRec = this.GetLowermostRec(outRec1, outRec2);\n    var p1_lft = outRec1.Pts;\n    var p1_rt = p1_lft.Prev;\n    var p2_lft = outRec2.Pts;\n    var p2_rt = p2_lft.Prev;\n    var side;\n    //join e2 poly onto e1 poly and delete pointers to e2 ...\n    if (e1.Side == ClipperLib.EdgeSide.esLeft)\n    {\n      if (e2.Side == ClipperLib.EdgeSide.esLeft)\n      {\n        //z y x a b c\n        this.ReversePolyPtLinks(p2_lft);\n        p2_lft.Next = p1_lft;\n        p1_lft.Prev = p2_lft;\n        p1_rt.Next = p2_rt;\n        p2_rt.Prev = p1_rt;\n        outRec1.Pts = p2_rt;\n      }\n      else\n      {\n        //x y z a b c\n        p2_rt.Next = p1_lft;\n        p1_lft.Prev = p2_rt;\n        p2_lft.Prev = p1_rt;\n        p1_rt.Next = p2_lft;\n        outRec1.Pts = p2_lft;\n      }\n      side = ClipperLib.EdgeSide.esLeft;\n    }\n    else\n    {\n      if (e2.Side == ClipperLib.EdgeSide.esRight)\n      {\n        //a b c z y x\n        this.ReversePolyPtLinks(p2_lft);\n        p1_rt.Next = p2_rt;\n        p2_rt.Prev = p1_rt;\n        p2_lft.Next = p1_lft;\n        p1_lft.Prev = p2_lft;\n      }\n      else\n      {\n        //a b c x y z\n        p1_rt.Next = p2_lft;\n        p2_lft.Prev = p1_rt;\n        p1_lft.Prev = p2_rt;\n        p2_rt.Next = p1_lft;\n      }\n      side = ClipperLib.EdgeSide.esRight;\n    }\n    outRec1.BottomPt = null;\n    if (holeStateRec == outRec2)\n    {\n      if (outRec2.FirstLeft != outRec1)\n        outRec1.FirstLeft = outRec2.FirstLeft;\n      outRec1.IsHole = outRec2.IsHole;\n    }\n    outRec2.Pts = null;\n    outRec2.BottomPt = null;\n    outRec2.FirstLeft = outRec1;\n    var OKIdx = e1.OutIdx;\n    var ObsoleteIdx = e2.OutIdx;\n    e1.OutIdx = -1;\n    //nb: safe because we only get here via AddLocalMaxPoly\n    e2.OutIdx = -1;\n    var e = this.m_ActiveEdges;\n    while (e !== null)\n    {\n      if (e.OutIdx == ObsoleteIdx)\n      {\n        e.OutIdx = OKIdx;\n        e.Side = side;\n        break;\n      }\n      e = e.NextInAEL;\n    }\n    outRec2.Idx = outRec1.Idx;\n  };\n  ClipperLib.Clipper.prototype.ReversePolyPtLinks = function (pp)\n  {\n    if (pp === null)\n      return;\n    var pp1;\n    var pp2;\n    pp1 = pp;\n    do {\n      pp2 = pp1.Next;\n      pp1.Next = pp1.Prev;\n      pp1.Prev = pp2;\n      pp1 = pp2;\n    }\n    while (pp1 != pp)\n  };\n  ClipperLib.Clipper.SwapSides = function (edge1, edge2)\n  {\n    var side = edge1.Side;\n    edge1.Side = edge2.Side;\n    edge2.Side = side;\n  };\n  ClipperLib.Clipper.SwapPolyIndexes = function (edge1, edge2)\n  {\n    var outIdx = edge1.OutIdx;\n    edge1.OutIdx = edge2.OutIdx;\n    edge2.OutIdx = outIdx;\n  };\n  ClipperLib.Clipper.prototype.IntersectEdges = function (e1, e2, pt)\n  {\n    //e1 will be to the left of e2 BELOW the intersection. Therefore e1 is before\n    //e2 in AEL except when e1 is being inserted at the intersection point ...\n    var e1Contributing = (e1.OutIdx >= 0);\n    var e2Contributing = (e2.OutIdx >= 0);\n\n    if (use_xyz)\n    \tthis.SetZ(pt, e1, e2);\n\n    if (use_lines)\n    {\n      //if either edge is on an OPEN path ...\n      if (e1.WindDelta === 0 || e2.WindDelta === 0)\n      {\n        //ignore subject-subject open path intersections UNLESS they\n        //are both open paths, AND they are both 'contributing maximas' ...\n\t\t\t\tif (e1.WindDelta == 0 && e2.WindDelta == 0) return;\n        //if intersecting a subj line with a subj poly ...\n        else if (e1.PolyTyp == e2.PolyTyp &&\n          e1.WindDelta != e2.WindDelta && this.m_ClipType == ClipperLib.ClipType.ctUnion)\n        {\n          if (e1.WindDelta === 0)\n          {\n            if (e2Contributing)\n            {\n              this.AddOutPt(e1, pt);\n              if (e1Contributing)\n                e1.OutIdx = -1;\n            }\n          }\n          else\n          {\n            if (e1Contributing)\n            {\n              this.AddOutPt(e2, pt);\n              if (e2Contributing)\n                e2.OutIdx = -1;\n            }\n          }\n        }\n        else if (e1.PolyTyp != e2.PolyTyp)\n        {\n          if ((e1.WindDelta === 0) && Math.abs(e2.WindCnt) == 1 &&\n            (this.m_ClipType != ClipperLib.ClipType.ctUnion || e2.WindCnt2 === 0))\n          {\n            this.AddOutPt(e1, pt);\n            if (e1Contributing)\n              e1.OutIdx = -1;\n          }\n          else if ((e2.WindDelta === 0) && (Math.abs(e1.WindCnt) == 1) &&\n            (this.m_ClipType != ClipperLib.ClipType.ctUnion || e1.WindCnt2 === 0))\n          {\n            this.AddOutPt(e2, pt);\n            if (e2Contributing)\n              e2.OutIdx = -1;\n          }\n        }\n        return;\n      }\n    }\n    //update winding counts...\n    //assumes that e1 will be to the Right of e2 ABOVE the intersection\n    if (e1.PolyTyp == e2.PolyTyp)\n    {\n      if (this.IsEvenOddFillType(e1))\n      {\n        var oldE1WindCnt = e1.WindCnt;\n        e1.WindCnt = e2.WindCnt;\n        e2.WindCnt = oldE1WindCnt;\n      }\n      else\n      {\n        if (e1.WindCnt + e2.WindDelta === 0)\n          e1.WindCnt = -e1.WindCnt;\n        else\n          e1.WindCnt += e2.WindDelta;\n        if (e2.WindCnt - e1.WindDelta === 0)\n          e2.WindCnt = -e2.WindCnt;\n        else\n          e2.WindCnt -= e1.WindDelta;\n      }\n    }\n    else\n    {\n      if (!this.IsEvenOddFillType(e2))\n        e1.WindCnt2 += e2.WindDelta;\n      else\n        e1.WindCnt2 = (e1.WindCnt2 === 0) ? 1 : 0;\n      if (!this.IsEvenOddFillType(e1))\n        e2.WindCnt2 -= e1.WindDelta;\n      else\n        e2.WindCnt2 = (e2.WindCnt2 === 0) ? 1 : 0;\n    }\n    var e1FillType, e2FillType, e1FillType2, e2FillType2;\n    if (e1.PolyTyp == ClipperLib.PolyType.ptSubject)\n    {\n      e1FillType = this.m_SubjFillType;\n      e1FillType2 = this.m_ClipFillType;\n    }\n    else\n    {\n      e1FillType = this.m_ClipFillType;\n      e1FillType2 = this.m_SubjFillType;\n    }\n    if (e2.PolyTyp == ClipperLib.PolyType.ptSubject)\n    {\n      e2FillType = this.m_SubjFillType;\n      e2FillType2 = this.m_ClipFillType;\n    }\n    else\n    {\n      e2FillType = this.m_ClipFillType;\n      e2FillType2 = this.m_SubjFillType;\n    }\n    var e1Wc, e2Wc;\n    switch (e1FillType)\n    {\n    case ClipperLib.PolyFillType.pftPositive:\n      e1Wc = e1.WindCnt;\n      break;\n    case ClipperLib.PolyFillType.pftNegative:\n      e1Wc = -e1.WindCnt;\n      break;\n    default:\n      e1Wc = Math.abs(e1.WindCnt);\n      break;\n    }\n    switch (e2FillType)\n    {\n    case ClipperLib.PolyFillType.pftPositive:\n      e2Wc = e2.WindCnt;\n      break;\n    case ClipperLib.PolyFillType.pftNegative:\n      e2Wc = -e2.WindCnt;\n      break;\n    default:\n      e2Wc = Math.abs(e2.WindCnt);\n      break;\n    }\n    if (e1Contributing && e2Contributing)\n    {\n\t\t\tif ((e1Wc != 0 && e1Wc != 1) || (e2Wc != 0 && e2Wc != 1) ||\n\t\t\t(e1.PolyTyp != e2.PolyTyp && this.m_ClipType != ClipperLib.ClipType.ctXor))\n\t\t\t{\n\t\t\t\tthis.AddLocalMaxPoly(e1, e2, pt);\n\t\t\t}\n      else\n      {\n        this.AddOutPt(e1, pt);\n        this.AddOutPt(e2, pt);\n        ClipperLib.Clipper.SwapSides(e1, e2);\n        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n      }\n    }\n    else if (e1Contributing)\n    {\n      if (e2Wc === 0 || e2Wc == 1)\n      {\n        this.AddOutPt(e1, pt);\n        ClipperLib.Clipper.SwapSides(e1, e2);\n        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n      }\n    }\n    else if (e2Contributing)\n    {\n      if (e1Wc === 0 || e1Wc == 1)\n      {\n        this.AddOutPt(e2, pt);\n        ClipperLib.Clipper.SwapSides(e1, e2);\n        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n      }\n    }\n\t\telse if ( (e1Wc == 0 || e1Wc == 1) && (e2Wc == 0 || e2Wc == 1))\n    {\n      //neither edge is currently contributing ...\n      var e1Wc2, e2Wc2;\n      switch (e1FillType2)\n      {\n      case ClipperLib.PolyFillType.pftPositive:\n        e1Wc2 = e1.WindCnt2;\n        break;\n      case ClipperLib.PolyFillType.pftNegative:\n        e1Wc2 = -e1.WindCnt2;\n        break;\n      default:\n        e1Wc2 = Math.abs(e1.WindCnt2);\n        break;\n      }\n      switch (e2FillType2)\n      {\n      case ClipperLib.PolyFillType.pftPositive:\n        e2Wc2 = e2.WindCnt2;\n        break;\n      case ClipperLib.PolyFillType.pftNegative:\n        e2Wc2 = -e2.WindCnt2;\n        break;\n      default:\n        e2Wc2 = Math.abs(e2.WindCnt2);\n        break;\n      }\n      if (e1.PolyTyp != e2.PolyTyp)\n      {\n        this.AddLocalMinPoly(e1, e2, pt);\n      }\n      else if (e1Wc == 1 && e2Wc == 1)\n        switch (this.m_ClipType)\n        {\n        case ClipperLib.ClipType.ctIntersection:\n          if (e1Wc2 > 0 && e2Wc2 > 0)\n            this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        case ClipperLib.ClipType.ctUnion:\n          if (e1Wc2 <= 0 && e2Wc2 <= 0)\n            this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        case ClipperLib.ClipType.ctDifference:\n          if (((e1.PolyTyp == ClipperLib.PolyType.ptClip) && (e1Wc2 > 0) && (e2Wc2 > 0)) ||\n            ((e1.PolyTyp == ClipperLib.PolyType.ptSubject) && (e1Wc2 <= 0) && (e2Wc2 <= 0)))\n            this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        case ClipperLib.ClipType.ctXor:\n          this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        }\n      else\n        ClipperLib.Clipper.SwapSides(e1, e2);\n    }\n  };\n  ClipperLib.Clipper.prototype.DeleteFromAEL = function (e)\n  {\n    var AelPrev = e.PrevInAEL;\n    var AelNext = e.NextInAEL;\n    if (AelPrev === null && AelNext === null && (e != this.m_ActiveEdges))\n      return;\n    //already deleted\n    if (AelPrev !== null)\n      AelPrev.NextInAEL = AelNext;\n    else\n      this.m_ActiveEdges = AelNext;\n    if (AelNext !== null)\n      AelNext.PrevInAEL = AelPrev;\n    e.NextInAEL = null;\n    e.PrevInAEL = null;\n  };\n  ClipperLib.Clipper.prototype.DeleteFromSEL = function (e)\n  {\n    var SelPrev = e.PrevInSEL;\n    var SelNext = e.NextInSEL;\n    if (SelPrev === null && SelNext === null && (e != this.m_SortedEdges))\n      return;\n    //already deleted\n    if (SelPrev !== null)\n      SelPrev.NextInSEL = SelNext;\n    else\n      this.m_SortedEdges = SelNext;\n    if (SelNext !== null)\n      SelNext.PrevInSEL = SelPrev;\n    e.NextInSEL = null;\n    e.PrevInSEL = null;\n  };\n  ClipperLib.Clipper.prototype.UpdateEdgeIntoAEL = function (e)\n  {\n    if (e.NextInLML === null)\n      ClipperLib.Error(\"UpdateEdgeIntoAEL: invalid call\");\n    var AelPrev = e.PrevInAEL;\n    var AelNext = e.NextInAEL;\n    e.NextInLML.OutIdx = e.OutIdx;\n    if (AelPrev !== null)\n      AelPrev.NextInAEL = e.NextInLML;\n    else\n      this.m_ActiveEdges = e.NextInLML;\n    if (AelNext !== null)\n      AelNext.PrevInAEL = e.NextInLML;\n    e.NextInLML.Side = e.Side;\n    e.NextInLML.WindDelta = e.WindDelta;\n    e.NextInLML.WindCnt = e.WindCnt;\n    e.NextInLML.WindCnt2 = e.WindCnt2;\n    e = e.NextInLML;\n    //    e.Curr = e.Bot;\n    e.Curr.X = e.Bot.X;\n    e.Curr.Y = e.Bot.Y;\n    e.PrevInAEL = AelPrev;\n    e.NextInAEL = AelNext;\n    if (!ClipperLib.ClipperBase.IsHorizontal(e))\n      this.InsertScanbeam(e.Top.Y);\n    return e;\n  };\n  ClipperLib.Clipper.prototype.ProcessHorizontals = function (isTopOfScanbeam)\n  {\n    var horzEdge = this.m_SortedEdges;\n    while (horzEdge !== null)\n    {\n      this.DeleteFromSEL(horzEdge);\n      this.ProcessHorizontal(horzEdge, isTopOfScanbeam);\n      horzEdge = this.m_SortedEdges;\n    }\n  };\n  ClipperLib.Clipper.prototype.GetHorzDirection = function (HorzEdge, $var)\n  {\n    if (HorzEdge.Bot.X < HorzEdge.Top.X)\n    {\n        $var.Left = HorzEdge.Bot.X;\n        $var.Right = HorzEdge.Top.X;\n        $var.Dir = ClipperLib.Direction.dLeftToRight;\n    }\n    else\n    {\n        $var.Left = HorzEdge.Top.X;\n        $var.Right = HorzEdge.Bot.X;\n        $var.Dir = ClipperLib.Direction.dRightToLeft;\n    }\n  };\n  ClipperLib.Clipper.prototype.ProcessHorizontal = function (horzEdge, isTopOfScanbeam)\n  {\n    var $var = {Dir: null, Left: null, Right: null};\n    this.GetHorzDirection(horzEdge, $var);\n    var dir = $var.Dir;\n    var horzLeft = $var.Left;\n    var horzRight = $var.Right;\n\n    var eLastHorz = horzEdge,\n      eMaxPair = null;\n    while (eLastHorz.NextInLML !== null && ClipperLib.ClipperBase.IsHorizontal(eLastHorz.NextInLML))\n      eLastHorz = eLastHorz.NextInLML;\n    if (eLastHorz.NextInLML === null)\n      eMaxPair = this.GetMaximaPair(eLastHorz);\n    for (;;)\n    {\n      var IsLastHorz = (horzEdge == eLastHorz);\n      var e = this.GetNextInAEL(horzEdge, dir);\n      while (e !== null)\n      {\n        //Break if we've got to the end of an intermediate horizontal edge ...\n        //nb: Smaller Dx's are to the right of larger Dx's ABOVE the horizontal.\n        if (e.Curr.X == horzEdge.Top.X && horzEdge.NextInLML !== null && e.Dx < horzEdge.NextInLML.Dx)\n          break;\n        var eNext = this.GetNextInAEL(e, dir);\n        //saves eNext for later\n        if ((dir == ClipperLib.Direction.dLeftToRight && e.Curr.X <= horzRight) || (dir == ClipperLib.Direction.dRightToLeft && e.Curr.X >= horzLeft))\n        {\n          //so far we're still in range of the horizontal Edge  but make sure\n          //we're at the last of consec. horizontals when matching with eMaxPair\n          if (e == eMaxPair && IsLastHorz)\n          {\n\t\t\t\t\t\tif (horzEdge.OutIdx >= 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar op1 = this.AddOutPt(horzEdge, horzEdge.Top);\n\t\t\t\t\t\t\tvar eNextHorz = this.m_SortedEdges;\n\t\t\t\t\t\t\twhile (eNextHorz !== null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (eNextHorz.OutIdx >= 0 &&\n\t\t\t\t\t\t\t\t\tthis.HorzSegmentsOverlap(horzEdge.Bot.X,\n\t\t\t\t\t\t\t\t\thorzEdge.Top.X, eNextHorz.Bot.X, eNextHorz.Top.X))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar op2 = this.AddOutPt(eNextHorz, eNextHorz.Bot);\n\t\t\t\t\t\t\t\t\tthis.AddJoin(op2, op1, eNextHorz.Top);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\teNextHorz = eNextHorz.NextInSEL;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.AddGhostJoin(op1, horzEdge.Bot);\n\t\t\t\t\t\t\tthis.AddLocalMaxPoly(horzEdge, eMaxPair, horzEdge.Top);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.DeleteFromAEL(horzEdge);\n\t\t\t\t\t\tthis.DeleteFromAEL(eMaxPair);\n            return;\n          }\n          else if (dir == ClipperLib.Direction.dLeftToRight)\n          {\n            var Pt = new ClipperLib.IntPoint(e.Curr.X, horzEdge.Curr.Y);\n            this.IntersectEdges(horzEdge, e, Pt);\n          }\n          else\n          {\n            var Pt = new ClipperLib.IntPoint(e.Curr.X, horzEdge.Curr.Y);\n            this.IntersectEdges(e, horzEdge, Pt);\n          }\n          this.SwapPositionsInAEL(horzEdge, e);\n        }\n        else if ((dir == ClipperLib.Direction.dLeftToRight && e.Curr.X >= horzRight) || (dir == ClipperLib.Direction.dRightToLeft && e.Curr.X <= horzLeft))\n          break;\n        e = eNext;\n      }\n      //end while\n      if (horzEdge.NextInLML !== null && ClipperLib.ClipperBase.IsHorizontal(horzEdge.NextInLML))\n      {\n        horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n        if (horzEdge.OutIdx >= 0)\n          this.AddOutPt(horzEdge, horzEdge.Bot);\n\n          var $var = {Dir: dir, Left: horzLeft, Right: horzRight};\n          this.GetHorzDirection(horzEdge, $var);\n          dir = $var.Dir;\n          horzLeft = $var.Left;\n          horzRight = $var.Right;\n      }\n      else\n        break;\n    }\n    //end for (;;)\n    if (horzEdge.NextInLML !== null)\n    {\n      if (horzEdge.OutIdx >= 0)\n      {\n        var op1 = this.AddOutPt(horzEdge, horzEdge.Top);\n\t\t\t\tif (isTopOfScanbeam) this.AddGhostJoin(op1, horzEdge.Bot);\n        horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n        if (horzEdge.WindDelta === 0)\n          return;\n        //nb: HorzEdge is no longer horizontal here\n        var ePrev = horzEdge.PrevInAEL;\n        var eNext = horzEdge.NextInAEL;\n        if (ePrev !== null && ePrev.Curr.X == horzEdge.Bot.X &&\n          ePrev.Curr.Y == horzEdge.Bot.Y && ePrev.WindDelta !== 0 &&\n          (ePrev.OutIdx >= 0 && ePrev.Curr.Y > ePrev.Top.Y &&\n            ClipperLib.ClipperBase.SlopesEqual(horzEdge, ePrev, this.m_UseFullRange)))\n        {\n          var op2 = this.AddOutPt(ePrev, horzEdge.Bot);\n          this.AddJoin(op1, op2, horzEdge.Top);\n        }\n        else if (eNext !== null && eNext.Curr.X == horzEdge.Bot.X &&\n          eNext.Curr.Y == horzEdge.Bot.Y && eNext.WindDelta !== 0 &&\n          eNext.OutIdx >= 0 && eNext.Curr.Y > eNext.Top.Y &&\n          ClipperLib.ClipperBase.SlopesEqual(horzEdge, eNext, this.m_UseFullRange))\n        {\n          var op2 = this.AddOutPt(eNext, horzEdge.Bot);\n          this.AddJoin(op1, op2, horzEdge.Top);\n        }\n      }\n      else horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n    }\n  \telse\n    {\n      if (horzEdge.OutIdx >= 0)\n        this.AddOutPt(horzEdge, horzEdge.Top);\n      this.DeleteFromAEL(horzEdge);\n    }\n  };\n  ClipperLib.Clipper.prototype.GetNextInAEL = function (e, Direction)\n  {\n    return Direction == ClipperLib.Direction.dLeftToRight ? e.NextInAEL : e.PrevInAEL;\n  };\n  ClipperLib.Clipper.prototype.IsMinima = function (e)\n  {\n    return e !== null && (e.Prev.NextInLML != e) && (e.Next.NextInLML != e);\n  };\n  ClipperLib.Clipper.prototype.IsMaxima = function (e, Y)\n  {\n    return (e !== null && e.Top.Y == Y && e.NextInLML === null);\n  };\n  ClipperLib.Clipper.prototype.IsIntermediate = function (e, Y)\n  {\n    return (e.Top.Y == Y && e.NextInLML !== null);\n  };\n  ClipperLib.Clipper.prototype.GetMaximaPair = function (e)\n  {\n    var result = null;\n    if ((ClipperLib.IntPoint.op_Equality(e.Next.Top, e.Top)) && e.Next.NextInLML === null)\n      result = e.Next;\n    else if ((ClipperLib.IntPoint.op_Equality(e.Prev.Top, e.Top)) && e.Prev.NextInLML === null)\n      result = e.Prev;\n    if (result !== null && (result.OutIdx == -2 || (result.NextInAEL == result.PrevInAEL && !ClipperLib.ClipperBase.IsHorizontal(result))))\n      return null;\n    return result;\n  };\n\n  ClipperLib.Clipper.prototype.ProcessIntersections = function (topY)\n  {\n    if (this.m_ActiveEdges == null)\n      return true;\n    try\n    {\n      this.BuildIntersectList(topY);\n      if (this.m_IntersectList.length == 0)\n        return true;\n      if (this.m_IntersectList.length == 1 || this.FixupIntersectionOrder())\n        this.ProcessIntersectList();\n      else\n        return false;\n    }\n    catch ($$e2)\n    {\n      this.m_SortedEdges = null;\n      this.m_IntersectList.length = 0;\n      ClipperLib.Error(\"ProcessIntersections error\");\n    }\n    this.m_SortedEdges = null;\n    return true;\n  };\n  ClipperLib.Clipper.prototype.BuildIntersectList = function (topY)\n  {\n    if (this.m_ActiveEdges === null)\n      return;\n    //prepare for sorting ...\n    var e = this.m_ActiveEdges;\n    //console.log(JSON.stringify(JSON.decycle( e )));\n    this.m_SortedEdges = e;\n    while (e !== null)\n    {\n      e.PrevInSEL = e.PrevInAEL;\n      e.NextInSEL = e.NextInAEL;\n      e.Curr.X = ClipperLib.Clipper.TopX(e, topY);\n      e = e.NextInAEL;\n    }\n    //bubblesort ...\n    var isModified = true;\n    while (isModified && this.m_SortedEdges !== null)\n    {\n      isModified = false;\n      e = this.m_SortedEdges;\n      while (e.NextInSEL !== null)\n      {\n        var eNext = e.NextInSEL;\n        var pt = new ClipperLib.IntPoint();\n        //console.log(\"e.Curr.X: \" + e.Curr.X + \" eNext.Curr.X\" + eNext.Curr.X);\n        if (e.Curr.X > eNext.Curr.X)\n        {\n\t\t\t\t\tthis.IntersectPoint(e, eNext, pt);\n          var newNode = new ClipperLib.IntersectNode();\n          newNode.Edge1 = e;\n          newNode.Edge2 = eNext;\n          //newNode.Pt = pt;\n          newNode.Pt.X = pt.X;\n          newNode.Pt.Y = pt.Y;\n          this.m_IntersectList.push(newNode);\n          this.SwapPositionsInSEL(e, eNext);\n          isModified = true;\n        }\n        else\n          e = eNext;\n      }\n      if (e.PrevInSEL !== null)\n        e.PrevInSEL.NextInSEL = null;\n      else\n        break;\n    }\n    this.m_SortedEdges = null;\n  };\n  ClipperLib.Clipper.prototype.EdgesAdjacent = function (inode)\n  {\n    return (inode.Edge1.NextInSEL == inode.Edge2) || (inode.Edge1.PrevInSEL == inode.Edge2);\n  };\n  ClipperLib.Clipper.IntersectNodeSort = function (node1, node2)\n  {\n    //the following typecast is safe because the differences in Pt.Y will\n    //be limited to the height of the scanbeam.\n    return (node2.Pt.Y - node1.Pt.Y);\n  };\n  ClipperLib.Clipper.prototype.FixupIntersectionOrder = function ()\n  {\n    //pre-condition: intersections are sorted bottom-most first.\n    //Now it's crucial that intersections are made only between adjacent edges,\n    //so to ensure this the order of intersections may need adjusting ...\n    this.m_IntersectList.sort(this.m_IntersectNodeComparer);\n    this.CopyAELToSEL();\n    var cnt = this.m_IntersectList.length;\n    for (var i = 0; i < cnt; i++)\n    {\n      if (!this.EdgesAdjacent(this.m_IntersectList[i]))\n      {\n        var j = i + 1;\n        while (j < cnt && !this.EdgesAdjacent(this.m_IntersectList[j]))\n          j++;\n        if (j == cnt)\n          return false;\n        var tmp = this.m_IntersectList[i];\n        this.m_IntersectList[i] = this.m_IntersectList[j];\n        this.m_IntersectList[j] = tmp;\n      }\n      this.SwapPositionsInSEL(this.m_IntersectList[i].Edge1, this.m_IntersectList[i].Edge2);\n    }\n    return true;\n  };\n  ClipperLib.Clipper.prototype.ProcessIntersectList = function ()\n  {\n    for (var i = 0, ilen = this.m_IntersectList.length; i < ilen; i++)\n    {\n      var iNode = this.m_IntersectList[i];\n      this.IntersectEdges(iNode.Edge1, iNode.Edge2, iNode.Pt);\n      this.SwapPositionsInAEL(iNode.Edge1, iNode.Edge2);\n    }\n    this.m_IntersectList.length = 0;\n  };\n  /*\n  --------------------------------\n  Round speedtest: http://jsperf.com/fastest-round\n  --------------------------------\n  */\n  var R1 = function (a)\n  {\n    return a < 0 ? Math.ceil(a - 0.5) : Math.round(a)\n  };\n  var R2 = function (a)\n  {\n    return a < 0 ? Math.ceil(a - 0.5) : Math.floor(a + 0.5)\n  };\n  var R3 = function (a)\n  {\n    return a < 0 ? -Math.round(Math.abs(a)) : Math.round(a)\n  };\n  var R4 = function (a)\n  {\n    if (a < 0)\n    {\n      a -= 0.5;\n      return a < -2147483648 ? Math.ceil(a) : a | 0;\n    }\n    else\n    {\n      a += 0.5;\n      return a > 2147483647 ? Math.floor(a) : a | 0;\n    }\n  };\n  if (browser.msie) ClipperLib.Clipper.Round = R1;\n  else if (browser.chromium) ClipperLib.Clipper.Round = R3;\n  else if (browser.safari) ClipperLib.Clipper.Round = R4;\n  else ClipperLib.Clipper.Round = R2; // eg. browser.chrome || browser.firefox || browser.opera\n  ClipperLib.Clipper.TopX = function (edge, currentY)\n  {\n    //if (edge.Bot == edge.Curr) alert (\"edge.Bot = edge.Curr\");\n    //if (edge.Bot == edge.Top) alert (\"edge.Bot = edge.Top\");\n    if (currentY == edge.Top.Y)\n      return edge.Top.X;\n    return edge.Bot.X + ClipperLib.Clipper.Round(edge.Dx * (currentY - edge.Bot.Y));\n  };\n  ClipperLib.Clipper.prototype.IntersectPoint = function (edge1, edge2, ip)\n  {\n    ip.X = 0;\n    ip.Y = 0;\n    var b1, b2;\n    //nb: with very large coordinate values, it's possible for SlopesEqual() to\n    //return false but for the edge.Dx value be equal due to double precision rounding.\n    if (edge1.Dx == edge2.Dx)\n\t\t{\n\t\t\tip.Y = edge1.Curr.Y;\n\t\t\tip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n\t\t\treturn;\n    }\n    if (edge1.Delta.X === 0)\n    {\n      ip.X = edge1.Bot.X;\n      if (ClipperLib.ClipperBase.IsHorizontal(edge2))\n      {\n        ip.Y = edge2.Bot.Y;\n      }\n      else\n      {\n        b2 = edge2.Bot.Y - (edge2.Bot.X / edge2.Dx);\n        ip.Y = ClipperLib.Clipper.Round(ip.X / edge2.Dx + b2);\n      }\n    }\n    else if (edge2.Delta.X === 0)\n    {\n      ip.X = edge2.Bot.X;\n      if (ClipperLib.ClipperBase.IsHorizontal(edge1))\n      {\n        ip.Y = edge1.Bot.Y;\n      }\n      else\n      {\n        b1 = edge1.Bot.Y - (edge1.Bot.X / edge1.Dx);\n        ip.Y = ClipperLib.Clipper.Round(ip.X / edge1.Dx + b1);\n      }\n    }\n    else\n    {\n      b1 = edge1.Bot.X - edge1.Bot.Y * edge1.Dx;\n      b2 = edge2.Bot.X - edge2.Bot.Y * edge2.Dx;\n      var q = (b2 - b1) / (edge1.Dx - edge2.Dx);\n      ip.Y = ClipperLib.Clipper.Round(q);\n      if (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n        ip.X = ClipperLib.Clipper.Round(edge1.Dx * q + b1);\n      else\n        ip.X = ClipperLib.Clipper.Round(edge2.Dx * q + b2);\n    }\n    if (ip.Y < edge1.Top.Y || ip.Y < edge2.Top.Y)\n    {\n      if (edge1.Top.Y > edge2.Top.Y)\n      {\n        ip.Y = edge1.Top.Y;\n        ip.X = ClipperLib.Clipper.TopX(edge2, edge1.Top.Y);\n        return ip.X < edge1.Top.X;\n      }\n      else\n        ip.Y = edge2.Top.Y;\n      if (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n        ip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n      else\n        ip.X = ClipperLib.Clipper.TopX(edge2, ip.Y);\n    }\n\t\t//finally, don't allow 'ip' to be BELOW curr.Y (ie bottom of scanbeam) ...\n\t\tif (ip.Y > edge1.Curr.Y)\n\t\t{\n\t\t\tip.Y = edge1.Curr.Y;\n\t\t\t//better to use the more vertical edge to derive X ...\n\t\t\tif (Math.abs(edge1.Dx) > Math.abs(edge2.Dx))\n\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge2, ip.Y);\n\t\t\telse\n\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n\t\t}\n  };\n\n  ClipperLib.Clipper.prototype.ProcessEdgesAtTopOfScanbeam = function (topY)\n  {\n    var e = this.m_ActiveEdges;\n    while (e !== null)\n    {\n      //1. process maxima, treating them as if they're 'bent' horizontal edges,\n      //   but exclude maxima with horizontal edges. nb: e can't be a horizontal.\n      var IsMaximaEdge = this.IsMaxima(e, topY);\n      if (IsMaximaEdge)\n      {\n        var eMaxPair = this.GetMaximaPair(e);\n        IsMaximaEdge = (eMaxPair === null || !ClipperLib.ClipperBase.IsHorizontal(eMaxPair));\n      }\n      if (IsMaximaEdge)\n      {\n        var ePrev = e.PrevInAEL;\n        this.DoMaxima(e);\n        if (ePrev === null)\n          e = this.m_ActiveEdges;\n        else\n          e = ePrev.NextInAEL;\n      }\n      else\n      {\n        //2. promote horizontal edges, otherwise update Curr.X and Curr.Y ...\n        if (this.IsIntermediate(e, topY) && ClipperLib.ClipperBase.IsHorizontal(e.NextInLML))\n        {\n          e = this.UpdateEdgeIntoAEL(e);\n          if (e.OutIdx >= 0)\n            this.AddOutPt(e, e.Bot);\n          this.AddEdgeToSEL(e);\n        }\n        else\n        {\n          e.Curr.X = ClipperLib.Clipper.TopX(e, topY);\n          e.Curr.Y = topY;\n        }\n        if (this.StrictlySimple)\n        {\n          var ePrev = e.PrevInAEL;\n          if ((e.OutIdx >= 0) && (e.WindDelta !== 0) && ePrev !== null &&\n            (ePrev.OutIdx >= 0) && (ePrev.Curr.X == e.Curr.X) &&\n            (ePrev.WindDelta !== 0))\n          {\n           \tvar ip = new ClipperLib.IntPoint(e.Curr);\n\n\t\t\t\t\t\tif(use_xyz)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.SetZ(ip, ePrev, e);\n\t\t\t\t\t\t}\n\n            var op = this.AddOutPt(ePrev, ip);\n            var op2 = this.AddOutPt(e, ip);\n            this.AddJoin(op, op2, ip);\n            //StrictlySimple (type-3) join\n          }\n        }\n        e = e.NextInAEL;\n      }\n    }\n    //3. Process horizontals at the Top of the scanbeam ...\n    this.ProcessHorizontals(true);\n    //4. Promote intermediate vertices ...\n    e = this.m_ActiveEdges;\n    while (e !== null)\n    {\n      if (this.IsIntermediate(e, topY))\n      {\n        var op = null;\n        if (e.OutIdx >= 0)\n          op = this.AddOutPt(e, e.Top);\n        e = this.UpdateEdgeIntoAEL(e);\n        //if output polygons share an edge, they'll need joining later ...\n        var ePrev = e.PrevInAEL;\n        var eNext = e.NextInAEL;\n        if (ePrev !== null && ePrev.Curr.X == e.Bot.X &&\n          ePrev.Curr.Y == e.Bot.Y && op !== null &&\n          ePrev.OutIdx >= 0 && ePrev.Curr.Y > ePrev.Top.Y &&\n          ClipperLib.ClipperBase.SlopesEqual(e, ePrev, this.m_UseFullRange) &&\n          (e.WindDelta !== 0) && (ePrev.WindDelta !== 0))\n        {\n          var op2 = this.AddOutPt(ePrev, e.Bot);\n          this.AddJoin(op, op2, e.Top);\n        }\n        else if (eNext !== null && eNext.Curr.X == e.Bot.X &&\n          eNext.Curr.Y == e.Bot.Y && op !== null &&\n          eNext.OutIdx >= 0 && eNext.Curr.Y > eNext.Top.Y &&\n          ClipperLib.ClipperBase.SlopesEqual(e, eNext, this.m_UseFullRange) &&\n          (e.WindDelta !== 0) && (eNext.WindDelta !== 0))\n        {\n          var op2 = this.AddOutPt(eNext, e.Bot);\n          this.AddJoin(op, op2, e.Top);\n        }\n      }\n      e = e.NextInAEL;\n    }\n  };\n  ClipperLib.Clipper.prototype.DoMaxima = function (e)\n  {\n    var eMaxPair = this.GetMaximaPair(e);\n    if (eMaxPair === null)\n    {\n      if (e.OutIdx >= 0)\n        this.AddOutPt(e, e.Top);\n      this.DeleteFromAEL(e);\n      return;\n    }\n    var eNext = e.NextInAEL;\n    var use_lines = true;\n    while (eNext !== null && eNext != eMaxPair)\n    {\n      this.IntersectEdges(e, eNext, e.Top);\n      this.SwapPositionsInAEL(e, eNext);\n      eNext = e.NextInAEL;\n    }\n    if (e.OutIdx == -1 && eMaxPair.OutIdx == -1)\n    {\n      this.DeleteFromAEL(e);\n      this.DeleteFromAEL(eMaxPair);\n    }\n    else if (e.OutIdx >= 0 && eMaxPair.OutIdx >= 0)\n    {\n    \tif (e.OutIdx >= 0) this.AddLocalMaxPoly(e, eMaxPair, e.Top);\n      this.DeleteFromAEL(e);\n      this.DeleteFromAEL(eMaxPair);\n    }\n    else if (use_lines && e.WindDelta === 0)\n    {\n      if (e.OutIdx >= 0)\n      {\n        this.AddOutPt(e, e.Top);\n        e.OutIdx = -1;\n      }\n      this.DeleteFromAEL(e);\n      if (eMaxPair.OutIdx >= 0)\n      {\n        this.AddOutPt(eMaxPair, e.Top);\n        eMaxPair.OutIdx = -1;\n      }\n      this.DeleteFromAEL(eMaxPair);\n    }\n    else\n      ClipperLib.Error(\"DoMaxima error\");\n  };\n  ClipperLib.Clipper.ReversePaths = function (polys)\n  {\n    for (var i = 0, len = polys.length; i < len; i++)\n      polys[i].reverse();\n  };\n  ClipperLib.Clipper.Orientation = function (poly)\n  {\n    return ClipperLib.Clipper.Area(poly) >= 0;\n  };\n  ClipperLib.Clipper.prototype.PointCount = function (pts)\n  {\n    if (pts === null)\n      return 0;\n    var result = 0;\n    var p = pts;\n    do {\n      result++;\n      p = p.Next;\n    }\n    while (p != pts)\n    return result;\n  };\n  ClipperLib.Clipper.prototype.BuildResult = function (polyg)\n  {\n    ClipperLib.Clear(polyg);\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n      var outRec = this.m_PolyOuts[i];\n      if (outRec.Pts === null)\n        continue;\n      var p = outRec.Pts.Prev;\n      var cnt = this.PointCount(p);\n      if (cnt < 2)\n        continue;\n      var pg = new Array(cnt);\n      for (var j = 0; j < cnt; j++)\n      {\n        pg[j] = p.Pt;\n        p = p.Prev;\n      }\n      polyg.push(pg);\n    }\n  };\n  ClipperLib.Clipper.prototype.BuildResult2 = function (polytree)\n  {\n    polytree.Clear();\n    //add each output polygon/contour to polytree ...\n    //polytree.m_AllPolys.set_Capacity(this.m_PolyOuts.length);\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n      var outRec = this.m_PolyOuts[i];\n      var cnt = this.PointCount(outRec.Pts);\n      if ((outRec.IsOpen && cnt < 2) || (!outRec.IsOpen && cnt < 3))\n        continue;\n      this.FixHoleLinkage(outRec);\n      var pn = new ClipperLib.PolyNode();\n      polytree.m_AllPolys.push(pn);\n      outRec.PolyNode = pn;\n      pn.m_polygon.length = cnt;\n      var op = outRec.Pts.Prev;\n      for (var j = 0; j < cnt; j++)\n      {\n        pn.m_polygon[j] = op.Pt;\n        op = op.Prev;\n      }\n    }\n    //fixup PolyNode links etc ...\n    //polytree.m_Childs.set_Capacity(this.m_PolyOuts.length);\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n      var outRec = this.m_PolyOuts[i];\n      if (outRec.PolyNode === null)\n        continue;\n      else if (outRec.IsOpen)\n      {\n        outRec.PolyNode.IsOpen = true;\n        polytree.AddChild(outRec.PolyNode);\n      }\n      else if (outRec.FirstLeft !== null && outRec.FirstLeft.PolyNode != null)\n        outRec.FirstLeft.PolyNode.AddChild(outRec.PolyNode);\n      else\n        polytree.AddChild(outRec.PolyNode);\n    }\n  };\n  ClipperLib.Clipper.prototype.FixupOutPolygon = function (outRec)\n  {\n    //FixupOutPolygon() - removes duplicate points and simplifies consecutive\n    //parallel edges by removing the middle vertex.\n    var lastOK = null;\n    outRec.BottomPt = null;\n    var pp = outRec.Pts;\n    for (;;)\n    {\n      if (pp.Prev == pp || pp.Prev == pp.Next)\n      {\n        outRec.Pts = null;\n        return;\n      }\n      //test for duplicate points and collinear edges ...\n      if ((ClipperLib.IntPoint.op_Equality(pp.Pt, pp.Next.Pt)) || (ClipperLib.IntPoint.op_Equality(pp.Pt, pp.Prev.Pt)) ||\n        (ClipperLib.ClipperBase.SlopesEqual(pp.Prev.Pt, pp.Pt, pp.Next.Pt, this.m_UseFullRange) &&\n          (!this.PreserveCollinear || !this.Pt2IsBetweenPt1AndPt3(pp.Prev.Pt, pp.Pt, pp.Next.Pt))))\n      {\n        lastOK = null;\n        pp.Prev.Next = pp.Next;\n        pp.Next.Prev = pp.Prev;\n        pp = pp.Prev;\n      }\n      else if (pp == lastOK)\n        break;\n      else\n      {\n        if (lastOK === null)\n          lastOK = pp;\n        pp = pp.Next;\n      }\n    }\n    outRec.Pts = pp;\n  };\n  ClipperLib.Clipper.prototype.DupOutPt = function (outPt, InsertAfter)\n  {\n    var result = new ClipperLib.OutPt();\n    //result.Pt = outPt.Pt;\n    result.Pt.X = outPt.Pt.X;\n    result.Pt.Y = outPt.Pt.Y;\n    result.Idx = outPt.Idx;\n    if (InsertAfter)\n    {\n      result.Next = outPt.Next;\n      result.Prev = outPt;\n      outPt.Next.Prev = result;\n      outPt.Next = result;\n    }\n    else\n    {\n      result.Prev = outPt.Prev;\n      result.Next = outPt;\n      outPt.Prev.Next = result;\n      outPt.Prev = result;\n    }\n    return result;\n  };\n  ClipperLib.Clipper.prototype.GetOverlap = function (a1, a2, b1, b2, $val)\n  {\n    if (a1 < a2)\n    {\n      if (b1 < b2)\n      {\n        $val.Left = Math.max(a1, b1);\n        $val.Right = Math.min(a2, b2);\n      }\n      else\n      {\n        $val.Left = Math.max(a1, b2);\n        $val.Right = Math.min(a2, b1);\n      }\n    }\n    else\n    {\n      if (b1 < b2)\n      {\n        $val.Left = Math.max(a2, b1);\n        $val.Right = Math.min(a1, b2);\n      }\n      else\n      {\n        $val.Left = Math.max(a2, b2);\n        $val.Right = Math.min(a1, b1);\n      }\n    }\n    return $val.Left < $val.Right;\n  };\n  ClipperLib.Clipper.prototype.JoinHorz = function (op1, op1b, op2, op2b, Pt, DiscardLeft)\n  {\n    var Dir1 = (op1.Pt.X > op1b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight);\n    var Dir2 = (op2.Pt.X > op2b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight);\n    if (Dir1 == Dir2)\n      return false;\n    //When DiscardLeft, we want Op1b to be on the Left of Op1, otherwise we\n    //want Op1b to be on the Right. (And likewise with Op2 and Op2b.)\n    //So, to facilitate this while inserting Op1b and Op2b ...\n    //when DiscardLeft, make sure we're AT or RIGHT of Pt before adding Op1b,\n    //otherwise make sure we're AT or LEFT of Pt. (Likewise with Op2b.)\n    if (Dir1 == ClipperLib.Direction.dLeftToRight)\n    {\n      while (op1.Next.Pt.X <= Pt.X &&\n        op1.Next.Pt.X >= op1.Pt.X && op1.Next.Pt.Y == Pt.Y)\n        op1 = op1.Next;\n      if (DiscardLeft && (op1.Pt.X != Pt.X))\n        op1 = op1.Next;\n      op1b = this.DupOutPt(op1, !DiscardLeft);\n      if (ClipperLib.IntPoint.op_Inequality(op1b.Pt, Pt))\n      {\n        op1 = op1b;\n        //op1.Pt = Pt;\n        op1.Pt.X = Pt.X;\n        op1.Pt.Y = Pt.Y;\n        op1b = this.DupOutPt(op1, !DiscardLeft);\n      }\n    }\n    else\n    {\n      while (op1.Next.Pt.X >= Pt.X &&\n        op1.Next.Pt.X <= op1.Pt.X && op1.Next.Pt.Y == Pt.Y)\n        op1 = op1.Next;\n      if (!DiscardLeft && (op1.Pt.X != Pt.X))\n        op1 = op1.Next;\n      op1b = this.DupOutPt(op1, DiscardLeft);\n      if (ClipperLib.IntPoint.op_Inequality(op1b.Pt, Pt))\n      {\n        op1 = op1b;\n        //op1.Pt = Pt;\n        op1.Pt.X = Pt.X;\n        op1.Pt.Y = Pt.Y;\n        op1b = this.DupOutPt(op1, DiscardLeft);\n      }\n    }\n    if (Dir2 == ClipperLib.Direction.dLeftToRight)\n    {\n      while (op2.Next.Pt.X <= Pt.X &&\n        op2.Next.Pt.X >= op2.Pt.X && op2.Next.Pt.Y == Pt.Y)\n        op2 = op2.Next;\n      if (DiscardLeft && (op2.Pt.X != Pt.X))\n        op2 = op2.Next;\n      op2b = this.DupOutPt(op2, !DiscardLeft);\n      if (ClipperLib.IntPoint.op_Inequality(op2b.Pt, Pt))\n      {\n        op2 = op2b;\n        //op2.Pt = Pt;\n        op2.Pt.X = Pt.X;\n        op2.Pt.Y = Pt.Y;\n        op2b = this.DupOutPt(op2, !DiscardLeft);\n      }\n    }\n    else\n    {\n      while (op2.Next.Pt.X >= Pt.X &&\n        op2.Next.Pt.X <= op2.Pt.X && op2.Next.Pt.Y == Pt.Y)\n        op2 = op2.Next;\n      if (!DiscardLeft && (op2.Pt.X != Pt.X))\n        op2 = op2.Next;\n      op2b = this.DupOutPt(op2, DiscardLeft);\n      if (ClipperLib.IntPoint.op_Inequality(op2b.Pt, Pt))\n      {\n        op2 = op2b;\n        //op2.Pt = Pt;\n        op2.Pt.X = Pt.X;\n        op2.Pt.Y = Pt.Y;\n        op2b = this.DupOutPt(op2, DiscardLeft);\n      }\n    }\n    if ((Dir1 == ClipperLib.Direction.dLeftToRight) == DiscardLeft)\n    {\n      op1.Prev = op2;\n      op2.Next = op1;\n      op1b.Next = op2b;\n      op2b.Prev = op1b;\n    }\n    else\n    {\n      op1.Next = op2;\n      op2.Prev = op1;\n      op1b.Prev = op2b;\n      op2b.Next = op1b;\n    }\n    return true;\n  };\n  ClipperLib.Clipper.prototype.JoinPoints = function (j, outRec1, outRec2)\n  {\n    var op1 = j.OutPt1,\n      op1b = new ClipperLib.OutPt();\n    var op2 = j.OutPt2,\n      op2b = new ClipperLib.OutPt();\n    //There are 3 kinds of joins for output polygons ...\n    //1. Horizontal joins where Join.OutPt1 & Join.OutPt2 are a vertices anywhere\n    //along (horizontal) collinear edges (& Join.OffPt is on the same horizontal).\n    //2. Non-horizontal joins where Join.OutPt1 & Join.OutPt2 are at the same\n    //location at the Bottom of the overlapping segment (& Join.OffPt is above).\n    //3. StrictlySimple joins where edges touch but are not collinear and where\n    //Join.OutPt1, Join.OutPt2 & Join.OffPt all share the same point.\n    var isHorizontal = (j.OutPt1.Pt.Y == j.OffPt.Y);\n    if (isHorizontal && (ClipperLib.IntPoint.op_Equality(j.OffPt, j.OutPt1.Pt)) && (ClipperLib.IntPoint.op_Equality(j.OffPt, j.OutPt2.Pt)))\n    {\n      //Strictly Simple join ...\n\t\t\tif (outRec1 != outRec2) return false;\n\n      op1b = j.OutPt1.Next;\n      while (op1b != op1 && (ClipperLib.IntPoint.op_Equality(op1b.Pt, j.OffPt)))\n        op1b = op1b.Next;\n      var reverse1 = (op1b.Pt.Y > j.OffPt.Y);\n      op2b = j.OutPt2.Next;\n      while (op2b != op2 && (ClipperLib.IntPoint.op_Equality(op2b.Pt, j.OffPt)))\n        op2b = op2b.Next;\n      var reverse2 = (op2b.Pt.Y > j.OffPt.Y);\n      if (reverse1 == reverse2)\n        return false;\n      if (reverse1)\n      {\n        op1b = this.DupOutPt(op1, false);\n        op2b = this.DupOutPt(op2, true);\n        op1.Prev = op2;\n        op2.Next = op1;\n        op1b.Next = op2b;\n        op2b.Prev = op1b;\n        j.OutPt1 = op1;\n        j.OutPt2 = op1b;\n        return true;\n      }\n      else\n      {\n        op1b = this.DupOutPt(op1, true);\n        op2b = this.DupOutPt(op2, false);\n        op1.Next = op2;\n        op2.Prev = op1;\n        op1b.Prev = op2b;\n        op2b.Next = op1b;\n        j.OutPt1 = op1;\n        j.OutPt2 = op1b;\n        return true;\n      }\n    }\n    else if (isHorizontal)\n    {\n      //treat horizontal joins differently to non-horizontal joins since with\n      //them we're not yet sure where the overlapping is. OutPt1.Pt & OutPt2.Pt\n      //may be anywhere along the horizontal edge.\n      op1b = op1;\n      while (op1.Prev.Pt.Y == op1.Pt.Y && op1.Prev != op1b && op1.Prev != op2)\n        op1 = op1.Prev;\n      while (op1b.Next.Pt.Y == op1b.Pt.Y && op1b.Next != op1 && op1b.Next != op2)\n        op1b = op1b.Next;\n      if (op1b.Next == op1 || op1b.Next == op2)\n        return false;\n      //a flat 'polygon'\n      op2b = op2;\n      while (op2.Prev.Pt.Y == op2.Pt.Y && op2.Prev != op2b && op2.Prev != op1b)\n        op2 = op2.Prev;\n      while (op2b.Next.Pt.Y == op2b.Pt.Y && op2b.Next != op2 && op2b.Next != op1)\n        op2b = op2b.Next;\n      if (op2b.Next == op2 || op2b.Next == op1)\n        return false;\n      //a flat 'polygon'\n      //Op1 -. Op1b & Op2 -. Op2b are the extremites of the horizontal edges\n\n      var $val = {Left: null, Right: null};\n      if (!this.GetOverlap(op1.Pt.X, op1b.Pt.X, op2.Pt.X, op2b.Pt.X, $val))\n        return false;\n      var Left = $val.Left;\n      var Right = $val.Right;\n\n      //DiscardLeftSide: when overlapping edges are joined, a spike will created\n      //which needs to be cleaned up. However, we don't want Op1 or Op2 caught up\n      //on the discard Side as either may still be needed for other joins ...\n      var Pt = new ClipperLib.IntPoint();\n      var DiscardLeftSide;\n      if (op1.Pt.X >= Left && op1.Pt.X <= Right)\n      {\n        //Pt = op1.Pt;\n        Pt.X = op1.Pt.X;\n        Pt.Y = op1.Pt.Y;\n        DiscardLeftSide = (op1.Pt.X > op1b.Pt.X);\n      }\n      else if (op2.Pt.X >= Left && op2.Pt.X <= Right)\n      {\n        //Pt = op2.Pt;\n        Pt.X = op2.Pt.X;\n        Pt.Y = op2.Pt.Y;\n        DiscardLeftSide = (op2.Pt.X > op2b.Pt.X);\n      }\n      else if (op1b.Pt.X >= Left && op1b.Pt.X <= Right)\n      {\n        //Pt = op1b.Pt;\n        Pt.X = op1b.Pt.X;\n        Pt.Y = op1b.Pt.Y;\n        DiscardLeftSide = op1b.Pt.X > op1.Pt.X;\n      }\n      else\n      {\n        //Pt = op2b.Pt;\n        Pt.X = op2b.Pt.X;\n        Pt.Y = op2b.Pt.Y;\n        DiscardLeftSide = (op2b.Pt.X > op2.Pt.X);\n      }\n      j.OutPt1 = op1;\n      j.OutPt2 = op2;\n      return this.JoinHorz(op1, op1b, op2, op2b, Pt, DiscardLeftSide);\n    }\n    else\n    {\n      //nb: For non-horizontal joins ...\n      //    1. Jr.OutPt1.Pt.Y == Jr.OutPt2.Pt.Y\n      //    2. Jr.OutPt1.Pt > Jr.OffPt.Y\n      //make sure the polygons are correctly oriented ...\n      op1b = op1.Next;\n      while ((ClipperLib.IntPoint.op_Equality(op1b.Pt, op1.Pt)) && (op1b != op1))\n        op1b = op1b.Next;\n      var Reverse1 = ((op1b.Pt.Y > op1.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op1.Pt, op1b.Pt, j.OffPt, this.m_UseFullRange));\n      if (Reverse1)\n      {\n        op1b = op1.Prev;\n        while ((ClipperLib.IntPoint.op_Equality(op1b.Pt, op1.Pt)) && (op1b != op1))\n          op1b = op1b.Prev;\n        if ((op1b.Pt.Y > op1.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op1.Pt, op1b.Pt, j.OffPt, this.m_UseFullRange))\n          return false;\n      }\n      op2b = op2.Next;\n      while ((ClipperLib.IntPoint.op_Equality(op2b.Pt, op2.Pt)) && (op2b != op2))\n        op2b = op2b.Next;\n      var Reverse2 = ((op2b.Pt.Y > op2.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op2.Pt, op2b.Pt, j.OffPt, this.m_UseFullRange));\n      if (Reverse2)\n      {\n        op2b = op2.Prev;\n        while ((ClipperLib.IntPoint.op_Equality(op2b.Pt, op2.Pt)) && (op2b != op2))\n          op2b = op2b.Prev;\n        if ((op2b.Pt.Y > op2.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op2.Pt, op2b.Pt, j.OffPt, this.m_UseFullRange))\n          return false;\n      }\n      if ((op1b == op1) || (op2b == op2) || (op1b == op2b) ||\n        ((outRec1 == outRec2) && (Reverse1 == Reverse2)))\n        return false;\n      if (Reverse1)\n      {\n        op1b = this.DupOutPt(op1, false);\n        op2b = this.DupOutPt(op2, true);\n        op1.Prev = op2;\n        op2.Next = op1;\n        op1b.Next = op2b;\n        op2b.Prev = op1b;\n        j.OutPt1 = op1;\n        j.OutPt2 = op1b;\n        return true;\n      }\n      else\n      {\n        op1b = this.DupOutPt(op1, true);\n        op2b = this.DupOutPt(op2, false);\n        op1.Next = op2;\n        op2.Prev = op1;\n        op1b.Prev = op2b;\n        op2b.Next = op1b;\n        j.OutPt1 = op1;\n        j.OutPt2 = op1b;\n        return true;\n      }\n    }\n  };\n  ClipperLib.Clipper.GetBounds = function (paths)\n  {\n    var i = 0,\n      cnt = paths.length;\n    while (i < cnt && paths[i].length == 0) i++;\n    if (i == cnt) return new ClipperLib.IntRect(0, 0, 0, 0);\n    var result = new ClipperLib.IntRect();\n    result.left = paths[i][0].X;\n    result.right = result.left;\n    result.top = paths[i][0].Y;\n    result.bottom = result.top;\n    for (; i < cnt; i++)\n      for (var j = 0, jlen = paths[i].length; j < jlen; j++)\n      {\n        if (paths[i][j].X < result.left) result.left = paths[i][j].X;\n        else if (paths[i][j].X > result.right) result.right = paths[i][j].X;\n        if (paths[i][j].Y < result.top) result.top = paths[i][j].Y;\n        else if (paths[i][j].Y > result.bottom) result.bottom = paths[i][j].Y;\n      }\n    return result;\n  }\n  ClipperLib.Clipper.prototype.GetBounds2 = function (ops)\n  {\n    var opStart = ops;\n    var result = new ClipperLib.IntRect();\n    result.left = ops.Pt.X;\n    result.right = ops.Pt.X;\n    result.top = ops.Pt.Y;\n    result.bottom = ops.Pt.Y;\n    ops = ops.Next;\n    while (ops != opStart)\n    {\n      if (ops.Pt.X < result.left)\n        result.left = ops.Pt.X;\n      if (ops.Pt.X > result.right)\n        result.right = ops.Pt.X;\n      if (ops.Pt.Y < result.top)\n        result.top = ops.Pt.Y;\n      if (ops.Pt.Y > result.bottom)\n        result.bottom = ops.Pt.Y;\n      ops = ops.Next;\n    }\n    return result;\n  };\n\n  ClipperLib.Clipper.PointInPolygon = function (pt, path)\n  {\n    //returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n\t\t//See \"The Point in Polygon Problem for Arbitrary Polygons\" by Hormann & Agathos\n    //http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.5498&rep=rep1&type=pdf\n    var result = 0,\n      cnt = path.length;\n    if (cnt < 3)\n      return 0;\n    var ip = path[0];\n    for (var i = 1; i <= cnt; ++i)\n    {\n      var ipNext = (i == cnt ? path[0] : path[i]);\n      if (ipNext.Y == pt.Y)\n      {\n        if ((ipNext.X == pt.X) || (ip.Y == pt.Y && ((ipNext.X > pt.X) == (ip.X < pt.X))))\n          return -1;\n      }\n      if ((ip.Y < pt.Y) != (ipNext.Y < pt.Y))\n      {\n        if (ip.X >= pt.X)\n        {\n          if (ipNext.X > pt.X)\n            result = 1 - result;\n          else\n          {\n            var d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);\n            if (d == 0)\n              return -1;\n            else if ((d > 0) == (ipNext.Y > ip.Y))\n              result = 1 - result;\n          }\n        }\n        else\n        {\n          if (ipNext.X > pt.X)\n          {\n            var d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);\n            if (d == 0)\n              return -1;\n            else if ((d > 0) == (ipNext.Y > ip.Y))\n              result = 1 - result;\n          }\n        }\n      }\n      ip = ipNext;\n    }\n    return result;\n  };\n\n  ClipperLib.Clipper.prototype.PointInPolygon = function (pt, op)\n  {\n    //returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n\t\t//See \"The Point in Polygon Problem for Arbitrary Polygons\" by Hormann & Agathos\n    //http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.5498&rep=rep1&type=pdf\n    var result = 0;\n    var startOp = op;\n\t\tvar ptx = pt.X, pty = pt.Y;\n    var poly0x = op.Pt.X, poly0y = op.Pt.Y;\n    do\n    {\n\t\t\top = op.Next;\n\t\t\tvar poly1x = op.Pt.X, poly1y = op.Pt.Y;\n      if (poly1y == pty)\n      {\n        if ((poly1x == ptx) || (poly0y == pty && ((poly1x > ptx) == (poly0x < ptx))))\n          return -1;\n      }\n      if ((poly0y < pty) != (poly1y < pty))\n      {\n        if (poly0x >= ptx)\n        {\n          if (poly1x > ptx)\n            result = 1 - result;\n          else\n          {\n            var d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);\n            if (d == 0)\n              return -1;\n            if ((d > 0) == (poly1y > poly0y))\n              result = 1 - result;\n          }\n        }\n        else\n        {\n          if (poly1x > ptx)\n          {\n            var d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);\n            if (d == 0)\n              return -1;\n            if ((d > 0) == (poly1y > poly0y))\n              result = 1 - result;\n          }\n        }\n      }\n      poly0x = poly1x;\n      poly0y = poly1y;\n    } while (startOp != op);\n\n    return result;\n  };\n\n  ClipperLib.Clipper.prototype.Poly2ContainsPoly1 = function (outPt1, outPt2)\n  {\n    var op = outPt1;\n    do\n    {\n\t\t\t//nb: PointInPolygon returns 0 if false, +1 if true, -1 if pt on polygon\n      var res = this.PointInPolygon(op.Pt, outPt2);\n      if (res >= 0)\n        return res > 0;\n      op = op.Next;\n    }\n    while (op != outPt1)\n    return true;\n  };\n  ClipperLib.Clipper.prototype.FixupFirstLefts1 = function (OldOutRec, NewOutRec)\n  {\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n\t\t\tvar outRec = this.m_PolyOuts[i];\n\t\t\tif (outRec.Pts == null || outRec.FirstLeft == null)\n\t\t\t\tcontinue;\n\t\t\tvar firstLeft = this.ParseFirstLeft(outRec.FirstLeft);\n\t\t\tif (firstLeft == OldOutRec)\n\t\t\t{\n        if (this.Poly2ContainsPoly1(outRec.Pts, NewOutRec.Pts))\n          outRec.FirstLeft = NewOutRec;\n      }\n    }\n  };\n  ClipperLib.Clipper.prototype.FixupFirstLefts2 = function (OldOutRec, NewOutRec)\n  {\n    for (var $i2 = 0, $t2 = this.m_PolyOuts, $l2 = $t2.length, outRec = $t2[$i2]; $i2 < $l2; $i2++, outRec = $t2[$i2])\n      if (outRec.FirstLeft == OldOutRec)\n        outRec.FirstLeft = NewOutRec;\n  };\n  ClipperLib.Clipper.ParseFirstLeft = function (FirstLeft)\n  {\n    while (FirstLeft != null && FirstLeft.Pts == null)\n      FirstLeft = FirstLeft.FirstLeft;\n    return FirstLeft;\n  };\n  ClipperLib.Clipper.prototype.JoinCommonEdges = function ()\n  {\n    for (var i = 0, ilen = this.m_Joins.length; i < ilen; i++)\n    {\n      var join = this.m_Joins[i];\n      var outRec1 = this.GetOutRec(join.OutPt1.Idx);\n      var outRec2 = this.GetOutRec(join.OutPt2.Idx);\n      if (outRec1.Pts == null || outRec2.Pts == null)\n        continue;\n      //get the polygon fragment with the correct hole state (FirstLeft)\n      //before calling JoinPoints() ...\n      var holeStateRec;\n      if (outRec1 == outRec2)\n        holeStateRec = outRec1;\n      else if (this.Param1RightOfParam2(outRec1, outRec2))\n        holeStateRec = outRec2;\n      else if (this.Param1RightOfParam2(outRec2, outRec1))\n        holeStateRec = outRec1;\n      else\n        holeStateRec = this.GetLowermostRec(outRec1, outRec2);\n\n      if (!this.JoinPoints(join, outRec1, outRec2)) continue;\n\n      if (outRec1 == outRec2)\n      {\n        //instead of joining two polygons, we've just created a new one by\n        //splitting one polygon into two.\n        outRec1.Pts = join.OutPt1;\n        outRec1.BottomPt = null;\n        outRec2 = this.CreateOutRec();\n        outRec2.Pts = join.OutPt2;\n        //update all OutRec2.Pts Idx's ...\n        this.UpdateOutPtIdxs(outRec2);\n        //We now need to check every OutRec.FirstLeft pointer. If it points\n        //to OutRec1 it may need to point to OutRec2 instead ...\n        if (this.m_UsingPolyTree)\n          for (var j = 0, jlen = this.m_PolyOuts.length; j < jlen - 1; j++)\n          {\n            var oRec = this.m_PolyOuts[j];\n            if (oRec.Pts == null || ClipperLib.Clipper.ParseFirstLeft(oRec.FirstLeft) != outRec1 || oRec.IsHole == outRec1.IsHole)\n              continue;\n            if (this.Poly2ContainsPoly1(oRec.Pts, join.OutPt2))\n              oRec.FirstLeft = outRec2;\n          }\n        if (this.Poly2ContainsPoly1(outRec2.Pts, outRec1.Pts))\n        {\n          //outRec2 is contained by outRec1 ...\n          outRec2.IsHole = !outRec1.IsHole;\n          outRec2.FirstLeft = outRec1;\n          //fixup FirstLeft pointers that may need reassigning to OutRec1\n          if (this.m_UsingPolyTree)\n            this.FixupFirstLefts2(outRec2, outRec1);\n          if ((outRec2.IsHole ^ this.ReverseSolution) == (this.Area(outRec2) > 0))\n            this.ReversePolyPtLinks(outRec2.Pts);\n        }\n        else if (this.Poly2ContainsPoly1(outRec1.Pts, outRec2.Pts))\n        {\n          //outRec1 is contained by outRec2 ...\n          outRec2.IsHole = outRec1.IsHole;\n          outRec1.IsHole = !outRec2.IsHole;\n          outRec2.FirstLeft = outRec1.FirstLeft;\n          outRec1.FirstLeft = outRec2;\n          //fixup FirstLeft pointers that may need reassigning to OutRec1\n          if (this.m_UsingPolyTree)\n            this.FixupFirstLefts2(outRec1, outRec2);\n          if ((outRec1.IsHole ^ this.ReverseSolution) == (this.Area(outRec1) > 0))\n            this.ReversePolyPtLinks(outRec1.Pts);\n        }\n        else\n        {\n          //the 2 polygons are completely separate ...\n          outRec2.IsHole = outRec1.IsHole;\n          outRec2.FirstLeft = outRec1.FirstLeft;\n          //fixup FirstLeft pointers that may need reassigning to OutRec2\n          if (this.m_UsingPolyTree)\n            this.FixupFirstLefts1(outRec1, outRec2);\n        }\n      }\n      else\n      {\n        //joined 2 polygons together ...\n        outRec2.Pts = null;\n        outRec2.BottomPt = null;\n        outRec2.Idx = outRec1.Idx;\n        outRec1.IsHole = holeStateRec.IsHole;\n        if (holeStateRec == outRec2)\n          outRec1.FirstLeft = outRec2.FirstLeft;\n        outRec2.FirstLeft = outRec1;\n        //fixup FirstLeft pointers that may need reassigning to OutRec1\n        if (this.m_UsingPolyTree)\n          this.FixupFirstLefts2(outRec2, outRec1);\n      }\n    }\n  };\n  ClipperLib.Clipper.prototype.UpdateOutPtIdxs = function (outrec)\n  {\n    var op = outrec.Pts;\n    do {\n      op.Idx = outrec.Idx;\n      op = op.Prev;\n    }\n    while (op != outrec.Pts)\n  };\n  ClipperLib.Clipper.prototype.DoSimplePolygons = function ()\n  {\n    var i = 0;\n    while (i < this.m_PolyOuts.length)\n    {\n      var outrec = this.m_PolyOuts[i++];\n      var op = outrec.Pts;\n\t\t\tif (op == null || outrec.IsOpen)\n\t\t\t\tcontinue;\n      do //for each Pt in Polygon until duplicate found do ...\n      {\n        var op2 = op.Next;\n        while (op2 != outrec.Pts)\n        {\n          if ((ClipperLib.IntPoint.op_Equality(op.Pt, op2.Pt)) && op2.Next != op && op2.Prev != op)\n          {\n            //split the polygon into two ...\n            var op3 = op.Prev;\n            var op4 = op2.Prev;\n            op.Prev = op4;\n            op4.Next = op;\n            op2.Prev = op3;\n            op3.Next = op2;\n            outrec.Pts = op;\n            var outrec2 = this.CreateOutRec();\n            outrec2.Pts = op2;\n            this.UpdateOutPtIdxs(outrec2);\n            if (this.Poly2ContainsPoly1(outrec2.Pts, outrec.Pts))\n            {\n              //OutRec2 is contained by OutRec1 ...\n              outrec2.IsHole = !outrec.IsHole;\n              outrec2.FirstLeft = outrec;\n\t\t\t\t\t\t\tif (this.m_UsingPolyTree) this.FixupFirstLefts2(outrec2, outrec);\n\n            }\n            else if (this.Poly2ContainsPoly1(outrec.Pts, outrec2.Pts))\n            {\n              //OutRec1 is contained by OutRec2 ...\n              outrec2.IsHole = outrec.IsHole;\n              outrec.IsHole = !outrec2.IsHole;\n              outrec2.FirstLeft = outrec.FirstLeft;\n              outrec.FirstLeft = outrec2;\n              if (this.m_UsingPolyTree) this.FixupFirstLefts2(outrec, outrec2);\n            }\n            else\n            {\n              //the 2 polygons are separate ...\n              outrec2.IsHole = outrec.IsHole;\n              outrec2.FirstLeft = outrec.FirstLeft;\n\t\t\t\t\t\t\tif (this.m_UsingPolyTree) this.FixupFirstLefts1(outrec, outrec2);\n            }\n            op2 = op;\n            //ie get ready for the next iteration\n          }\n          op2 = op2.Next;\n        }\n        op = op.Next;\n      }\n      while (op != outrec.Pts)\n    }\n  };\n  ClipperLib.Clipper.Area = function (poly)\n  {\n    var cnt = poly.length;\n    if (cnt < 3)\n      return 0;\n    var a = 0;\n    for (var i = 0, j = cnt - 1; i < cnt; ++i)\n    {\n      a += (poly[j].X + poly[i].X) * (poly[j].Y - poly[i].Y);\n      j = i;\n    }\n    return -a * 0.5;\n  };\n  ClipperLib.Clipper.prototype.Area = function (outRec)\n  {\n    var op = outRec.Pts;\n    if (op == null)\n      return 0;\n    var a = 0;\n    do {\n      a = a + (op.Prev.Pt.X + op.Pt.X) * (op.Prev.Pt.Y - op.Pt.Y);\n      op = op.Next;\n    }\n    while (op != outRec.Pts)\n    return a * 0.5;\n  };\n  ClipperLib.Clipper.SimplifyPolygon = function (poly, fillType)\n  {\n    var result = new Array();\n    var c = new ClipperLib.Clipper(0);\n    c.StrictlySimple = true;\n    c.AddPath(poly, ClipperLib.PolyType.ptSubject, true);\n    c.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n    return result;\n  };\n  ClipperLib.Clipper.SimplifyPolygons = function (polys, fillType)\n  {\n    if (typeof (fillType) == \"undefined\") fillType = ClipperLib.PolyFillType.pftEvenOdd;\n    var result = new Array();\n    var c = new ClipperLib.Clipper(0);\n    c.StrictlySimple = true;\n    c.AddPaths(polys, ClipperLib.PolyType.ptSubject, true);\n    c.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n    return result;\n  };\n  ClipperLib.Clipper.DistanceSqrd = function (pt1, pt2)\n  {\n    var dx = (pt1.X - pt2.X);\n    var dy = (pt1.Y - pt2.Y);\n    return (dx * dx + dy * dy);\n  };\n  ClipperLib.Clipper.DistanceFromLineSqrd = function (pt, ln1, ln2)\n  {\n    //The equation of a line in general form (Ax + By + C = 0)\n    //given 2 points (x¹,y¹) & (x²,y²) is ...\n    //(y¹ - y²)x + (x² - x¹)y + (y² - y¹)x¹ - (x² - x¹)y¹ = 0\n    //A = (y¹ - y²); B = (x² - x¹); C = (y² - y¹)x¹ - (x² - x¹)y¹\n    //perpendicular distance of point (x³,y³) = (Ax³ + By³ + C)/Sqrt(A² + B²)\n    //see http://en.wikipedia.org/wiki/Perpendicular_distance\n    var A = ln1.Y - ln2.Y;\n    var B = ln2.X - ln1.X;\n    var C = A * ln1.X + B * ln1.Y;\n    C = A * pt.X + B * pt.Y - C;\n    return (C * C) / (A * A + B * B);\n  };\n\n\tClipperLib.Clipper.SlopesNearCollinear = function(pt1, pt2, pt3, distSqrd)\n\t{\n\t\t//this function is more accurate when the point that's GEOMETRICALLY\n\t\t//between the other 2 points is the one that's tested for distance.\n\t\t//nb: with 'spikes', either pt1 or pt3 is geometrically between the other pts\n\t\tif (Math.abs(pt1.X - pt2.X) > Math.abs(pt1.Y - pt2.Y))\n\t\t{\n\t\tif ((pt1.X > pt2.X) == (pt1.X < pt3.X))\n\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt1, pt2, pt3) < distSqrd;\n\t\telse if ((pt2.X > pt1.X) == (pt2.X < pt3.X))\n\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;\n\t\t\t\telse\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt3, pt1, pt2) < distSqrd;\n\t\t}\n\t\telse\n\t\t{\n\t\tif ((pt1.Y > pt2.Y) == (pt1.Y < pt3.Y))\n\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt1, pt2, pt3) < distSqrd;\n\t\telse if ((pt2.Y > pt1.Y) == (pt2.Y < pt3.Y))\n\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;\n\t\t\t\telse\n\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt3, pt1, pt2) < distSqrd;\n\t\t}\n\t}\n\n  ClipperLib.Clipper.PointsAreClose = function (pt1, pt2, distSqrd)\n  {\n    var dx = pt1.X - pt2.X;\n    var dy = pt1.Y - pt2.Y;\n    return ((dx * dx) + (dy * dy) <= distSqrd);\n  };\n  //------------------------------------------------------------------------------\n  ClipperLib.Clipper.ExcludeOp = function (op)\n  {\n    var result = op.Prev;\n    result.Next = op.Next;\n    op.Next.Prev = result;\n    result.Idx = 0;\n    return result;\n  };\n  ClipperLib.Clipper.CleanPolygon = function (path, distance)\n  {\n    if (typeof (distance) == \"undefined\") distance = 1.415;\n    //distance = proximity in units/pixels below which vertices will be stripped.\n    //Default ~= sqrt(2) so when adjacent vertices or semi-adjacent vertices have\n    //both x & y coords within 1 unit, then the second vertex will be stripped.\n    var cnt = path.length;\n    if (cnt == 0)\n      return new Array();\n    var outPts = new Array(cnt);\n    for (var i = 0; i < cnt; ++i)\n      outPts[i] = new ClipperLib.OutPt();\n    for (var i = 0; i < cnt; ++i)\n    {\n      outPts[i].Pt = path[i];\n      outPts[i].Next = outPts[(i + 1) % cnt];\n      outPts[i].Next.Prev = outPts[i];\n      outPts[i].Idx = 0;\n    }\n    var distSqrd = distance * distance;\n    var op = outPts[0];\n    while (op.Idx == 0 && op.Next != op.Prev)\n    {\n      if (ClipperLib.Clipper.PointsAreClose(op.Pt, op.Prev.Pt, distSqrd))\n      {\n        op = ClipperLib.Clipper.ExcludeOp(op);\n        cnt--;\n      }\n      else if (ClipperLib.Clipper.PointsAreClose(op.Prev.Pt, op.Next.Pt, distSqrd))\n      {\n        ClipperLib.Clipper.ExcludeOp(op.Next);\n        op = ClipperLib.Clipper.ExcludeOp(op);\n        cnt -= 2;\n      }\n      else if (ClipperLib.Clipper.SlopesNearCollinear(op.Prev.Pt, op.Pt, op.Next.Pt, distSqrd))\n      {\n        op = ClipperLib.Clipper.ExcludeOp(op);\n        cnt--;\n      }\n      else\n      {\n        op.Idx = 1;\n        op = op.Next;\n      }\n    }\n    if (cnt < 3)\n      cnt = 0;\n    var result = new Array(cnt);\n    for (var i = 0; i < cnt; ++i)\n    {\n      result[i] = new ClipperLib.IntPoint(op.Pt);\n      op = op.Next;\n    }\n    outPts = null;\n    return result;\n  };\n  ClipperLib.Clipper.CleanPolygons = function (polys, distance)\n  {\n    var result = new Array(polys.length);\n    for (var i = 0, ilen = polys.length; i < ilen; i++)\n      result[i] = ClipperLib.Clipper.CleanPolygon(polys[i], distance);\n    return result;\n  };\n  ClipperLib.Clipper.Minkowski = function (pattern, path, IsSum, IsClosed)\n  {\n    var delta = (IsClosed ? 1 : 0);\n    var polyCnt = pattern.length;\n    var pathCnt = path.length;\n    var result = new Array();\n    if (IsSum)\n      for (var i = 0; i < pathCnt; i++)\n      {\n        var p = new Array(polyCnt);\n        for (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n          p[j] = new ClipperLib.IntPoint(path[i].X + ip.X, path[i].Y + ip.Y);\n        result.push(p);\n      }\n    else\n      for (var i = 0; i < pathCnt; i++)\n      {\n        var p = new Array(polyCnt);\n        for (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n          p[j] = new ClipperLib.IntPoint(path[i].X - ip.X, path[i].Y - ip.Y);\n        result.push(p);\n      }\n    var quads = new Array();\n    for (var i = 0; i < pathCnt - 1 + delta; i++)\n      for (var j = 0; j < polyCnt; j++)\n      {\n        var quad = new Array();\n        quad.push(result[i % pathCnt][j % polyCnt]);\n        quad.push(result[(i + 1) % pathCnt][j % polyCnt]);\n        quad.push(result[(i + 1) % pathCnt][(j + 1) % polyCnt]);\n        quad.push(result[i % pathCnt][(j + 1) % polyCnt]);\n        if (!ClipperLib.Clipper.Orientation(quad))\n          quad.reverse();\n        quads.push(quad);\n      }\n\t\t\treturn quads;\n  };\n\n\tClipperLib.Clipper.MinkowskiSum = function(pattern, path_or_paths, pathIsClosed)\n\t{\n\t\tif(!(path_or_paths[0] instanceof Array))\n\t\t{\n\t\t\tvar path = path_or_paths;\n\t\t\tvar paths = ClipperLib.Clipper.Minkowski(pattern, path, true, pathIsClosed);\n\t\t\tvar c = new ClipperLib.Clipper();\n\t\t\tc.AddPaths(paths, ClipperLib.PolyType.ptSubject, true);\n\t\t\tc.Execute(ClipperLib.ClipType.ctUnion, paths, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\t\treturn paths;\n\t\t}\n\t\telse\n\t\t{\n \t\t\tvar paths = path_or_paths;\n\t\t\tvar solution = new ClipperLib.Paths();\n\t\t\tvar c = new ClipperLib.Clipper();\n\t\t\tfor (var i = 0; i < paths.length; ++i)\n\t\t\t{\n\t\t\t\tvar tmp = ClipperLib.Clipper.Minkowski(pattern, paths[i], true, pathIsClosed);\n\t\t\t\tc.AddPaths(tmp, ClipperLib.PolyType.ptSubject, true);\n\t\t\t\tif (pathIsClosed)\n\t\t\t\t{\n\t\t\t\t\tvar path = ClipperLib.Clipper.TranslatePath(paths[i], pattern[0]);\n\t\t\t\t\tc.AddPath(path, ClipperLib.PolyType.ptClip, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tc.Execute(ClipperLib.ClipType.ctUnion, solution,\n\t\t\t\tClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\t\treturn solution;\n\t\t}\n\t}\n\t//------------------------------------------------------------------------------\n\n\tClipperLib.Clipper.TranslatePath = function (path, delta)\n\t{\n\t\tvar outPath = new ClipperLib.Path();\n\t\tfor (var i = 0; i < path.length; i++)\n\t\t\toutPath.push(new ClipperLib.IntPoint(path[i].X + delta.X, path[i].Y + delta.Y));\n\t\treturn outPath;\n\t}\n\t//------------------------------------------------------------------------------\n\n\tClipperLib.Clipper.MinkowskiDiff = function (poly1, poly2)\n\t{\n\t\tvar paths = ClipperLib.Clipper.Minkowski(poly1, poly2, false, true);\n\t\tvar c = new ClipperLib.Clipper();\n\t\tc.AddPaths(paths, ClipperLib.PolyType.ptSubject, true);\n\t\tc.Execute(ClipperLib.ClipType.ctUnion, paths, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\treturn paths;\n\t}\n\n  ClipperLib.Clipper.PolyTreeToPaths = function (polytree)\n  {\n    var result = new Array();\n    //result.set_Capacity(polytree.get_Total());\n    ClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntAny, result);\n    return result;\n  };\n  ClipperLib.Clipper.AddPolyNodeToPaths = function (polynode, nt, paths)\n  {\n    var match = true;\n    switch (nt)\n    {\n    case ClipperLib.Clipper.NodeType.ntOpen:\n      return;\n    case ClipperLib.Clipper.NodeType.ntClosed:\n      match = !polynode.IsOpen;\n      break;\n    default:\n      break;\n    }\n    if (polynode.m_polygon.length > 0 && match)\n      paths.push(polynode.m_polygon);\n    for (var $i3 = 0, $t3 = polynode.Childs(), $l3 = $t3.length, pn = $t3[$i3]; $i3 < $l3; $i3++, pn = $t3[$i3])\n      ClipperLib.Clipper.AddPolyNodeToPaths(pn, nt, paths);\n  };\n  ClipperLib.Clipper.OpenPathsFromPolyTree = function (polytree)\n  {\n    var result = new ClipperLib.Paths();\n    //result.set_Capacity(polytree.ChildCount());\n    for (var i = 0, ilen = polytree.ChildCount(); i < ilen; i++)\n      if (polytree.Childs()[i].IsOpen)\n        result.push(polytree.Childs()[i].m_polygon);\n    return result;\n  };\n  ClipperLib.Clipper.ClosedPathsFromPolyTree = function (polytree)\n  {\n    var result = new ClipperLib.Paths();\n    //result.set_Capacity(polytree.Total());\n    ClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntClosed, result);\n    return result;\n  };\n  Inherit(ClipperLib.Clipper, ClipperLib.ClipperBase);\n  ClipperLib.Clipper.NodeType = {\n    ntAny: 0,\n    ntOpen: 1,\n    ntClosed: 2\n  };\n  ClipperLib.ClipperOffset = function (miterLimit, arcTolerance)\n  {\n    if (typeof (miterLimit) == \"undefined\") miterLimit = 2;\n    if (typeof (arcTolerance) == \"undefined\") arcTolerance = ClipperLib.ClipperOffset.def_arc_tolerance;\n    this.m_destPolys = new ClipperLib.Paths();\n    this.m_srcPoly = new ClipperLib.Path();\n    this.m_destPoly = new ClipperLib.Path();\n    this.m_normals = new Array();\n    this.m_delta = 0;\n    this.m_sinA = 0;\n    this.m_sin = 0;\n    this.m_cos = 0;\n    this.m_miterLim = 0;\n    this.m_StepsPerRad = 0;\n    this.m_lowest = new ClipperLib.IntPoint();\n    this.m_polyNodes = new ClipperLib.PolyNode();\n    this.MiterLimit = miterLimit;\n    this.ArcTolerance = arcTolerance;\n    this.m_lowest.X = -1;\n  };\n  ClipperLib.ClipperOffset.two_pi = 6.28318530717959;\n  ClipperLib.ClipperOffset.def_arc_tolerance = 0.25;\n  ClipperLib.ClipperOffset.prototype.Clear = function ()\n  {\n    ClipperLib.Clear(this.m_polyNodes.Childs());\n    this.m_lowest.X = -1;\n  };\n  ClipperLib.ClipperOffset.Round = ClipperLib.Clipper.Round;\n  ClipperLib.ClipperOffset.prototype.AddPath = function (path, joinType, endType)\n  {\n    var highI = path.length - 1;\n    if (highI < 0)\n      return;\n    var newNode = new ClipperLib.PolyNode();\n    newNode.m_jointype = joinType;\n    newNode.m_endtype = endType;\n    //strip duplicate points from path and also get index to the lowest point ...\n    if (endType == ClipperLib.EndType.etClosedLine || endType == ClipperLib.EndType.etClosedPolygon)\n      while (highI > 0 && ClipperLib.IntPoint.op_Equality(path[0], path[highI]))\n        highI--;\n    //newNode.m_polygon.set_Capacity(highI + 1);\n    newNode.m_polygon.push(path[0]);\n    var j = 0,\n      k = 0;\n    for (var i = 1; i <= highI; i++)\n      if (ClipperLib.IntPoint.op_Inequality(newNode.m_polygon[j], path[i]))\n      {\n        j++;\n        newNode.m_polygon.push(path[i]);\n        if (path[i].Y > newNode.m_polygon[k].Y || (path[i].Y == newNode.m_polygon[k].Y && path[i].X < newNode.m_polygon[k].X))\n          k = j;\n      }\n    if (endType == ClipperLib.EndType.etClosedPolygon && j < 2) return;\n\n    this.m_polyNodes.AddChild(newNode);\n    //if this path's lowest pt is lower than all the others then update m_lowest\n    if (endType != ClipperLib.EndType.etClosedPolygon)\n      return;\n    if (this.m_lowest.X < 0)\n      this.m_lowest = new ClipperLib.IntPoint(this.m_polyNodes.ChildCount() - 1, k);\n    else\n    {\n      var ip = this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon[this.m_lowest.Y];\n      if (newNode.m_polygon[k].Y > ip.Y || (newNode.m_polygon[k].Y == ip.Y && newNode.m_polygon[k].X < ip.X))\n        this.m_lowest = new ClipperLib.IntPoint(this.m_polyNodes.ChildCount() - 1, k);\n    }\n  };\n  ClipperLib.ClipperOffset.prototype.AddPaths = function (paths, joinType, endType)\n  {\n    for (var i = 0, ilen = paths.length; i < ilen; i++)\n      this.AddPath(paths[i], joinType, endType);\n  };\n  ClipperLib.ClipperOffset.prototype.FixOrientations = function ()\n  {\n    //fixup orientations of all closed paths if the orientation of the\n    //closed path with the lowermost vertex is wrong ...\n    if (this.m_lowest.X >= 0 && !ClipperLib.Clipper.Orientation(this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon))\n    {\n      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n      {\n        var node = this.m_polyNodes.Childs()[i];\n        if (node.m_endtype == ClipperLib.EndType.etClosedPolygon || (node.m_endtype == ClipperLib.EndType.etClosedLine && ClipperLib.Clipper.Orientation(node.m_polygon)))\n          node.m_polygon.reverse();\n      }\n    }\n    else\n    {\n      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n      {\n        var node = this.m_polyNodes.Childs()[i];\n        if (node.m_endtype == ClipperLib.EndType.etClosedLine && !ClipperLib.Clipper.Orientation(node.m_polygon))\n          node.m_polygon.reverse();\n      }\n    }\n  };\n  ClipperLib.ClipperOffset.GetUnitNormal = function (pt1, pt2)\n  {\n    var dx = (pt2.X - pt1.X);\n    var dy = (pt2.Y - pt1.Y);\n    if ((dx == 0) && (dy == 0))\n      return new ClipperLib.DoublePoint(0, 0);\n    var f = 1 / Math.sqrt(dx * dx + dy * dy);\n    dx *= f;\n    dy *= f;\n    return new ClipperLib.DoublePoint(dy, -dx);\n  };\n  ClipperLib.ClipperOffset.prototype.DoOffset = function (delta)\n  {\n    this.m_destPolys = new Array();\n    this.m_delta = delta;\n    //if Zero offset, just copy any CLOSED polygons to m_p and return ...\n    if (ClipperLib.ClipperBase.near_zero(delta))\n    {\n      //this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount);\n      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n      {\n        var node = this.m_polyNodes.Childs()[i];\n        if (node.m_endtype == ClipperLib.EndType.etClosedPolygon)\n          this.m_destPolys.push(node.m_polygon);\n      }\n      return;\n    }\n    //see offset_triginometry3.svg in the documentation folder ...\n    if (this.MiterLimit > 2)\n      this.m_miterLim = 2 / (this.MiterLimit * this.MiterLimit);\n    else\n      this.m_miterLim = 0.5;\n    var y;\n    if (this.ArcTolerance <= 0)\n      y = ClipperLib.ClipperOffset.def_arc_tolerance;\n    else if (this.ArcTolerance > Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance)\n      y = Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance;\n    else\n      y = this.ArcTolerance;\n    //see offset_triginometry2.svg in the documentation folder ...\n    var steps = 3.14159265358979 / Math.acos(1 - y / Math.abs(delta));\n    this.m_sin = Math.sin(ClipperLib.ClipperOffset.two_pi / steps);\n    this.m_cos = Math.cos(ClipperLib.ClipperOffset.two_pi / steps);\n    this.m_StepsPerRad = steps / ClipperLib.ClipperOffset.two_pi;\n    if (delta < 0)\n      this.m_sin = -this.m_sin;\n    //this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount * 2);\n    for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n    {\n      var node = this.m_polyNodes.Childs()[i];\n      this.m_srcPoly = node.m_polygon;\n      var len = this.m_srcPoly.length;\n      if (len == 0 || (delta <= 0 && (len < 3 || node.m_endtype != ClipperLib.EndType.etClosedPolygon)))\n        continue;\n      this.m_destPoly = new Array();\n      if (len == 1)\n      {\n        if (node.m_jointype == ClipperLib.JoinType.jtRound)\n        {\n          var X = 1,\n            Y = 0;\n          for (var j = 1; j <= steps; j++)\n          {\n            this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + Y * delta)));\n            var X2 = X;\n            X = X * this.m_cos - this.m_sin * Y;\n            Y = X2 * this.m_sin + Y * this.m_cos;\n          }\n        }\n        else\n        {\n          var X = -1,\n            Y = -1;\n          for (var j = 0; j < 4; ++j)\n          {\n            this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + Y * delta)));\n            if (X < 0)\n              X = 1;\n            else if (Y < 0)\n              Y = 1;\n            else\n              X = -1;\n          }\n        }\n        this.m_destPolys.push(this.m_destPoly);\n        continue;\n      }\n      //build m_normals ...\n      this.m_normals.length = 0;\n      //this.m_normals.set_Capacity(len);\n      for (var j = 0; j < len - 1; j++)\n        this.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[j], this.m_srcPoly[j + 1]));\n      if (node.m_endtype == ClipperLib.EndType.etClosedLine || node.m_endtype == ClipperLib.EndType.etClosedPolygon)\n        this.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[len - 1], this.m_srcPoly[0]));\n      else\n        this.m_normals.push(new ClipperLib.DoublePoint(this.m_normals[len - 2]));\n      if (node.m_endtype == ClipperLib.EndType.etClosedPolygon)\n      {\n        var k = len - 1;\n        for (var j = 0; j < len; j++)\n          k = this.OffsetPoint(j, k, node.m_jointype);\n        this.m_destPolys.push(this.m_destPoly);\n      }\n      else if (node.m_endtype == ClipperLib.EndType.etClosedLine)\n      {\n        var k = len - 1;\n        for (var j = 0; j < len; j++)\n          k = this.OffsetPoint(j, k, node.m_jointype);\n        this.m_destPolys.push(this.m_destPoly);\n        this.m_destPoly = new Array();\n        //re-build m_normals ...\n        var n = this.m_normals[len - 1];\n        for (var j = len - 1; j > 0; j--)\n          this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);\n        this.m_normals[0] = new ClipperLib.DoublePoint(-n.X, -n.Y);\n        k = 0;\n        for (var j = len - 1; j >= 0; j--)\n          k = this.OffsetPoint(j, k, node.m_jointype);\n        this.m_destPolys.push(this.m_destPoly);\n      }\n      else\n      {\n        var k = 0;\n        for (var j = 1; j < len - 1; ++j)\n          k = this.OffsetPoint(j, k, node.m_jointype);\n        var pt1;\n        if (node.m_endtype == ClipperLib.EndType.etOpenButt)\n        {\n          var j = len - 1;\n          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * delta));\n          this.m_destPoly.push(pt1);\n          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X - this.m_normals[j].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y - this.m_normals[j].Y * delta));\n          this.m_destPoly.push(pt1);\n        }\n        else\n        {\n          var j = len - 1;\n          k = len - 2;\n          this.m_sinA = 0;\n          this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j].X, -this.m_normals[j].Y);\n          if (node.m_endtype == ClipperLib.EndType.etOpenSquare)\n            this.DoSquare(j, k);\n          else\n            this.DoRound(j, k);\n        }\n        //re-build m_normals ...\n        for (var j = len - 1; j > 0; j--)\n          this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);\n        this.m_normals[0] = new ClipperLib.DoublePoint(-this.m_normals[1].X, -this.m_normals[1].Y);\n        k = len - 1;\n        for (var j = k - 1; j > 0; --j)\n          k = this.OffsetPoint(j, k, node.m_jointype);\n        if (node.m_endtype == ClipperLib.EndType.etOpenButt)\n        {\n          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X - this.m_normals[0].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y - this.m_normals[0].Y * delta));\n          this.m_destPoly.push(pt1);\n          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + this.m_normals[0].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + this.m_normals[0].Y * delta));\n          this.m_destPoly.push(pt1);\n        }\n        else\n        {\n          k = 1;\n          this.m_sinA = 0;\n          if (node.m_endtype == ClipperLib.EndType.etOpenSquare)\n            this.DoSquare(0, 1);\n          else\n            this.DoRound(0, 1);\n        }\n        this.m_destPolys.push(this.m_destPoly);\n      }\n    }\n  };\n  ClipperLib.ClipperOffset.prototype.Execute = function ()\n  {\n    var a = arguments,\n      ispolytree = a[0] instanceof ClipperLib.PolyTree;\n    if (!ispolytree) // function (solution, delta)\n    {\n      var solution = a[0],\n        delta = a[1];\n      ClipperLib.Clear(solution);\n      this.FixOrientations();\n      this.DoOffset(delta);\n      //now clean up 'corners' ...\n      var clpr = new ClipperLib.Clipper(0);\n      clpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n      if (delta > 0)\n      {\n        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n      }\n      else\n      {\n        var r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n        var outer = new ClipperLib.Path();\n        outer.push(new ClipperLib.IntPoint(r.left - 10, r.bottom + 10));\n        outer.push(new ClipperLib.IntPoint(r.right + 10, r.bottom + 10));\n        outer.push(new ClipperLib.IntPoint(r.right + 10, r.top - 10));\n        outer.push(new ClipperLib.IntPoint(r.left - 10, r.top - 10));\n        clpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n        clpr.ReverseSolution = true;\n        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n        if (solution.length > 0)\n          solution.splice(0, 1);\n      }\n      //console.log(JSON.stringify(solution));\n    }\n    else // function (polytree, delta)\n    {\n      var solution = a[0],\n        delta = a[1];\n      solution.Clear();\n      this.FixOrientations();\n      this.DoOffset(delta);\n      //now clean up 'corners' ...\n      var clpr = new ClipperLib.Clipper(0);\n      clpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n      if (delta > 0)\n      {\n        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n      }\n      else\n      {\n        var r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n        var outer = new ClipperLib.Path();\n        outer.push(new ClipperLib.IntPoint(r.left - 10, r.bottom + 10));\n        outer.push(new ClipperLib.IntPoint(r.right + 10, r.bottom + 10));\n        outer.push(new ClipperLib.IntPoint(r.right + 10, r.top - 10));\n        outer.push(new ClipperLib.IntPoint(r.left - 10, r.top - 10));\n        clpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n        clpr.ReverseSolution = true;\n        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n        //remove the outer PolyNode rectangle ...\n        if (solution.ChildCount() == 1 && solution.Childs()[0].ChildCount() > 0)\n        {\n          var outerNode = solution.Childs()[0];\n          //solution.Childs.set_Capacity(outerNode.ChildCount);\n          solution.Childs()[0] = outerNode.Childs()[0];\n          solution.Childs()[0].m_Parent = solution;\n          for (var i = 1; i < outerNode.ChildCount(); i++)\n            solution.AddChild(outerNode.Childs()[i]);\n        }\n        else\n          solution.Clear();\n      }\n    }\n  };\n  ClipperLib.ClipperOffset.prototype.OffsetPoint = function (j, k, jointype)\n  {\n\t\t//cross product ...\n\t\tthis.m_sinA = (this.m_normals[k].X * this.m_normals[j].Y - this.m_normals[j].X * this.m_normals[k].Y);\n\n\t\tif (Math.abs(this.m_sinA * this.m_delta) < 1.0)\n\t\t{\n\t\t\t//dot product ...\n\t\t\tvar cosA = (this.m_normals[k].X * this.m_normals[j].X + this.m_normals[j].Y * this.m_normals[k].Y);\n\t\t\tif (cosA > 0) // angle ==> 0 degrees\n\t\t\t{\n\t\t\t\tthis.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[k].X * this.m_delta),\n\t\t\t\t\tClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[k].Y * this.m_delta)));\n\t\t\t\treturn k;\n\t\t\t}\n\t\t\t//else angle ==> 180 degrees\n\t\t}\n    else if (this.m_sinA > 1)\n      this.m_sinA = 1.0;\n    else if (this.m_sinA < -1)\n      this.m_sinA = -1.0;\n    if (this.m_sinA * this.m_delta < 0)\n    {\n      this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[k].X * this.m_delta),\n        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[k].Y * this.m_delta)));\n      this.m_destPoly.push(new ClipperLib.IntPoint(this.m_srcPoly[j]));\n      this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta),\n        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta)));\n    }\n    else\n      switch (jointype)\n      {\n      case ClipperLib.JoinType.jtMiter:\n        {\n          var r = 1 + (this.m_normals[j].X * this.m_normals[k].X + this.m_normals[j].Y * this.m_normals[k].Y);\n          if (r >= this.m_miterLim)\n            this.DoMiter(j, k, r);\n          else\n            this.DoSquare(j, k);\n          break;\n        }\n      case ClipperLib.JoinType.jtSquare:\n        this.DoSquare(j, k);\n        break;\n      case ClipperLib.JoinType.jtRound:\n        this.DoRound(j, k);\n        break;\n      }\n    k = j;\n    return k;\n  };\n  ClipperLib.ClipperOffset.prototype.DoSquare = function (j, k)\n  {\n    var dx = Math.tan(Math.atan2(this.m_sinA,\n      this.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y) / 4);\n    this.m_destPoly.push(new ClipperLib.IntPoint(\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_delta * (this.m_normals[k].X - this.m_normals[k].Y * dx)),\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_delta * (this.m_normals[k].Y + this.m_normals[k].X * dx))));\n    this.m_destPoly.push(new ClipperLib.IntPoint(\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_delta * (this.m_normals[j].X + this.m_normals[j].Y * dx)),\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_delta * (this.m_normals[j].Y - this.m_normals[j].X * dx))));\n  };\n  ClipperLib.ClipperOffset.prototype.DoMiter = function (j, k, r)\n  {\n    var q = this.m_delta / r;\n    this.m_destPoly.push(new ClipperLib.IntPoint(\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + (this.m_normals[k].X + this.m_normals[j].X) * q),\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + (this.m_normals[k].Y + this.m_normals[j].Y) * q)));\n  };\n  ClipperLib.ClipperOffset.prototype.DoRound = function (j, k)\n  {\n    var a = Math.atan2(this.m_sinA,\n      this.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y);\n\n    \tvar steps = Math.max(ClipperLib.Cast_Int32(ClipperLib.ClipperOffset.Round(this.m_StepsPerRad * Math.abs(a))), 1);\n\n    var X = this.m_normals[k].X,\n      Y = this.m_normals[k].Y,\n      X2;\n    for (var i = 0; i < steps; ++i)\n    {\n      this.m_destPoly.push(new ClipperLib.IntPoint(\n        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + X * this.m_delta),\n        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + Y * this.m_delta)));\n      X2 = X;\n      X = X * this.m_cos - this.m_sin * Y;\n      Y = X2 * this.m_sin + Y * this.m_cos;\n    }\n    this.m_destPoly.push(new ClipperLib.IntPoint(\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta),\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta)));\n  };\n  ClipperLib.Error = function (message)\n  {\n    try\n    {\n      throw new Error(message);\n    }\n    catch (err)\n    {\n      alert(err.message);\n    }\n  };\n  // ---------------------------------\n  // JS extension by Timo 2013\n  ClipperLib.JS = {};\n  ClipperLib.JS.AreaOfPolygon = function (poly, scale)\n  {\n    if (!scale) scale = 1;\n    return ClipperLib.Clipper.Area(poly) / (scale * scale);\n  };\n  ClipperLib.JS.AreaOfPolygons = function (poly, scale)\n  {\n    if (!scale) scale = 1;\n    var area = 0;\n    for (var i = 0; i < poly.length; i++)\n    {\n      area += ClipperLib.Clipper.Area(poly[i]);\n    }\n    return area / (scale * scale);\n  };\n  ClipperLib.JS.BoundsOfPath = function (path, scale)\n  {\n    return ClipperLib.JS.BoundsOfPaths([path], scale);\n  };\n  ClipperLib.JS.BoundsOfPaths = function (paths, scale)\n  {\n    if (!scale) scale = 1;\n    var bounds = ClipperLib.Clipper.GetBounds(paths);\n    bounds.left /= scale;\n    bounds.bottom /= scale;\n    bounds.right /= scale;\n    bounds.top /= scale;\n    return bounds;\n  };\n  // Clean() joins vertices that are too near each other\n  // and causes distortion to offsetted polygons without cleaning\n  ClipperLib.JS.Clean = function (polygon, delta)\n  {\n    if (!(polygon instanceof Array)) return [];\n    var isPolygons = polygon[0] instanceof Array;\n    var polygon = ClipperLib.JS.Clone(polygon);\n    if (typeof delta != \"number\" || delta === null)\n    {\n      ClipperLib.Error(\"Delta is not a number in Clean().\");\n      return polygon;\n    }\n    if (polygon.length === 0 || (polygon.length == 1 && polygon[0].length === 0) || delta < 0) return polygon;\n    if (!isPolygons) polygon = [polygon];\n    var k_length = polygon.length;\n    var len, poly, result, d, p, j, i;\n    var results = [];\n    for (var k = 0; k < k_length; k++)\n    {\n      poly = polygon[k];\n      len = poly.length;\n      if (len === 0) continue;\n      else if (len < 3)\n      {\n        result = poly;\n        results.push(result);\n        continue;\n      }\n      result = poly;\n      d = delta * delta;\n      //d = Math.floor(c_delta * c_delta);\n      p = poly[0];\n      j = 1;\n      for (i = 1; i < len; i++)\n      {\n        if ((poly[i].X - p.X) * (poly[i].X - p.X) +\n          (poly[i].Y - p.Y) * (poly[i].Y - p.Y) <= d)\n          continue;\n        result[j] = poly[i];\n        p = poly[i];\n        j++;\n      }\n      p = poly[j - 1];\n      if ((poly[0].X - p.X) * (poly[0].X - p.X) +\n        (poly[0].Y - p.Y) * (poly[0].Y - p.Y) <= d)\n        j--;\n      if (j < len)\n        result.splice(j, len - j);\n      if (result.length) results.push(result);\n    }\n    if (!isPolygons && results.length) results = results[0];\n    else if (!isPolygons && results.length === 0) results = [];\n    else if (isPolygons && results.length === 0) results = [\n      []\n    ];\n    return results;\n  }\n  // Make deep copy of Polygons or Polygon\n  // so that also IntPoint objects are cloned and not only referenced\n  // This should be the fastest way\n  ClipperLib.JS.Clone = function (polygon)\n  {\n    if (!(polygon instanceof Array)) return [];\n    if (polygon.length === 0) return [];\n    else if (polygon.length == 1 && polygon[0].length === 0) return [[]];\n    var isPolygons = polygon[0] instanceof Array;\n    if (!isPolygons) polygon = [polygon];\n    var len = polygon.length,\n      plen, i, j, result;\n    var results = new Array(len);\n    for (i = 0; i < len; i++)\n    {\n      plen = polygon[i].length;\n      result = new Array(plen);\n      for (j = 0; j < plen; j++)\n      {\n        result[j] = {\n          X: polygon[i][j].X,\n          Y: polygon[i][j].Y\n        };\n      }\n      results[i] = result;\n    }\n    if (!isPolygons) results = results[0];\n    return results;\n  };\n  // Removes points that doesn't affect much to the visual appearance.\n  // If middle point is at or under certain distance (tolerance) of the line segment between\n  // start and end point, the middle point is removed.\n  ClipperLib.JS.Lighten = function (polygon, tolerance)\n  {\n    if (!(polygon instanceof Array)) return [];\n    if (typeof tolerance != \"number\" || tolerance === null)\n    {\n      ClipperLib.Error(\"Tolerance is not a number in Lighten().\")\n      return ClipperLib.JS.Clone(polygon);\n    }\n    if (polygon.length === 0 || (polygon.length == 1 && polygon[0].length === 0) || tolerance < 0)\n    {\n      return ClipperLib.JS.Clone(polygon);\n    }\n    if (!(polygon[0] instanceof Array)) polygon = [polygon];\n    var i, j, poly, k, poly2, plen, A, B, P, d, rem, addlast;\n    var bxax, byay, l, ax, ay;\n    var len = polygon.length;\n    var toleranceSq = tolerance * tolerance;\n    var results = [];\n    for (i = 0; i < len; i++)\n    {\n      poly = polygon[i];\n      plen = poly.length;\n      if (plen == 0) continue;\n      for (k = 0; k < 1000000; k++) // could be forever loop, but wiser to restrict max repeat count\n      {\n        poly2 = [];\n        plen = poly.length;\n        // the first have to added to the end, if first and last are not the same\n        // this way we ensure that also the actual last point can be removed if needed\n        if (poly[plen - 1].X != poly[0].X || poly[plen - 1].Y != poly[0].Y)\n        {\n          addlast = 1;\n          poly.push(\n          {\n            X: poly[0].X,\n            Y: poly[0].Y\n          });\n          plen = poly.length;\n        }\n        else addlast = 0;\n        rem = []; // Indexes of removed points\n        for (j = 0; j < plen - 2; j++)\n        {\n          A = poly[j]; // Start point of line segment\n          P = poly[j + 1]; // Middle point. This is the one to be removed.\n          B = poly[j + 2]; // End point of line segment\n          ax = A.X;\n          ay = A.Y;\n          bxax = B.X - ax;\n          byay = B.Y - ay;\n          if (bxax !== 0 || byay !== 0) // To avoid Nan, when A==P && P==B. And to avoid peaks (A==B && A!=P), which have lenght, but not area.\n          {\n            l = ((P.X - ax) * bxax + (P.Y - ay) * byay) / (bxax * bxax + byay * byay);\n            if (l > 1)\n            {\n              ax = B.X;\n              ay = B.Y;\n            }\n            else if (l > 0)\n            {\n              ax += bxax * l;\n              ay += byay * l;\n            }\n          }\n          bxax = P.X - ax;\n          byay = P.Y - ay;\n          d = bxax * bxax + byay * byay;\n          if (d <= toleranceSq)\n          {\n            rem[j + 1] = 1;\n            j++; // when removed, transfer the pointer to the next one\n          }\n        }\n        // add all unremoved points to poly2\n        poly2.push(\n        {\n          X: poly[0].X,\n          Y: poly[0].Y\n        });\n        for (j = 1; j < plen - 1; j++)\n          if (!rem[j]) poly2.push(\n          {\n            X: poly[j].X,\n            Y: poly[j].Y\n          });\n        poly2.push(\n        {\n          X: poly[plen - 1].X,\n          Y: poly[plen - 1].Y\n        });\n        // if the first point was added to the end, remove it\n        if (addlast) poly.pop();\n        // break, if there was not anymore removed points\n        if (!rem.length) break;\n        // else continue looping using poly2, to check if there are points to remove\n        else poly = poly2;\n      }\n      plen = poly2.length;\n      // remove duplicate from end, if needed\n      if (poly2[plen - 1].X == poly2[0].X && poly2[plen - 1].Y == poly2[0].Y)\n      {\n        poly2.pop();\n      }\n      if (poly2.length > 2) // to avoid two-point-polygons\n        results.push(poly2);\n    }\n    if (!(polygon[0] instanceof Array)) results = results[0];\n    if (typeof (results) == \"undefined\") results = [\n      []\n    ];\n    return results;\n  }\n  ClipperLib.JS.PerimeterOfPath = function (path, closed, scale)\n  {\n    if (typeof (path) == \"undefined\") return 0;\n    var sqrt = Math.sqrt;\n    var perimeter = 0.0;\n    var p1, p2, p1x = 0.0,\n      p1y = 0.0,\n      p2x = 0.0,\n      p2y = 0.0;\n    var j = path.length;\n    if (j < 2) return 0;\n    if (closed)\n    {\n      path[j] = path[0];\n      j++;\n    }\n    while (--j)\n    {\n      p1 = path[j];\n      p1x = p1.X;\n      p1y = p1.Y;\n      p2 = path[j - 1];\n      p2x = p2.X;\n      p2y = p2.Y;\n      perimeter += sqrt((p1x - p2x) * (p1x - p2x) + (p1y - p2y) * (p1y - p2y));\n    }\n    if (closed) path.pop();\n    return perimeter / scale;\n  };\n  ClipperLib.JS.PerimeterOfPaths = function (paths, closed, scale)\n  {\n    if (!scale) scale = 1;\n    var perimeter = 0;\n    for (var i = 0; i < paths.length; i++)\n    {\n      perimeter += ClipperLib.JS.PerimeterOfPath(paths[i], closed, scale);\n    }\n    return perimeter;\n  };\n  ClipperLib.JS.ScaleDownPath = function (path, scale)\n  {\n    var i, p;\n    if (!scale) scale = 1;\n    i = path.length;\n    while (i--)\n    {\n      p = path[i];\n      p.X = p.X / scale;\n      p.Y = p.Y / scale;\n    }\n  };\n  ClipperLib.JS.ScaleDownPaths = function (paths, scale)\n  {\n    var i, j, p;\n    if (!scale) scale = 1;\n    i = paths.length;\n    while (i--)\n    {\n      j = paths[i].length;\n      while (j--)\n      {\n        p = paths[i][j];\n        p.X = p.X / scale;\n        p.Y = p.Y / scale;\n      }\n    }\n  };\n  ClipperLib.JS.ScaleUpPath = function (path, scale)\n  {\n    var i, p, round = Math.round;\n    if (!scale) scale = 1;\n    i = path.length;\n    while (i--)\n    {\n      p = path[i];\n      p.X = round(p.X * scale);\n      p.Y = round(p.Y * scale);\n    }\n  };\n  ClipperLib.JS.ScaleUpPaths = function (paths, scale)\n  {\n    var i, j, p, round = Math.round;\n    if (!scale) scale = 1;\n    i = paths.length;\n    while (i--)\n    {\n      j = paths[i].length;\n      while (j--)\n      {\n        p = paths[i][j];\n        p.X = round(p.X * scale);\n        p.Y = round(p.Y * scale);\n      }\n    }\n  };\n  ClipperLib.ExPolygons = function ()\n  {\n    return [];\n  }\n  ClipperLib.ExPolygon = function ()\n  {\n    this.outer = null;\n    this.holes = null;\n  };\n  ClipperLib.JS.AddOuterPolyNodeToExPolygons = function (polynode, expolygons)\n  {\n    var ep = new ClipperLib.ExPolygon();\n    ep.outer = polynode.Contour();\n    var childs = polynode.Childs();\n    var ilen = childs.length;\n    ep.holes = new Array(ilen);\n    var node, n, i, j, childs2, jlen;\n    for (i = 0; i < ilen; i++)\n    {\n      node = childs[i];\n      ep.holes[i] = node.Contour();\n      //Add outer polygons contained by (nested within) holes ...\n      for (j = 0, childs2 = node.Childs(), jlen = childs2.length; j < jlen; j++)\n      {\n        n = childs2[j];\n        ClipperLib.JS.AddOuterPolyNodeToExPolygons(n, expolygons);\n      }\n    }\n    expolygons.push(ep);\n  };\n  ClipperLib.JS.ExPolygonsToPaths = function (expolygons)\n  {\n    var a, i, alen, ilen;\n    var paths = new ClipperLib.Paths();\n    for (a = 0, alen = expolygons.length; a < alen; a++)\n    {\n      paths.push(expolygons[a].outer);\n      for (i = 0, ilen = expolygons[a].holes.length; i < ilen; i++)\n      {\n        paths.push(expolygons[a].holes[i]);\n      }\n    }\n    return paths;\n  }\n  ClipperLib.JS.PolyTreeToExPolygons = function (polytree)\n  {\n    var expolygons = new ClipperLib.ExPolygons();\n    var node, i, childs, ilen;\n    for (i = 0, childs = polytree.Childs(), ilen = childs.length; i < ilen; i++)\n    {\n      node = childs[i];\n      ClipperLib.JS.AddOuterPolyNodeToExPolygons(node, expolygons);\n    }\n    return expolygons;\n  };\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/clipper-lib/clipper.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}